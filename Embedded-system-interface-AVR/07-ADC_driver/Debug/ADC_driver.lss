
ADC_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002234  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00002234  000022c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006c  0080006c  000022d4  2**0
                  ALLOC
  3 .stab         00001bb4  00000000  00000000  000022d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ebf  00000000  00000000  00003e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004d47  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000088d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009493  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <main>
      8a:	0c 94 18 11 	jmp	0x2230	; 0x2230 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HLCD_vSendCommand>:
		{0x04,	0x00,	0x04,	0x0E,  0x0E,  0x0A,  0x15,  0x00}	};//bell



void HLCD_vSendCommand( u8 copy_u8command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	/*set rs pin to 0 clr rs*/
	MDIO_vSetPinValue(CTR_PORT,LCD_RS,DIO_LOW);
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinValue>
	/*clr rw */
	MDIO_vSetPinValue(CTR_PORT,LCD_RW,DIO_LOW);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinValue>

	/*set E pin*/
	MDIO_vSetPinValue(CTR_PORT,LCD_E,DIO_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinValue>

	/*send command */
	MDIO_vSetPortValue(DATA_PORT,copy_u8command);
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	6f 85       	ldd	r22, Y+15	; 0x0f
     b7e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <MDIO_vSetPortValue>

	/*clr E*/
	MDIO_vSetPinValue(CTR_PORT,LCD_E,DIO_LOW);
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	62 e0       	ldi	r22, 0x02	; 2
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinValue>
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 ea       	ldi	r26, 0xA0	; 160
     b92:	b0 e4       	ldi	r27, 0x40	; 64
     b94:	8b 87       	std	Y+11, r24	; 0x0b
     b96:	9c 87       	std	Y+12, r25	; 0x0c
     b98:	ad 87       	std	Y+13, r26	; 0x0d
     b9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     ba0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ba2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	4a ef       	ldi	r20, 0xFA	; 250
     baa:	54 e4       	ldi	r21, 0x44	; 68
     bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb0:	dc 01       	movw	r26, r24
     bb2:	cb 01       	movw	r24, r22
     bb4:	8f 83       	std	Y+7, r24	; 0x07
     bb6:	98 87       	std	Y+8, r25	; 0x08
     bb8:	a9 87       	std	Y+9, r26	; 0x09
     bba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bbc:	6f 81       	ldd	r22, Y+7	; 0x07
     bbe:	78 85       	ldd	r23, Y+8	; 0x08
     bc0:	89 85       	ldd	r24, Y+9	; 0x09
     bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e8       	ldi	r20, 0x80	; 128
     bca:	5f e3       	ldi	r21, 0x3F	; 63
     bcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd0:	88 23       	and	r24, r24
     bd2:	2c f4       	brge	.+10     	; 0xbde <HLCD_vSendCommand+0x98>
		__ticks = 1;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	9e 83       	std	Y+6, r25	; 0x06
     bda:	8d 83       	std	Y+5, r24	; 0x05
     bdc:	3f c0       	rjmp	.+126    	; 0xc5c <HLCD_vSendCommand+0x116>
	else if (__tmp > 65535)
     bde:	6f 81       	ldd	r22, Y+7	; 0x07
     be0:	78 85       	ldd	r23, Y+8	; 0x08
     be2:	89 85       	ldd	r24, Y+9	; 0x09
     be4:	9a 85       	ldd	r25, Y+10	; 0x0a
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	3f ef       	ldi	r19, 0xFF	; 255
     bea:	4f e7       	ldi	r20, 0x7F	; 127
     bec:	57 e4       	ldi	r21, 0x47	; 71
     bee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf2:	18 16       	cp	r1, r24
     bf4:	4c f5       	brge	.+82     	; 0xc48 <HLCD_vSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf6:	6b 85       	ldd	r22, Y+11	; 0x0b
     bf8:	7c 85       	ldd	r23, Y+12	; 0x0c
     bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bfc:	9e 85       	ldd	r25, Y+14	; 0x0e
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e2       	ldi	r20, 0x20	; 32
     c04:	51 e4       	ldi	r21, 0x41	; 65
     c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	bc 01       	movw	r22, r24
     c10:	cd 01       	movw	r24, r26
     c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	9e 83       	std	Y+6, r25	; 0x06
     c1c:	8d 83       	std	Y+5, r24	; 0x05
     c1e:	0f c0       	rjmp	.+30     	; 0xc3e <HLCD_vSendCommand+0xf8>
     c20:	88 ec       	ldi	r24, 0xC8	; 200
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	9c 83       	std	Y+4, r25	; 0x04
     c26:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	9c 81       	ldd	r25, Y+4	; 0x04
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <HLCD_vSendCommand+0xe6>
     c30:	9c 83       	std	Y+4, r25	; 0x04
     c32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	9e 83       	std	Y+6, r25	; 0x06
     c3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c3e:	8d 81       	ldd	r24, Y+5	; 0x05
     c40:	9e 81       	ldd	r25, Y+6	; 0x06
     c42:	00 97       	sbiw	r24, 0x00	; 0
     c44:	69 f7       	brne	.-38     	; 0xc20 <HLCD_vSendCommand+0xda>
     c46:	14 c0       	rjmp	.+40     	; 0xc70 <HLCD_vSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c48:	6f 81       	ldd	r22, Y+7	; 0x07
     c4a:	78 85       	ldd	r23, Y+8	; 0x08
     c4c:	89 85       	ldd	r24, Y+9	; 0x09
     c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	9e 83       	std	Y+6, r25	; 0x06
     c5a:	8d 83       	std	Y+5, r24	; 0x05
     c5c:	8d 81       	ldd	r24, Y+5	; 0x05
     c5e:	9e 81       	ldd	r25, Y+6	; 0x06
     c60:	9a 83       	std	Y+2, r25	; 0x02
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	9a 81       	ldd	r25, Y+2	; 0x02
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	f1 f7       	brne	.-4      	; 0xc68 <HLCD_vSendCommand+0x122>
     c6c:	9a 83       	std	Y+2, r25	; 0x02
     c6e:	89 83       	std	Y+1, r24	; 0x01

	/*wait 5ms*/
	_delay_ms(5);
	/*set E pin*/
	MDIO_vSetPinValue(CTR_PORT,LCD_E,DIO_HIGH);
     c70:	82 e0       	ldi	r24, 0x02	; 2
     c72:	62 e0       	ldi	r22, 0x02	; 2
     c74:	41 e0       	ldi	r20, 0x01	; 1
     c76:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinValue>

}
     c7a:	2f 96       	adiw	r28, 0x0f	; 15
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <HLCD_vInitLcd>:

void HLCD_vInitLcd(void)
{
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	c4 55       	subi	r28, 0x54	; 84
     c9a:	d0 40       	sbci	r29, 0x00	; 0
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
	/*set config of lcd pins*/
	MDIO_vSetPinDirection(CTR_PORT,	LCD_RS,	DIO_OUTPUT);
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(CTR_PORT,	LCD_RW,	DIO_OUTPUT);
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(CTR_PORT,	LCD_E,	DIO_OUTPUT);
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	62 e0       	ldi	r22, 0x02	; 2
     cbe:	41 e0       	ldi	r20, 0x01	; 1
     cc0:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <MDIO_vSetPinDirection>
	MDIO_vSetPortDirection(DATA_PORT,0xff);
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	0e 94 90 0c 	call	0x1920	; 0x1920 <MDIO_vSetPortDirection>
     ccc:	fe 01       	movw	r30, r28
     cce:	ef 5a       	subi	r30, 0xAF	; 175
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e2       	ldi	r26, 0x20	; 32
     cd8:	b2 e4       	ldi	r27, 0x42	; 66
     cda:	80 83       	st	Z, r24
     cdc:	91 83       	std	Z+1, r25	; 0x01
     cde:	a2 83       	std	Z+2, r26	; 0x02
     ce0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce2:	8e 01       	movw	r16, r28
     ce4:	03 5b       	subi	r16, 0xB3	; 179
     ce6:	1f 4f       	sbci	r17, 0xFF	; 255
     ce8:	fe 01       	movw	r30, r28
     cea:	ef 5a       	subi	r30, 0xAF	; 175
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	60 81       	ld	r22, Z
     cf0:	71 81       	ldd	r23, Z+1	; 0x01
     cf2:	82 81       	ldd	r24, Z+2	; 0x02
     cf4:	93 81       	ldd	r25, Z+3	; 0x03
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	4a ef       	ldi	r20, 0xFA	; 250
     cfc:	54 e4       	ldi	r21, 0x44	; 68
     cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	f8 01       	movw	r30, r16
     d08:	80 83       	st	Z, r24
     d0a:	91 83       	std	Z+1, r25	; 0x01
     d0c:	a2 83       	std	Z+2, r26	; 0x02
     d0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d10:	fe 01       	movw	r30, r28
     d12:	e3 5b       	subi	r30, 0xB3	; 179
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	60 81       	ld	r22, Z
     d18:	71 81       	ldd	r23, Z+1	; 0x01
     d1a:	82 81       	ldd	r24, Z+2	; 0x02
     d1c:	93 81       	ldd	r25, Z+3	; 0x03
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	40 e8       	ldi	r20, 0x80	; 128
     d24:	5f e3       	ldi	r21, 0x3F	; 63
     d26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d2a:	88 23       	and	r24, r24
     d2c:	44 f4       	brge	.+16     	; 0xd3e <HLCD_vInitLcd+0xb2>
		__ticks = 1;
     d2e:	fe 01       	movw	r30, r28
     d30:	e5 5b       	subi	r30, 0xB5	; 181
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	91 83       	std	Z+1, r25	; 0x01
     d3a:	80 83       	st	Z, r24
     d3c:	64 c0       	rjmp	.+200    	; 0xe06 <HLCD_vInitLcd+0x17a>
	else if (__tmp > 65535)
     d3e:	fe 01       	movw	r30, r28
     d40:	e3 5b       	subi	r30, 0xB3	; 179
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	60 81       	ld	r22, Z
     d46:	71 81       	ldd	r23, Z+1	; 0x01
     d48:	82 81       	ldd	r24, Z+2	; 0x02
     d4a:	93 81       	ldd	r25, Z+3	; 0x03
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	3f ef       	ldi	r19, 0xFF	; 255
     d50:	4f e7       	ldi	r20, 0x7F	; 127
     d52:	57 e4       	ldi	r21, 0x47	; 71
     d54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d58:	18 16       	cp	r1, r24
     d5a:	0c f0       	brlt	.+2      	; 0xd5e <HLCD_vInitLcd+0xd2>
     d5c:	43 c0       	rjmp	.+134    	; 0xde4 <HLCD_vInitLcd+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d5e:	fe 01       	movw	r30, r28
     d60:	ef 5a       	subi	r30, 0xAF	; 175
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	93 81       	ldd	r25, Z+3	; 0x03
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e2       	ldi	r20, 0x20	; 32
     d72:	51 e4       	ldi	r21, 0x41	; 65
     d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	8e 01       	movw	r16, r28
     d7e:	05 5b       	subi	r16, 0xB5	; 181
     d80:	1f 4f       	sbci	r17, 0xFF	; 255
     d82:	bc 01       	movw	r22, r24
     d84:	cd 01       	movw	r24, r26
     d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	f8 01       	movw	r30, r16
     d90:	91 83       	std	Z+1, r25	; 0x01
     d92:	80 83       	st	Z, r24
     d94:	1f c0       	rjmp	.+62     	; 0xdd4 <HLCD_vInitLcd+0x148>
     d96:	fe 01       	movw	r30, r28
     d98:	e7 5b       	subi	r30, 0xB7	; 183
     d9a:	ff 4f       	sbci	r31, 0xFF	; 255
     d9c:	88 ec       	ldi	r24, 0xC8	; 200
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	91 83       	std	Z+1, r25	; 0x01
     da2:	80 83       	st	Z, r24
     da4:	fe 01       	movw	r30, r28
     da6:	e7 5b       	subi	r30, 0xB7	; 183
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	80 81       	ld	r24, Z
     dac:	91 81       	ldd	r25, Z+1	; 0x01
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	f1 f7       	brne	.-4      	; 0xdae <HLCD_vInitLcd+0x122>
     db2:	fe 01       	movw	r30, r28
     db4:	e7 5b       	subi	r30, 0xB7	; 183
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	91 83       	std	Z+1, r25	; 0x01
     dba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbc:	de 01       	movw	r26, r28
     dbe:	a5 5b       	subi	r26, 0xB5	; 181
     dc0:	bf 4f       	sbci	r27, 0xFF	; 255
     dc2:	fe 01       	movw	r30, r28
     dc4:	e5 5b       	subi	r30, 0xB5	; 181
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	80 81       	ld	r24, Z
     dca:	91 81       	ldd	r25, Z+1	; 0x01
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	11 96       	adiw	r26, 0x01	; 1
     dd0:	9c 93       	st	X, r25
     dd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd4:	fe 01       	movw	r30, r28
     dd6:	e5 5b       	subi	r30, 0xB5	; 181
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	d1 f6       	brne	.-76     	; 0xd96 <HLCD_vInitLcd+0x10a>
     de2:	27 c0       	rjmp	.+78     	; 0xe32 <HLCD_vInitLcd+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de4:	8e 01       	movw	r16, r28
     de6:	05 5b       	subi	r16, 0xB5	; 181
     de8:	1f 4f       	sbci	r17, 0xFF	; 255
     dea:	fe 01       	movw	r30, r28
     dec:	e3 5b       	subi	r30, 0xB3	; 179
     dee:	ff 4f       	sbci	r31, 0xFF	; 255
     df0:	60 81       	ld	r22, Z
     df2:	71 81       	ldd	r23, Z+1	; 0x01
     df4:	82 81       	ldd	r24, Z+2	; 0x02
     df6:	93 81       	ldd	r25, Z+3	; 0x03
     df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	f8 01       	movw	r30, r16
     e02:	91 83       	std	Z+1, r25	; 0x01
     e04:	80 83       	st	Z, r24
     e06:	de 01       	movw	r26, r28
     e08:	a9 5b       	subi	r26, 0xB9	; 185
     e0a:	bf 4f       	sbci	r27, 0xFF	; 255
     e0c:	fe 01       	movw	r30, r28
     e0e:	e5 5b       	subi	r30, 0xB5	; 181
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	8d 93       	st	X+, r24
     e18:	9c 93       	st	X, r25
     e1a:	fe 01       	movw	r30, r28
     e1c:	e9 5b       	subi	r30, 0xB9	; 185
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	80 81       	ld	r24, Z
     e22:	91 81       	ldd	r25, Z+1	; 0x01
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <HLCD_vInitLcd+0x198>
     e28:	fe 01       	movw	r30, r28
     e2a:	e9 5b       	subi	r30, 0xB9	; 185
     e2c:	ff 4f       	sbci	r31, 0xFF	; 255
     e2e:	91 83       	std	Z+1, r25	; 0x01
     e30:	80 83       	st	Z, r24

	/*wait for more than 30ms*/
	_delay_ms(40);
	HLCD_vSendCommand(lcd_Home);
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_vSendCommand>
     e38:	fe 01       	movw	r30, r28
     e3a:	ed 5b       	subi	r30, 0xBD	; 189
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	a0 e7       	ldi	r26, 0x70	; 112
     e44:	b1 e4       	ldi	r27, 0x41	; 65
     e46:	80 83       	st	Z, r24
     e48:	91 83       	std	Z+1, r25	; 0x01
     e4a:	a2 83       	std	Z+2, r26	; 0x02
     e4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e4e:	8e 01       	movw	r16, r28
     e50:	01 5c       	subi	r16, 0xC1	; 193
     e52:	1f 4f       	sbci	r17, 0xFF	; 255
     e54:	fe 01       	movw	r30, r28
     e56:	ed 5b       	subi	r30, 0xBD	; 189
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	60 81       	ld	r22, Z
     e5c:	71 81       	ldd	r23, Z+1	; 0x01
     e5e:	82 81       	ldd	r24, Z+2	; 0x02
     e60:	93 81       	ldd	r25, Z+3	; 0x03
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	4a ef       	ldi	r20, 0xFA	; 250
     e68:	54 e4       	ldi	r21, 0x44	; 68
     e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	f8 01       	movw	r30, r16
     e74:	80 83       	st	Z, r24
     e76:	91 83       	std	Z+1, r25	; 0x01
     e78:	a2 83       	std	Z+2, r26	; 0x02
     e7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e7c:	fe 01       	movw	r30, r28
     e7e:	ff 96       	adiw	r30, 0x3f	; 63
     e80:	60 81       	ld	r22, Z
     e82:	71 81       	ldd	r23, Z+1	; 0x01
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e8       	ldi	r20, 0x80	; 128
     e8e:	5f e3       	ldi	r21, 0x3F	; 63
     e90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e94:	88 23       	and	r24, r24
     e96:	2c f4       	brge	.+10     	; 0xea2 <HLCD_vInitLcd+0x216>
		__ticks = 1;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9e af       	std	Y+62, r25	; 0x3e
     e9e:	8d af       	std	Y+61, r24	; 0x3d
     ea0:	46 c0       	rjmp	.+140    	; 0xf2e <HLCD_vInitLcd+0x2a2>
	else if (__tmp > 65535)
     ea2:	fe 01       	movw	r30, r28
     ea4:	ff 96       	adiw	r30, 0x3f	; 63
     ea6:	60 81       	ld	r22, Z
     ea8:	71 81       	ldd	r23, Z+1	; 0x01
     eaa:	82 81       	ldd	r24, Z+2	; 0x02
     eac:	93 81       	ldd	r25, Z+3	; 0x03
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	3f ef       	ldi	r19, 0xFF	; 255
     eb2:	4f e7       	ldi	r20, 0x7F	; 127
     eb4:	57 e4       	ldi	r21, 0x47	; 71
     eb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eba:	18 16       	cp	r1, r24
     ebc:	64 f5       	brge	.+88     	; 0xf16 <HLCD_vInitLcd+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ebe:	fe 01       	movw	r30, r28
     ec0:	ed 5b       	subi	r30, 0xBD	; 189
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	60 81       	ld	r22, Z
     ec6:	71 81       	ldd	r23, Z+1	; 0x01
     ec8:	82 81       	ldd	r24, Z+2	; 0x02
     eca:	93 81       	ldd	r25, Z+3	; 0x03
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e2       	ldi	r20, 0x20	; 32
     ed2:	51 e4       	ldi	r21, 0x41	; 65
     ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	bc 01       	movw	r22, r24
     ede:	cd 01       	movw	r24, r26
     ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	9e af       	std	Y+62, r25	; 0x3e
     eea:	8d af       	std	Y+61, r24	; 0x3d
     eec:	0f c0       	rjmp	.+30     	; 0xf0c <HLCD_vInitLcd+0x280>
     eee:	88 ec       	ldi	r24, 0xC8	; 200
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	9c af       	std	Y+60, r25	; 0x3c
     ef4:	8b af       	std	Y+59, r24	; 0x3b
     ef6:	8b ad       	ldd	r24, Y+59	; 0x3b
     ef8:	9c ad       	ldd	r25, Y+60	; 0x3c
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <HLCD_vInitLcd+0x26e>
     efe:	9c af       	std	Y+60, r25	; 0x3c
     f00:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f02:	8d ad       	ldd	r24, Y+61	; 0x3d
     f04:	9e ad       	ldd	r25, Y+62	; 0x3e
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	9e af       	std	Y+62, r25	; 0x3e
     f0a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0c:	8d ad       	ldd	r24, Y+61	; 0x3d
     f0e:	9e ad       	ldd	r25, Y+62	; 0x3e
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	69 f7       	brne	.-38     	; 0xeee <HLCD_vInitLcd+0x262>
     f14:	16 c0       	rjmp	.+44     	; 0xf42 <HLCD_vInitLcd+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f16:	fe 01       	movw	r30, r28
     f18:	ff 96       	adiw	r30, 0x3f	; 63
     f1a:	60 81       	ld	r22, Z
     f1c:	71 81       	ldd	r23, Z+1	; 0x01
     f1e:	82 81       	ldd	r24, Z+2	; 0x02
     f20:	93 81       	ldd	r25, Z+3	; 0x03
     f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	9e af       	std	Y+62, r25	; 0x3e
     f2c:	8d af       	std	Y+61, r24	; 0x3d
     f2e:	8d ad       	ldd	r24, Y+61	; 0x3d
     f30:	9e ad       	ldd	r25, Y+62	; 0x3e
     f32:	9a af       	std	Y+58, r25	; 0x3a
     f34:	89 af       	std	Y+57, r24	; 0x39
     f36:	89 ad       	ldd	r24, Y+57	; 0x39
     f38:	9a ad       	ldd	r25, Y+58	; 0x3a
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <HLCD_vInitLcd+0x2ae>
     f3e:	9a af       	std	Y+58, r25	; 0x3a
     f40:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);
	/*send function set command */
	HLCD_vSendCommand(Func_set);
     f42:	88 e3       	ldi	r24, 0x38	; 56
     f44:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_vSendCommand>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	a0 e8       	ldi	r26, 0x80	; 128
     f4e:	bf e3       	ldi	r27, 0x3F	; 63
     f50:	8d ab       	std	Y+53, r24	; 0x35
     f52:	9e ab       	std	Y+54, r25	; 0x36
     f54:	af ab       	std	Y+55, r26	; 0x37
     f56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f58:	6d a9       	ldd	r22, Y+53	; 0x35
     f5a:	7e a9       	ldd	r23, Y+54	; 0x36
     f5c:	8f a9       	ldd	r24, Y+55	; 0x37
     f5e:	98 ad       	ldd	r25, Y+56	; 0x38
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	4a ef       	ldi	r20, 0xFA	; 250
     f66:	54 e4       	ldi	r21, 0x44	; 68
     f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	89 ab       	std	Y+49, r24	; 0x31
     f72:	9a ab       	std	Y+50, r25	; 0x32
     f74:	ab ab       	std	Y+51, r26	; 0x33
     f76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f78:	69 a9       	ldd	r22, Y+49	; 0x31
     f7a:	7a a9       	ldd	r23, Y+50	; 0x32
     f7c:	8b a9       	ldd	r24, Y+51	; 0x33
     f7e:	9c a9       	ldd	r25, Y+52	; 0x34
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e8       	ldi	r20, 0x80	; 128
     f86:	5f e3       	ldi	r21, 0x3F	; 63
     f88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f8c:	88 23       	and	r24, r24
     f8e:	2c f4       	brge	.+10     	; 0xf9a <HLCD_vInitLcd+0x30e>
		__ticks = 1;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	98 ab       	std	Y+48, r25	; 0x30
     f96:	8f a7       	std	Y+47, r24	; 0x2f
     f98:	3f c0       	rjmp	.+126    	; 0x1018 <HLCD_vInitLcd+0x38c>
	else if (__tmp > 65535)
     f9a:	69 a9       	ldd	r22, Y+49	; 0x31
     f9c:	7a a9       	ldd	r23, Y+50	; 0x32
     f9e:	8b a9       	ldd	r24, Y+51	; 0x33
     fa0:	9c a9       	ldd	r25, Y+52	; 0x34
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	3f ef       	ldi	r19, 0xFF	; 255
     fa6:	4f e7       	ldi	r20, 0x7F	; 127
     fa8:	57 e4       	ldi	r21, 0x47	; 71
     faa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fae:	18 16       	cp	r1, r24
     fb0:	4c f5       	brge	.+82     	; 0x1004 <HLCD_vInitLcd+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb2:	6d a9       	ldd	r22, Y+53	; 0x35
     fb4:	7e a9       	ldd	r23, Y+54	; 0x36
     fb6:	8f a9       	ldd	r24, Y+55	; 0x37
     fb8:	98 ad       	ldd	r25, Y+56	; 0x38
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e2       	ldi	r20, 0x20	; 32
     fc0:	51 e4       	ldi	r21, 0x41	; 65
     fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	bc 01       	movw	r22, r24
     fcc:	cd 01       	movw	r24, r26
     fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	98 ab       	std	Y+48, r25	; 0x30
     fd8:	8f a7       	std	Y+47, r24	; 0x2f
     fda:	0f c0       	rjmp	.+30     	; 0xffa <HLCD_vInitLcd+0x36e>
     fdc:	88 ec       	ldi	r24, 0xC8	; 200
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	9e a7       	std	Y+46, r25	; 0x2e
     fe2:	8d a7       	std	Y+45, r24	; 0x2d
     fe4:	8d a5       	ldd	r24, Y+45	; 0x2d
     fe6:	9e a5       	ldd	r25, Y+46	; 0x2e
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <HLCD_vInitLcd+0x35c>
     fec:	9e a7       	std	Y+46, r25	; 0x2e
     fee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff0:	8f a5       	ldd	r24, Y+47	; 0x2f
     ff2:	98 a9       	ldd	r25, Y+48	; 0x30
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	98 ab       	std	Y+48, r25	; 0x30
     ff8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffa:	8f a5       	ldd	r24, Y+47	; 0x2f
     ffc:	98 a9       	ldd	r25, Y+48	; 0x30
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	69 f7       	brne	.-38     	; 0xfdc <HLCD_vInitLcd+0x350>
    1002:	14 c0       	rjmp	.+40     	; 0x102c <HLCD_vInitLcd+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1004:	69 a9       	ldd	r22, Y+49	; 0x31
    1006:	7a a9       	ldd	r23, Y+50	; 0x32
    1008:	8b a9       	ldd	r24, Y+51	; 0x33
    100a:	9c a9       	ldd	r25, Y+52	; 0x34
    100c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	98 ab       	std	Y+48, r25	; 0x30
    1016:	8f a7       	std	Y+47, r24	; 0x2f
    1018:	8f a5       	ldd	r24, Y+47	; 0x2f
    101a:	98 a9       	ldd	r25, Y+48	; 0x30
    101c:	9c a7       	std	Y+44, r25	; 0x2c
    101e:	8b a7       	std	Y+43, r24	; 0x2b
    1020:	8b a5       	ldd	r24, Y+43	; 0x2b
    1022:	9c a5       	ldd	r25, Y+44	; 0x2c
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <HLCD_vInitLcd+0x398>
    1028:	9c a7       	std	Y+44, r25	; 0x2c
    102a:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait 39 us*/
	_delay_ms(1);
	/*send display on/off command*/
	HLCD_vSendCommand(Display_On_Off);
    102c:	8f e0       	ldi	r24, 0x0F	; 15
    102e:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_vSendCommand>
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	a0 e8       	ldi	r26, 0x80	; 128
    1038:	bf e3       	ldi	r27, 0x3F	; 63
    103a:	8f a3       	std	Y+39, r24	; 0x27
    103c:	98 a7       	std	Y+40, r25	; 0x28
    103e:	a9 a7       	std	Y+41, r26	; 0x29
    1040:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1042:	6f a1       	ldd	r22, Y+39	; 0x27
    1044:	78 a5       	ldd	r23, Y+40	; 0x28
    1046:	89 a5       	ldd	r24, Y+41	; 0x29
    1048:	9a a5       	ldd	r25, Y+42	; 0x2a
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	4a ef       	ldi	r20, 0xFA	; 250
    1050:	54 e4       	ldi	r21, 0x44	; 68
    1052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	8b a3       	std	Y+35, r24	; 0x23
    105c:	9c a3       	std	Y+36, r25	; 0x24
    105e:	ad a3       	std	Y+37, r26	; 0x25
    1060:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1062:	6b a1       	ldd	r22, Y+35	; 0x23
    1064:	7c a1       	ldd	r23, Y+36	; 0x24
    1066:	8d a1       	ldd	r24, Y+37	; 0x25
    1068:	9e a1       	ldd	r25, Y+38	; 0x26
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e8       	ldi	r20, 0x80	; 128
    1070:	5f e3       	ldi	r21, 0x3F	; 63
    1072:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1076:	88 23       	and	r24, r24
    1078:	2c f4       	brge	.+10     	; 0x1084 <HLCD_vInitLcd+0x3f8>
		__ticks = 1;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	9a a3       	std	Y+34, r25	; 0x22
    1080:	89 a3       	std	Y+33, r24	; 0x21
    1082:	3f c0       	rjmp	.+126    	; 0x1102 <HLCD_vInitLcd+0x476>
	else if (__tmp > 65535)
    1084:	6b a1       	ldd	r22, Y+35	; 0x23
    1086:	7c a1       	ldd	r23, Y+36	; 0x24
    1088:	8d a1       	ldd	r24, Y+37	; 0x25
    108a:	9e a1       	ldd	r25, Y+38	; 0x26
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	3f ef       	ldi	r19, 0xFF	; 255
    1090:	4f e7       	ldi	r20, 0x7F	; 127
    1092:	57 e4       	ldi	r21, 0x47	; 71
    1094:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1098:	18 16       	cp	r1, r24
    109a:	4c f5       	brge	.+82     	; 0x10ee <HLCD_vInitLcd+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109c:	6f a1       	ldd	r22, Y+39	; 0x27
    109e:	78 a5       	ldd	r23, Y+40	; 0x28
    10a0:	89 a5       	ldd	r24, Y+41	; 0x29
    10a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e2       	ldi	r20, 0x20	; 32
    10aa:	51 e4       	ldi	r21, 0x41	; 65
    10ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	bc 01       	movw	r22, r24
    10b6:	cd 01       	movw	r24, r26
    10b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	9a a3       	std	Y+34, r25	; 0x22
    10c2:	89 a3       	std	Y+33, r24	; 0x21
    10c4:	0f c0       	rjmp	.+30     	; 0x10e4 <HLCD_vInitLcd+0x458>
    10c6:	88 ec       	ldi	r24, 0xC8	; 200
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	98 a3       	std	Y+32, r25	; 0x20
    10cc:	8f 8f       	std	Y+31, r24	; 0x1f
    10ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10d0:	98 a1       	ldd	r25, Y+32	; 0x20
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <HLCD_vInitLcd+0x446>
    10d6:	98 a3       	std	Y+32, r25	; 0x20
    10d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10da:	89 a1       	ldd	r24, Y+33	; 0x21
    10dc:	9a a1       	ldd	r25, Y+34	; 0x22
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	9a a3       	std	Y+34, r25	; 0x22
    10e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e4:	89 a1       	ldd	r24, Y+33	; 0x21
    10e6:	9a a1       	ldd	r25, Y+34	; 0x22
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	69 f7       	brne	.-38     	; 0x10c6 <HLCD_vInitLcd+0x43a>
    10ec:	14 c0       	rjmp	.+40     	; 0x1116 <HLCD_vInitLcd+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ee:	6b a1       	ldd	r22, Y+35	; 0x23
    10f0:	7c a1       	ldd	r23, Y+36	; 0x24
    10f2:	8d a1       	ldd	r24, Y+37	; 0x25
    10f4:	9e a1       	ldd	r25, Y+38	; 0x26
    10f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	9a a3       	std	Y+34, r25	; 0x22
    1100:	89 a3       	std	Y+33, r24	; 0x21
    1102:	89 a1       	ldd	r24, Y+33	; 0x21
    1104:	9a a1       	ldd	r25, Y+34	; 0x22
    1106:	9e 8f       	std	Y+30, r25	; 0x1e
    1108:	8d 8f       	std	Y+29, r24	; 0x1d
    110a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    110c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <HLCD_vInitLcd+0x482>
    1112:	9e 8f       	std	Y+30, r25	; 0x1e
    1114:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait 39 us*/
	_delay_ms(1);
	/*send clear command */
	HLCD_vSendCommand(Clear);
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_vSendCommand>
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a0 e7       	ldi	r26, 0x70	; 112
    1122:	b1 e4       	ldi	r27, 0x41	; 65
    1124:	89 8f       	std	Y+25, r24	; 0x19
    1126:	9a 8f       	std	Y+26, r25	; 0x1a
    1128:	ab 8f       	std	Y+27, r26	; 0x1b
    112a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112c:	69 8d       	ldd	r22, Y+25	; 0x19
    112e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1130:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1132:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	4a ef       	ldi	r20, 0xFA	; 250
    113a:	54 e4       	ldi	r21, 0x44	; 68
    113c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	8d 8b       	std	Y+21, r24	; 0x15
    1146:	9e 8b       	std	Y+22, r25	; 0x16
    1148:	af 8b       	std	Y+23, r26	; 0x17
    114a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    114c:	6d 89       	ldd	r22, Y+21	; 0x15
    114e:	7e 89       	ldd	r23, Y+22	; 0x16
    1150:	8f 89       	ldd	r24, Y+23	; 0x17
    1152:	98 8d       	ldd	r25, Y+24	; 0x18
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e8       	ldi	r20, 0x80	; 128
    115a:	5f e3       	ldi	r21, 0x3F	; 63
    115c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1160:	88 23       	and	r24, r24
    1162:	2c f4       	brge	.+10     	; 0x116e <HLCD_vInitLcd+0x4e2>
		__ticks = 1;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	9c 8b       	std	Y+20, r25	; 0x14
    116a:	8b 8b       	std	Y+19, r24	; 0x13
    116c:	3f c0       	rjmp	.+126    	; 0x11ec <HLCD_vInitLcd+0x560>
	else if (__tmp > 65535)
    116e:	6d 89       	ldd	r22, Y+21	; 0x15
    1170:	7e 89       	ldd	r23, Y+22	; 0x16
    1172:	8f 89       	ldd	r24, Y+23	; 0x17
    1174:	98 8d       	ldd	r25, Y+24	; 0x18
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	3f ef       	ldi	r19, 0xFF	; 255
    117a:	4f e7       	ldi	r20, 0x7F	; 127
    117c:	57 e4       	ldi	r21, 0x47	; 71
    117e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1182:	18 16       	cp	r1, r24
    1184:	4c f5       	brge	.+82     	; 0x11d8 <HLCD_vInitLcd+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1186:	69 8d       	ldd	r22, Y+25	; 0x19
    1188:	7a 8d       	ldd	r23, Y+26	; 0x1a
    118a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    118c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e2       	ldi	r20, 0x20	; 32
    1194:	51 e4       	ldi	r21, 0x41	; 65
    1196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	bc 01       	movw	r22, r24
    11a0:	cd 01       	movw	r24, r26
    11a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	9c 8b       	std	Y+20, r25	; 0x14
    11ac:	8b 8b       	std	Y+19, r24	; 0x13
    11ae:	0f c0       	rjmp	.+30     	; 0x11ce <HLCD_vInitLcd+0x542>
    11b0:	88 ec       	ldi	r24, 0xC8	; 200
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9a 8b       	std	Y+18, r25	; 0x12
    11b6:	89 8b       	std	Y+17, r24	; 0x11
    11b8:	89 89       	ldd	r24, Y+17	; 0x11
    11ba:	9a 89       	ldd	r25, Y+18	; 0x12
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <HLCD_vInitLcd+0x530>
    11c0:	9a 8b       	std	Y+18, r25	; 0x12
    11c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c4:	8b 89       	ldd	r24, Y+19	; 0x13
    11c6:	9c 89       	ldd	r25, Y+20	; 0x14
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	9c 8b       	std	Y+20, r25	; 0x14
    11cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ce:	8b 89       	ldd	r24, Y+19	; 0x13
    11d0:	9c 89       	ldd	r25, Y+20	; 0x14
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	69 f7       	brne	.-38     	; 0x11b0 <HLCD_vInitLcd+0x524>
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <HLCD_vInitLcd+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d8:	6d 89       	ldd	r22, Y+21	; 0x15
    11da:	7e 89       	ldd	r23, Y+22	; 0x16
    11dc:	8f 89       	ldd	r24, Y+23	; 0x17
    11de:	98 8d       	ldd	r25, Y+24	; 0x18
    11e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	9c 8b       	std	Y+20, r25	; 0x14
    11ea:	8b 8b       	std	Y+19, r24	; 0x13
    11ec:	8b 89       	ldd	r24, Y+19	; 0x13
    11ee:	9c 89       	ldd	r25, Y+20	; 0x14
    11f0:	98 8b       	std	Y+16, r25	; 0x10
    11f2:	8f 87       	std	Y+15, r24	; 0x0f
    11f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f6:	98 89       	ldd	r25, Y+16	; 0x10
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <HLCD_vInitLcd+0x56c>
    11fc:	98 8b       	std	Y+16, r25	; 0x10
    11fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);
	/*send entrymode command*/
	HLCD_vSendCommand(Entry_mode);
    1200:	86 e0       	ldi	r24, 0x06	; 6
    1202:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_vSendCommand>
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a0 e0       	ldi	r26, 0x00	; 0
    120c:	b0 e4       	ldi	r27, 0x40	; 64
    120e:	8b 87       	std	Y+11, r24	; 0x0b
    1210:	9c 87       	std	Y+12, r25	; 0x0c
    1212:	ad 87       	std	Y+13, r26	; 0x0d
    1214:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1216:	6b 85       	ldd	r22, Y+11	; 0x0b
    1218:	7c 85       	ldd	r23, Y+12	; 0x0c
    121a:	8d 85       	ldd	r24, Y+13	; 0x0d
    121c:	9e 85       	ldd	r25, Y+14	; 0x0e
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	4a ef       	ldi	r20, 0xFA	; 250
    1224:	54 e4       	ldi	r21, 0x44	; 68
    1226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	8f 83       	std	Y+7, r24	; 0x07
    1230:	98 87       	std	Y+8, r25	; 0x08
    1232:	a9 87       	std	Y+9, r26	; 0x09
    1234:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1236:	6f 81       	ldd	r22, Y+7	; 0x07
    1238:	78 85       	ldd	r23, Y+8	; 0x08
    123a:	89 85       	ldd	r24, Y+9	; 0x09
    123c:	9a 85       	ldd	r25, Y+10	; 0x0a
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	40 e8       	ldi	r20, 0x80	; 128
    1244:	5f e3       	ldi	r21, 0x3F	; 63
    1246:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    124a:	88 23       	and	r24, r24
    124c:	2c f4       	brge	.+10     	; 0x1258 <HLCD_vInitLcd+0x5cc>
		__ticks = 1;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	9e 83       	std	Y+6, r25	; 0x06
    1254:	8d 83       	std	Y+5, r24	; 0x05
    1256:	3f c0       	rjmp	.+126    	; 0x12d6 <HLCD_vInitLcd+0x64a>
	else if (__tmp > 65535)
    1258:	6f 81       	ldd	r22, Y+7	; 0x07
    125a:	78 85       	ldd	r23, Y+8	; 0x08
    125c:	89 85       	ldd	r24, Y+9	; 0x09
    125e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	3f ef       	ldi	r19, 0xFF	; 255
    1264:	4f e7       	ldi	r20, 0x7F	; 127
    1266:	57 e4       	ldi	r21, 0x47	; 71
    1268:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    126c:	18 16       	cp	r1, r24
    126e:	4c f5       	brge	.+82     	; 0x12c2 <HLCD_vInitLcd+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1270:	6b 85       	ldd	r22, Y+11	; 0x0b
    1272:	7c 85       	ldd	r23, Y+12	; 0x0c
    1274:	8d 85       	ldd	r24, Y+13	; 0x0d
    1276:	9e 85       	ldd	r25, Y+14	; 0x0e
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e2       	ldi	r20, 0x20	; 32
    127e:	51 e4       	ldi	r21, 0x41	; 65
    1280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	bc 01       	movw	r22, r24
    128a:	cd 01       	movw	r24, r26
    128c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	9e 83       	std	Y+6, r25	; 0x06
    1296:	8d 83       	std	Y+5, r24	; 0x05
    1298:	0f c0       	rjmp	.+30     	; 0x12b8 <HLCD_vInitLcd+0x62c>
    129a:	88 ec       	ldi	r24, 0xC8	; 200
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	9c 83       	std	Y+4, r25	; 0x04
    12a0:	8b 83       	std	Y+3, r24	; 0x03
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	f1 f7       	brne	.-4      	; 0x12a6 <HLCD_vInitLcd+0x61a>
    12aa:	9c 83       	std	Y+4, r25	; 0x04
    12ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ae:	8d 81       	ldd	r24, Y+5	; 0x05
    12b0:	9e 81       	ldd	r25, Y+6	; 0x06
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	9e 83       	std	Y+6, r25	; 0x06
    12b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	69 f7       	brne	.-38     	; 0x129a <HLCD_vInitLcd+0x60e>
    12c0:	14 c0       	rjmp	.+40     	; 0x12ea <HLCD_vInitLcd+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c2:	6f 81       	ldd	r22, Y+7	; 0x07
    12c4:	78 85       	ldd	r23, Y+8	; 0x08
    12c6:	89 85       	ldd	r24, Y+9	; 0x09
    12c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	9e 83       	std	Y+6, r25	; 0x06
    12d4:	8d 83       	std	Y+5, r24	; 0x05
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	9a 83       	std	Y+2, r25	; 0x02
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	9a 81       	ldd	r25, Y+2	; 0x02
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <HLCD_vInitLcd+0x656>
    12e6:	9a 83       	std	Y+2, r25	; 0x02
    12e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    12ea:	cc 5a       	subi	r28, 0xAC	; 172
    12ec:	df 4f       	sbci	r29, 0xFF	; 255
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	08 95       	ret

00001302 <HLCD_vSendChar>:



void HLCD_vSendChar( u8 copy_u8Char){
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	2f 97       	sbiw	r28, 0x0f	; 15
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	8f 87       	std	Y+15, r24	; 0x0f
	/*set rs pin to 1 set rs*/
	MDIO_vSetPinValue(CTR_PORT, LCD_RS, DIO_HIGH);
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	41 e0       	ldi	r20, 0x01	; 1
    131e:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinValue>
	/*clr rw */
	MDIO_vSetPinValue(CTR_PORT, LCD_RW, DIO_LOW);
    1322:	82 e0       	ldi	r24, 0x02	; 2
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinValue>

	/*set E pin*/
	MDIO_vSetPinValue(CTR_PORT, LCD_E, DIO_HIGH);
    132c:	82 e0       	ldi	r24, 0x02	; 2
    132e:	62 e0       	ldi	r22, 0x02	; 2
    1330:	41 e0       	ldi	r20, 0x01	; 1
    1332:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinValue>

	/*send command */
	MDIO_vSetPortValue(DATA_PORT, copy_u8Char);
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	6f 85       	ldd	r22, Y+15	; 0x0f
    133a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <MDIO_vSetPortValue>

	/*clr E*/
	MDIO_vSetPinValue(CTR_PORT, LCD_E, DIO_LOW);
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	62 e0       	ldi	r22, 0x02	; 2
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinValue>
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a0 ea       	ldi	r26, 0xA0	; 160
    134e:	b0 e4       	ldi	r27, 0x40	; 64
    1350:	8b 87       	std	Y+11, r24	; 0x0b
    1352:	9c 87       	std	Y+12, r25	; 0x0c
    1354:	ad 87       	std	Y+13, r26	; 0x0d
    1356:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1358:	6b 85       	ldd	r22, Y+11	; 0x0b
    135a:	7c 85       	ldd	r23, Y+12	; 0x0c
    135c:	8d 85       	ldd	r24, Y+13	; 0x0d
    135e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	4a ef       	ldi	r20, 0xFA	; 250
    1366:	54 e4       	ldi	r21, 0x44	; 68
    1368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	8f 83       	std	Y+7, r24	; 0x07
    1372:	98 87       	std	Y+8, r25	; 0x08
    1374:	a9 87       	std	Y+9, r26	; 0x09
    1376:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1378:	6f 81       	ldd	r22, Y+7	; 0x07
    137a:	78 85       	ldd	r23, Y+8	; 0x08
    137c:	89 85       	ldd	r24, Y+9	; 0x09
    137e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e8       	ldi	r20, 0x80	; 128
    1386:	5f e3       	ldi	r21, 0x3F	; 63
    1388:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    138c:	88 23       	and	r24, r24
    138e:	2c f4       	brge	.+10     	; 0x139a <HLCD_vSendChar+0x98>
		__ticks = 1;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	9e 83       	std	Y+6, r25	; 0x06
    1396:	8d 83       	std	Y+5, r24	; 0x05
    1398:	3f c0       	rjmp	.+126    	; 0x1418 <HLCD_vSendChar+0x116>
	else if (__tmp > 65535)
    139a:	6f 81       	ldd	r22, Y+7	; 0x07
    139c:	78 85       	ldd	r23, Y+8	; 0x08
    139e:	89 85       	ldd	r24, Y+9	; 0x09
    13a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	3f ef       	ldi	r19, 0xFF	; 255
    13a6:	4f e7       	ldi	r20, 0x7F	; 127
    13a8:	57 e4       	ldi	r21, 0x47	; 71
    13aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ae:	18 16       	cp	r1, r24
    13b0:	4c f5       	brge	.+82     	; 0x1404 <HLCD_vSendChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e2       	ldi	r20, 0x20	; 32
    13c0:	51 e4       	ldi	r21, 0x41	; 65
    13c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	bc 01       	movw	r22, r24
    13cc:	cd 01       	movw	r24, r26
    13ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	9e 83       	std	Y+6, r25	; 0x06
    13d8:	8d 83       	std	Y+5, r24	; 0x05
    13da:	0f c0       	rjmp	.+30     	; 0x13fa <HLCD_vSendChar+0xf8>
    13dc:	88 ec       	ldi	r24, 0xC8	; 200
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	9c 83       	std	Y+4, r25	; 0x04
    13e2:	8b 83       	std	Y+3, r24	; 0x03
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	9c 81       	ldd	r25, Y+4	; 0x04
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <HLCD_vSendChar+0xe6>
    13ec:	9c 83       	std	Y+4, r25	; 0x04
    13ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	9e 81       	ldd	r25, Y+6	; 0x06
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	69 f7       	brne	.-38     	; 0x13dc <HLCD_vSendChar+0xda>
    1402:	14 c0       	rjmp	.+40     	; 0x142c <HLCD_vSendChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1404:	6f 81       	ldd	r22, Y+7	; 0x07
    1406:	78 85       	ldd	r23, Y+8	; 0x08
    1408:	89 85       	ldd	r24, Y+9	; 0x09
    140a:	9a 85       	ldd	r25, Y+10	; 0x0a
    140c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	9e 83       	std	Y+6, r25	; 0x06
    1416:	8d 83       	std	Y+5, r24	; 0x05
    1418:	8d 81       	ldd	r24, Y+5	; 0x05
    141a:	9e 81       	ldd	r25, Y+6	; 0x06
    141c:	9a 83       	std	Y+2, r25	; 0x02
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	f1 f7       	brne	.-4      	; 0x1424 <HLCD_vSendChar+0x122>
    1428:	9a 83       	std	Y+2, r25	; 0x02
    142a:	89 83       	std	Y+1, r24	; 0x01

	/*wait 5ms*/
	_delay_ms(5);
	/*set E pin*/
	MDIO_vSetPinValue(CTR_PORT, LCD_E, DIO_HIGH);
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	62 e0       	ldi	r22, 0x02	; 2
    1430:	41 e0       	ldi	r20, 0x01	; 1
    1432:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <MDIO_vSetPinValue>
}
    1436:	2f 96       	adiw	r28, 0x0f	; 15
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <HLCD_vDisplayString>:



void HLCD_vDisplayString( u8 *p_u8ptr){
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <HLCD_vDisplayString+0x6>
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	9a 83       	std	Y+2, r25	; 0x02
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	0a c0       	rjmp	.+20     	; 0x146c <HLCD_vDisplayString+0x24>

	/*create infinite loop while()*/
	while ('\0'!= *p_u8ptr)
	{
		/*send char by char of the array */
		HLCD_vSendChar(*p_u8ptr);
    1458:	e9 81       	ldd	r30, Y+1	; 0x01
    145a:	fa 81       	ldd	r31, Y+2	; 0x02
    145c:	80 81       	ld	r24, Z
    145e:	0e 94 81 09 	call	0x1302	; 0x1302 <HLCD_vSendChar>
		/*increment the iterator */
		p_u8ptr++;
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	9a 81       	ldd	r25, Y+2	; 0x02
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	9a 83       	std	Y+2, r25	; 0x02
    146a:	89 83       	std	Y+1, r24	; 0x01


void HLCD_vDisplayString( u8 *p_u8ptr){

	/*create infinite loop while()*/
	while ('\0'!= *p_u8ptr)
    146c:	e9 81       	ldd	r30, Y+1	; 0x01
    146e:	fa 81       	ldd	r31, Y+2	; 0x02
    1470:	80 81       	ld	r24, Z
    1472:	88 23       	and	r24, r24
    1474:	89 f7       	brne	.-30     	; 0x1458 <HLCD_vDisplayString+0x10>
		/*send char by char of the array */
		HLCD_vSendChar(*p_u8ptr);
		/*increment the iterator */
		p_u8ptr++;
	}
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <HLCD_vWriteNumber>:

void HLCD_vWriteNumber(u16 Copy_u16Number)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	29 97       	sbiw	r28, 0x09	; 9
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	99 87       	std	Y+9, r25	; 0x09
    1496:	88 87       	std	Y+8, r24	; 0x08
	/*create arr to hold nums' digits*/
	u8 Local_u8arr[7]={0};
    1498:	87 e0       	ldi	r24, 0x07	; 7
    149a:	fe 01       	movw	r30, r28
    149c:	31 96       	adiw	r30, 0x01	; 1
    149e:	df 01       	movw	r26, r30
    14a0:	98 2f       	mov	r25, r24
    14a2:	1d 92       	st	X+, r1
    14a4:	9a 95       	dec	r25
    14a6:	e9 f7       	brne	.-6      	; 0x14a2 <HLCD_vWriteNumber+0x22>

	/*turn number to char using itoa function */
	itoa(Copy_u16Number ,Local_u8arr,10);
    14a8:	88 85       	ldd	r24, Y+8	; 0x08
    14aa:	99 85       	ldd	r25, Y+9	; 0x09
    14ac:	9e 01       	movw	r18, r28
    14ae:	2f 5f       	subi	r18, 0xFF	; 255
    14b0:	3f 4f       	sbci	r19, 0xFF	; 255
    14b2:	b9 01       	movw	r22, r18
    14b4:	4a e0       	ldi	r20, 0x0A	; 10
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <itoa>
	/*send the translated value to lcd */
	HLCD_vDisplayString(Local_u8arr);
    14bc:	ce 01       	movw	r24, r28
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	0e 94 24 0a 	call	0x1448	; 0x1448 <HLCD_vDisplayString>

}
    14c4:	29 96       	adiw	r28, 0x09	; 9
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <HLCD_vClrLcd>:

void HLCD_vClrLcd(void){
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
	HLCD_vSendChar(Clear);
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	0e 94 81 09 	call	0x1302	; 0x1302 <HLCD_vSendChar>

}
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <HLCD_vGotoXY>:


void HLCD_vGotoXY(u8 copy_u8PosX,u8 copy_u8PosY)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	63 97       	sbiw	r28, 0x13	; 19
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	88 8b       	std	Y+16, r24	; 0x10
    1500:	69 8b       	std	Y+17, r22	; 0x11
	u8 Local_Postion;		//the exact address to start write on lcd

	if (copy_u8PosX>=LCD_ROW_2 || copy_u8PosX <=LCD_ROW_2 ||copy_u8PosY>16 || copy_u8PosY<0)
    1502:	88 89       	ldd	r24, Y+16	; 0x10
    1504:	88 23       	and	r24, r24
    1506:	31 f4       	brne	.+12     	; 0x1514 <HLCD_vGotoXY+0x2a>
    1508:	88 89       	ldd	r24, Y+16	; 0x10
    150a:	82 30       	cpi	r24, 0x02	; 2
    150c:	18 f0       	brcs	.+6      	; 0x1514 <HLCD_vGotoXY+0x2a>
    150e:	89 89       	ldd	r24, Y+17	; 0x11
    1510:	81 31       	cpi	r24, 0x11	; 17
    1512:	10 f0       	brcs	.+4      	; 0x1518 <HLCD_vGotoXY+0x2e>
	{
		Local_Postion=F_ADS1;
    1514:	80 e4       	ldi	r24, 0x40	; 64
    1516:	8f 87       	std	Y+15, r24	; 0x0f
	}
	/*switch on the lines of lcd */
	switch(copy_u8PosX)
    1518:	88 89       	ldd	r24, Y+16	; 0x10
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	3b 8b       	std	Y+19, r19	; 0x13
    1520:	2a 8b       	std	Y+18, r18	; 0x12
    1522:	8a 89       	ldd	r24, Y+18	; 0x12
    1524:	9b 89       	ldd	r25, Y+19	; 0x13
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	31 f0       	breq	.+12     	; 0x1536 <HLCD_vGotoXY+0x4c>
    152a:	2a 89       	ldd	r18, Y+18	; 0x12
    152c:	3b 89       	ldd	r19, Y+19	; 0x13
    152e:	21 30       	cpi	r18, 0x01	; 1
    1530:	31 05       	cpc	r19, r1
    1532:	29 f0       	breq	.+10     	; 0x153e <HLCD_vGotoXY+0x54>
    1534:	07 c0       	rjmp	.+14     	; 0x1544 <HLCD_vGotoXY+0x5a>
	{
	case LCD_ROW_1:
		Local_Postion=lcd_SetCursor+(copy_u8PosY-1);
    1536:	89 89       	ldd	r24, Y+17	; 0x11
    1538:	81 58       	subi	r24, 0x81	; 129
    153a:	8f 87       	std	Y+15, r24	; 0x0f
    153c:	03 c0       	rjmp	.+6      	; 0x1544 <HLCD_vGotoXY+0x5a>
		break;
	case LCD_ROW_2:
		Local_Postion=F_ADS1+(copy_u8PosY-1);
    153e:	89 89       	ldd	r24, Y+17	; 0x11
    1540:	81 5c       	subi	r24, 0xC1	; 193
    1542:	8f 87       	std	Y+15, r24	; 0x0f
	}
	HLCD_vSendCommand(Local_Postion);
    1544:	8f 85       	ldd	r24, Y+15	; 0x0f
    1546:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_vSendCommand>
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a0 e8       	ldi	r26, 0x80	; 128
    1550:	bf e3       	ldi	r27, 0x3F	; 63
    1552:	8b 87       	std	Y+11, r24	; 0x0b
    1554:	9c 87       	std	Y+12, r25	; 0x0c
    1556:	ad 87       	std	Y+13, r26	; 0x0d
    1558:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155a:	6b 85       	ldd	r22, Y+11	; 0x0b
    155c:	7c 85       	ldd	r23, Y+12	; 0x0c
    155e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1560:	9e 85       	ldd	r25, Y+14	; 0x0e
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	4a ef       	ldi	r20, 0xFA	; 250
    1568:	54 e4       	ldi	r21, 0x44	; 68
    156a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	8f 83       	std	Y+7, r24	; 0x07
    1574:	98 87       	std	Y+8, r25	; 0x08
    1576:	a9 87       	std	Y+9, r26	; 0x09
    1578:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    157a:	6f 81       	ldd	r22, Y+7	; 0x07
    157c:	78 85       	ldd	r23, Y+8	; 0x08
    157e:	89 85       	ldd	r24, Y+9	; 0x09
    1580:	9a 85       	ldd	r25, Y+10	; 0x0a
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e8       	ldi	r20, 0x80	; 128
    1588:	5f e3       	ldi	r21, 0x3F	; 63
    158a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    158e:	88 23       	and	r24, r24
    1590:	2c f4       	brge	.+10     	; 0x159c <HLCD_vGotoXY+0xb2>
		__ticks = 1;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
    159a:	3f c0       	rjmp	.+126    	; 0x161a <HLCD_vGotoXY+0x130>
	else if (__tmp > 65535)
    159c:	6f 81       	ldd	r22, Y+7	; 0x07
    159e:	78 85       	ldd	r23, Y+8	; 0x08
    15a0:	89 85       	ldd	r24, Y+9	; 0x09
    15a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	57 e4       	ldi	r21, 0x47	; 71
    15ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b0:	18 16       	cp	r1, r24
    15b2:	4c f5       	brge	.+82     	; 0x1606 <HLCD_vGotoXY+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e2       	ldi	r20, 0x20	; 32
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 83       	std	Y+5, r24	; 0x05
    15dc:	0f c0       	rjmp	.+30     	; 0x15fc <HLCD_vGotoXY+0x112>
    15de:	88 ec       	ldi	r24, 0xC8	; 200
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9c 83       	std	Y+4, r25	; 0x04
    15e4:	8b 83       	std	Y+3, r24	; 0x03
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <HLCD_vGotoXY+0x100>
    15ee:	9c 83       	std	Y+4, r25	; 0x04
    15f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	9e 83       	std	Y+6, r25	; 0x06
    15fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fc:	8d 81       	ldd	r24, Y+5	; 0x05
    15fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	69 f7       	brne	.-38     	; 0x15de <HLCD_vGotoXY+0xf4>
    1604:	14 c0       	rjmp	.+40     	; 0x162e <HLCD_vGotoXY+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1606:	6f 81       	ldd	r22, Y+7	; 0x07
    1608:	78 85       	ldd	r23, Y+8	; 0x08
    160a:	89 85       	ldd	r24, Y+9	; 0x09
    160c:	9a 85       	ldd	r25, Y+10	; 0x0a
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	8d 81       	ldd	r24, Y+5	; 0x05
    161c:	9e 81       	ldd	r25, Y+6	; 0x06
    161e:	9a 83       	std	Y+2, r25	; 0x02
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <HLCD_vGotoXY+0x13c>
    162a:	9a 83       	std	Y+2, r25	; 0x02
    162c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
}
    162e:	63 96       	adiw	r28, 0x13	; 19
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <HLCD_vStrPosition>:


void HLCD_vStrPosition(u8 copy_u8PosX,u8 copy_u8PosY,u8 *p_u8str)
{
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	00 d0       	rcall	.+0      	; 0x1646 <HLCD_vStrPosition+0x6>
    1646:	00 d0       	rcall	.+0      	; 0x1648 <HLCD_vStrPosition+0x8>
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	6a 83       	std	Y+2, r22	; 0x02
    1650:	5c 83       	std	Y+4, r21	; 0x04
    1652:	4b 83       	std	Y+3, r20	; 0x03

	HLCD_vGotoXY(copy_u8PosX,copy_u8PosY);
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	6a 81       	ldd	r22, Y+2	; 0x02
    1658:	0e 94 75 0a 	call	0x14ea	; 0x14ea <HLCD_vGotoXY>
	HLCD_vDisplayString(p_u8str);
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	0e 94 24 0a 	call	0x1448	; 0x1448 <HLCD_vDisplayString>

}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <HLCD_vSaveCustomChar>:

void HLCD_vSaveCustomChar(u8 copy_u8location,u8 *p_u8pattern)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	00 d0       	rcall	.+0      	; 0x1678 <HLCD_vSaveCustomChar+0x6>
    1678:	00 d0       	rcall	.+0      	; 0x167a <HLCD_vSaveCustomChar+0x8>
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	8a 83       	std	Y+2, r24	; 0x02
    1680:	7c 83       	std	Y+4, r23	; 0x04
    1682:	6b 83       	std	Y+3, r22	; 0x03
	/*create iterator */
	u8 iterator;
	/*AC points to CGRAM*/
	HLCD_vSendCommand(F_ADS_CG);
    1684:	80 e4       	ldi	r24, 0x40	; 64
    1686:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_vSendCommand>
	/*draw char*/
	for (iterator=0; iterator<sizeof(copy_u8CustChar)/sizeof(copy_u8CustChar[0]); iterator++)
    168a:	19 82       	std	Y+1, r1	; 0x01
    168c:	0f c0       	rjmp	.+30     	; 0x16ac <HLCD_vSaveCustomChar+0x3a>
	{
		/*send char to CGRAM */
		HLCD_vSendChar(copy_u8CustChar[iterator]);
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	88 2f       	mov	r24, r24
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	fc 01       	movw	r30, r24
    169a:	e8 59       	subi	r30, 0x98	; 152
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	80 81       	ld	r24, Z
    16a0:	91 81       	ldd	r25, Z+1	; 0x01
    16a2:	0e 94 81 09 	call	0x1302	; 0x1302 <HLCD_vSendChar>
	/*create iterator */
	u8 iterator;
	/*AC points to CGRAM*/
	HLCD_vSendCommand(F_ADS_CG);
	/*draw char*/
	for (iterator=0; iterator<sizeof(copy_u8CustChar)/sizeof(copy_u8CustChar[0]); iterator++)
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	8f 5f       	subi	r24, 0xFF	; 255
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	82 30       	cpi	r24, 0x02	; 2
    16b0:	70 f3       	brcs	.-36     	; 0x168e <HLCD_vSaveCustomChar+0x1c>
	{
		/*send char to CGRAM */
		HLCD_vSendChar(copy_u8CustChar[iterator]);
	}
	/*return AC to DDRAM*/
	HLCD_vGotoXY(0,0);
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	0e 94 75 0a 	call	0x14ea	; 0x14ea <HLCD_vGotoXY>
	/*send char to lcd*/
	for (iterator=0;iterator<8;iterator++)
    16ba:	19 82       	std	Y+1, r1	; 0x01
    16bc:	06 c0       	rjmp	.+12     	; 0x16ca <HLCD_vSaveCustomChar+0x58>
	{
		HLCD_vSendChar(iterator);
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	0e 94 81 09 	call	0x1302	; 0x1302 <HLCD_vSendChar>
		HLCD_vSendChar(copy_u8CustChar[iterator]);
	}
	/*return AC to DDRAM*/
	HLCD_vGotoXY(0,0);
	/*send char to lcd*/
	for (iterator=0;iterator<8;iterator++)
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	8f 5f       	subi	r24, 0xFF	; 255
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	88 30       	cpi	r24, 0x08	; 8
    16ce:	b8 f3       	brcs	.-18     	; 0x16be <HLCD_vSaveCustomChar+0x4c>
	{
		HLCD_vSendChar(iterator);
	}

}
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <MADC_vAdcInit>:


static void (*MADC_CALLBACK)(void);


void MADC_vAdcInit(){
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62

	/*select volt ref. AVCC REF.*/
	SET_BIT(ADMUX,ADMUX_REFS0);
    16e6:	a7 e2       	ldi	r26, 0x27	; 39
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e7 e2       	ldi	r30, 0x27	; 39
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	80 64       	ori	r24, 0x40	; 64
    16f2:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
    16f4:	a7 e2       	ldi	r26, 0x27	; 39
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e7 e2       	ldi	r30, 0x27	; 39
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	8f 77       	andi	r24, 0x7F	; 127
    1700:	8c 93       	st	X, r24
	/*select the adjust Right adjust*/
	CLR_BIT(ADMUX,ADMUX_ADLAR);
    1702:	a7 e2       	ldi	r26, 0x27	; 39
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e7 e2       	ldi	r30, 0x27	; 39
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	8f 7d       	andi	r24, 0xDF	; 223
    170e:	8c 93       	st	X, r24

	/*enable ADC it regard the circute itself */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    1710:	a6 e2       	ldi	r26, 0x26	; 38
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e6 e2       	ldi	r30, 0x26	; 38
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	80 68       	ori	r24, 0x80	; 128
    171c:	8c 93       	st	X, r24
	/*auto trigger*/
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
    171e:	a6 e2       	ldi	r26, 0x26	; 38
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e6 e2       	ldi	r30, 0x26	; 38
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8f 7d       	andi	r24, 0xDF	; 223
    172a:	8c 93       	st	X, r24
	/*enable/disable adc interrupt */
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    172c:	a6 e2       	ldi	r26, 0x26	; 38
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e6 e2       	ldi	r30, 0x26	; 38
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	88 60       	ori	r24, 0x08	; 8
    1738:	8c 93       	st	X, r24

	/*set the pre-scaller --64*/
	CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    173a:	a6 e2       	ldi	r26, 0x26	; 38
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e6 e2       	ldi	r30, 0x26	; 38
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8e 7f       	andi	r24, 0xFE	; 254
    1746:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
    1748:	a6 e2       	ldi	r26, 0x26	; 38
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e6 e2       	ldi	r30, 0x26	; 38
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	82 60       	ori	r24, 0x02	; 2
    1754:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
    1756:	a6 e2       	ldi	r26, 0x26	; 38
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e6 e2       	ldi	r30, 0x26	; 38
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	84 60       	ori	r24, 0x04	; 4
    1762:	8c 93       	st	X, r24
}
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <MADC_u16ReadADC>:

//adc Synchronans function
u16 MADC_u16ReadADC(ADC_channel_t copy_enuChannelADC){
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	0f 92       	push	r0
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	89 83       	std	Y+1, r24	; 0x01
	/*mask the bits for channel before overwrite*/
	ADMUX &=0xE0; //or binary 0b11100000
    1776:	a7 e2       	ldi	r26, 0x27	; 39
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e7 e2       	ldi	r30, 0x27	; 39
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	80 7e       	andi	r24, 0xE0	; 224
    1782:	8c 93       	st	X, r24
	/*select channel */
	ADMUX |=copy_enuChannelADC;
    1784:	a7 e2       	ldi	r26, 0x27	; 39
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e7 e2       	ldi	r30, 0x27	; 39
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	90 81       	ld	r25, Z
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	89 2b       	or	r24, r25
    1792:	8c 93       	st	X, r24
	/*start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1794:	a6 e2       	ldi	r26, 0x26	; 38
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e6 e2       	ldi	r30, 0x26	; 38
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	80 64       	ori	r24, 0x40	; 64
    17a0:	8c 93       	st	X, r24
	/*busy wait for ADC flag*/
	while(!GET_BIT(ADCSRA,ADCSRA_ADIF)){}
    17a2:	e6 e2       	ldi	r30, 0x26	; 38
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	82 95       	swap	r24
    17aa:	8f 70       	andi	r24, 0x0F	; 15
    17ac:	88 2f       	mov	r24, r24
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	81 70       	andi	r24, 0x01	; 1
    17b2:	90 70       	andi	r25, 0x00	; 0
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	a9 f3       	breq	.-22     	; 0x17a2 <MADC_u16ReadADC+0x38>
	/*clr flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    17b8:	a6 e2       	ldi	r26, 0x26	; 38
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e6 e2       	ldi	r30, 0x26	; 38
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	80 61       	ori	r24, 0x10	; 16
    17c4:	8c 93       	st	X, r24
	return ADC_DATA_REG;
    17c6:	e4 e2       	ldi	r30, 0x24	; 36
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	91 81       	ldd	r25, Z+1	; 0x01
}
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <MADC_enumSelectADCChannel>:
/*use an asynchro.*/


ErrorStatus MADC_enumSelectADCChannel(ADC_channel_t copy_enuChannelADC){
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	00 d0       	rcall	.+0      	; 0x17dc <MADC_enumSelectADCChannel+0x6>
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	8a 83       	std	Y+2, r24	; 0x02
	/*create local var from ERRORStatus*/
	ErrorStatus Local_u8Errorstate = OK;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	89 83       	std	Y+1, r24	; 0x01

	if ((copy_enuChannelADC >= ADC_CH0) && (copy_enuChannelADC <= ADC_CH7)) {
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	88 30       	cpi	r24, 0x08	; 8
    17ea:	80 f4       	brcc	.+32     	; 0x180c <MADC_enumSelectADCChannel+0x36>
		/*mask the bits for channel before overwrite*/
		ADMUX &= 0xE0; //or binary 0b11100000
    17ec:	a7 e2       	ldi	r26, 0x27	; 39
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e7 e2       	ldi	r30, 0x27	; 39
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	80 7e       	andi	r24, 0xE0	; 224
    17f8:	8c 93       	st	X, r24
		/*select channel */
		ADMUX |= copy_enuChannelADC;
    17fa:	a7 e2       	ldi	r26, 0x27	; 39
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e7 e2       	ldi	r30, 0x27	; 39
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	90 81       	ld	r25, Z
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	89 2b       	or	r24, r25
    1808:	8c 93       	st	X, r24
    180a:	01 c0       	rjmp	.+2      	; 0x180e <MADC_enumSelectADCChannel+0x38>
	} else {
		Local_u8Errorstate = NOK;
    180c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Errorstate;
    180e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <MADC_enumStartConversionADC>:

ErrorStatus MADC_enumStartConversionADC(ADC_channel_t copy_enuChannelADC){
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	00 d0       	rcall	.+0      	; 0x1820 <MADC_enumStartConversionADC+0x6>
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	8a 83       	std	Y+2, r24	; 0x02
	/*create local var from ERRORStatus*/
	ErrorStatus Local_u8Errorstate = OK;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_enuChannelADC >= ADC_CH0) && (copy_enuChannelADC <= ADC_CH7)) {
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	88 30       	cpi	r24, 0x08	; 8
    182e:	40 f4       	brcc	.+16     	; 0x1840 <MADC_enumStartConversionADC+0x26>

		/*start conversion*/
		SET_BIT(ADCSRA, ADCSRA_ADSC);
    1830:	a6 e2       	ldi	r26, 0x26	; 38
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e6 e2       	ldi	r30, 0x26	; 38
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	80 64       	ori	r24, 0x40	; 64
    183c:	8c 93       	st	X, r24
    183e:	01 c0       	rjmp	.+2      	; 0x1842 <MADC_enumStartConversionADC+0x28>
	} else {
		Local_u8Errorstate = NOK;
    1840:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Errorstate;
    1842:	89 81       	ldd	r24, Y+1	; 0x01
}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <MADC_u16ReadDataADC>:
u16 MADC_u16ReadDataADC(void){
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
	return ADC_DATA_REG;
    1856:	e4 e2       	ldi	r30, 0x24	; 36
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	91 81       	ldd	r25, Z+1	; 0x01

}
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <MADC_SetCallback>:

ErrorStatus MADC_SetCallback(void(*fptr)(void)){
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	00 d0       	rcall	.+0      	; 0x186a <MADC_SetCallback+0x6>
    186a:	0f 92       	push	r0
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	9b 83       	std	Y+3, r25	; 0x03
    1872:	8a 83       	std	Y+2, r24	; 0x02
	/*create local var from ERRORStatus*/
	ErrorStatus Local_u8ErrorState = OK;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	89 83       	std	Y+1, r24	; 0x01
	if (fptr != NULL) {
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	9b 81       	ldd	r25, Y+3	; 0x03
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	39 f0       	breq	.+14     	; 0x188e <MADC_SetCallback+0x2a>
		MADC_CALLBACK = fptr;
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	9b 81       	ldd	r25, Y+3	; 0x03
    1884:	90 93 6d 00 	sts	0x006D, r25
    1888:	80 93 6c 00 	sts	0x006C, r24
    188c:	01 c0       	rjmp	.+2      	; 0x1890 <MADC_SetCallback+0x2c>
	} else {
		Local_u8ErrorState = NOK;
    188e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1890:	89 81       	ldd	r24, Y+1	; 0x01

}
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <__vector_16>:

ErrorStatus __vector_16(void) __attribute__((signal));
ErrorStatus __vector_16(void)
 {
    189e:	1f 92       	push	r1
    18a0:	0f 92       	push	r0
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	0f 92       	push	r0
    18a6:	11 24       	eor	r1, r1
    18a8:	2f 93       	push	r18
    18aa:	3f 93       	push	r19
    18ac:	4f 93       	push	r20
    18ae:	5f 93       	push	r21
    18b0:	6f 93       	push	r22
    18b2:	7f 93       	push	r23
    18b4:	8f 93       	push	r24
    18b6:	9f 93       	push	r25
    18b8:	af 93       	push	r26
    18ba:	bf 93       	push	r27
    18bc:	ef 93       	push	r30
    18be:	ff 93       	push	r31
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	0f 92       	push	r0
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
	/*create local var from ERRORStatus*/
	ErrorStatus Local_u8ErrorState = OK;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	89 83       	std	Y+1, r24	; 0x01
	if (MADC_CALLBACK != NULL) {
    18ce:	80 91 6c 00 	lds	r24, 0x006C
    18d2:	90 91 6d 00 	lds	r25, 0x006D
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	69 f0       	breq	.+26     	; 0x18f4 <__vector_16+0x56>
		MADC_CALLBACK();
    18da:	e0 91 6c 00 	lds	r30, 0x006C
    18de:	f0 91 6d 00 	lds	r31, 0x006D
    18e2:	09 95       	icall
		// clear ADC interrupt flag
		SET_BIT(ADCSRA, ADCSRA_ADIF);
    18e4:	a6 e2       	ldi	r26, 0x26	; 38
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	e6 e2       	ldi	r30, 0x26	; 38
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	80 61       	ori	r24, 0x10	; 16
    18f0:	8c 93       	st	X, r24
    18f2:	01 c0       	rjmp	.+2      	; 0x18f6 <__vector_16+0x58>
	} else {
		Local_u8ErrorState = NOK;
    18f4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18f8:	0f 90       	pop	r0
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	ff 91       	pop	r31
    1900:	ef 91       	pop	r30
    1902:	bf 91       	pop	r27
    1904:	af 91       	pop	r26
    1906:	9f 91       	pop	r25
    1908:	8f 91       	pop	r24
    190a:	7f 91       	pop	r23
    190c:	6f 91       	pop	r22
    190e:	5f 91       	pop	r21
    1910:	4f 91       	pop	r20
    1912:	3f 91       	pop	r19
    1914:	2f 91       	pop	r18
    1916:	0f 90       	pop	r0
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	0f 90       	pop	r0
    191c:	1f 90       	pop	r1
    191e:	18 95       	reti

00001920 <MDIO_vSetPortDirection>:
/*	function name:		MDIO_vSetPortDirection( u8 copy_u8port,u8 copy_u8PortDirection)
 * 	function inputs:	Port number , value to be input  or output
 * 	function outputs:	void
 */
/************************************************************************************************************/
void MDIO_vSetPortDirection( u8 copy_u8port,u8 copy_u8PortDirection){
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	00 d0       	rcall	.+0      	; 0x1926 <MDIO_vSetPortDirection+0x6>
    1926:	00 d0       	rcall	.+0      	; 0x1928 <MDIO_vSetPortDirection+0x8>
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	6a 83       	std	Y+2, r22	; 0x02

	switch (copy_u8port)
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	3c 83       	std	Y+4, r19	; 0x04
    1938:	2b 83       	std	Y+3, r18	; 0x03
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	91 05       	cpc	r25, r1
    1942:	d1 f0       	breq	.+52     	; 0x1978 <MDIO_vSetPortDirection+0x58>
    1944:	2b 81       	ldd	r18, Y+3	; 0x03
    1946:	3c 81       	ldd	r19, Y+4	; 0x04
    1948:	22 30       	cpi	r18, 0x02	; 2
    194a:	31 05       	cpc	r19, r1
    194c:	2c f4       	brge	.+10     	; 0x1958 <MDIO_vSetPortDirection+0x38>
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	9c 81       	ldd	r25, Y+4	; 0x04
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	61 f0       	breq	.+24     	; 0x196e <MDIO_vSetPortDirection+0x4e>
    1956:	1e c0       	rjmp	.+60     	; 0x1994 <MDIO_vSetPortDirection+0x74>
    1958:	2b 81       	ldd	r18, Y+3	; 0x03
    195a:	3c 81       	ldd	r19, Y+4	; 0x04
    195c:	22 30       	cpi	r18, 0x02	; 2
    195e:	31 05       	cpc	r19, r1
    1960:	81 f0       	breq	.+32     	; 0x1982 <MDIO_vSetPortDirection+0x62>
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	83 30       	cpi	r24, 0x03	; 3
    1968:	91 05       	cpc	r25, r1
    196a:	81 f0       	breq	.+32     	; 0x198c <MDIO_vSetPortDirection+0x6c>
    196c:	13 c0       	rjmp	.+38     	; 0x1994 <MDIO_vSetPortDirection+0x74>
	{
	case PORTA:
		DDRA_reg=copy_u8PortDirection;
    196e:	ea e3       	ldi	r30, 0x3A	; 58
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	80 83       	st	Z, r24
    1976:	0e c0       	rjmp	.+28     	; 0x1994 <MDIO_vSetPortDirection+0x74>
		break;
	case PORTB:
		DDRB_reg=copy_u8PortDirection;
    1978:	e7 e3       	ldi	r30, 0x37	; 55
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	80 83       	st	Z, r24
    1980:	09 c0       	rjmp	.+18     	; 0x1994 <MDIO_vSetPortDirection+0x74>
		break;
	case PORTC:
		DDRC_reg=copy_u8PortDirection;
    1982:	e4 e3       	ldi	r30, 0x34	; 52
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	80 83       	st	Z, r24
    198a:	04 c0       	rjmp	.+8      	; 0x1994 <MDIO_vSetPortDirection+0x74>
		break;
	case PORTD:
		DDRD_reg=copy_u8PortDirection;
    198c:	e1 e3       	ldi	r30, 0x31	; 49
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	80 83       	st	Z, r24
		break;
	}
}
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <MDIO_vSetPortValue>:
/*	function name:		void MDIO_vSetPortValue( u8 copy_u8port,u8 copy_u8PortValue)
 * 	function inputs:	Port number , value to be high or low
 * 	function outputs:	void
 */
/************************************************************************************************************/
void MDIO_vSetPortValue( u8 copy_u8port,u8 copy_u8PortValue){
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <MDIO_vSetPortValue+0x6>
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <MDIO_vSetPortValue+0x8>
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	6a 83       	std	Y+2, r22	; 0x02

	switch (copy_u8port) {
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	3c 83       	std	Y+4, r19	; 0x04
    19ba:	2b 83       	std	Y+3, r18	; 0x03
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	9c 81       	ldd	r25, Y+4	; 0x04
    19c0:	81 30       	cpi	r24, 0x01	; 1
    19c2:	91 05       	cpc	r25, r1
    19c4:	d1 f0       	breq	.+52     	; 0x19fa <MDIO_vSetPortValue+0x58>
    19c6:	2b 81       	ldd	r18, Y+3	; 0x03
    19c8:	3c 81       	ldd	r19, Y+4	; 0x04
    19ca:	22 30       	cpi	r18, 0x02	; 2
    19cc:	31 05       	cpc	r19, r1
    19ce:	2c f4       	brge	.+10     	; 0x19da <MDIO_vSetPortValue+0x38>
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	9c 81       	ldd	r25, Y+4	; 0x04
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	61 f0       	breq	.+24     	; 0x19f0 <MDIO_vSetPortValue+0x4e>
    19d8:	1e c0       	rjmp	.+60     	; 0x1a16 <MDIO_vSetPortValue+0x74>
    19da:	2b 81       	ldd	r18, Y+3	; 0x03
    19dc:	3c 81       	ldd	r19, Y+4	; 0x04
    19de:	22 30       	cpi	r18, 0x02	; 2
    19e0:	31 05       	cpc	r19, r1
    19e2:	81 f0       	breq	.+32     	; 0x1a04 <MDIO_vSetPortValue+0x62>
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	83 30       	cpi	r24, 0x03	; 3
    19ea:	91 05       	cpc	r25, r1
    19ec:	81 f0       	breq	.+32     	; 0x1a0e <MDIO_vSetPortValue+0x6c>
    19ee:	13 c0       	rjmp	.+38     	; 0x1a16 <MDIO_vSetPortValue+0x74>
	case PORTA:
		PORTA_reg = copy_u8PortValue;
    19f0:	eb e3       	ldi	r30, 0x3B	; 59
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	80 83       	st	Z, r24
    19f8:	0e c0       	rjmp	.+28     	; 0x1a16 <MDIO_vSetPortValue+0x74>
		break;
	case PORTB:
		PORTB_reg = copy_u8PortValue;
    19fa:	e8 e3       	ldi	r30, 0x38	; 56
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	80 83       	st	Z, r24
    1a02:	09 c0       	rjmp	.+18     	; 0x1a16 <MDIO_vSetPortValue+0x74>
		break;
	case PORTC:
		PORTC_reg = copy_u8PortValue;
    1a04:	e5 e3       	ldi	r30, 0x35	; 53
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	80 83       	st	Z, r24
    1a0c:	04 c0       	rjmp	.+8      	; 0x1a16 <MDIO_vSetPortValue+0x74>
		break;
	case PORTD:
		PORTD_reg = copy_u8PortValue;
    1a0e:	e2 e3       	ldi	r30, 0x32	; 50
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	80 83       	st	Z, r24
		break;
	}
}
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <MDIO_GetPortValue>:
/*	function name:		u8 MDIO_GetPortValue( u8 copy_u8port)
 * 	function inputs:	Port number
 * 	function outputs:	value is is high or low
 */
/************************************************************************************************************/
u8 MDIO_GetPortValue( u8 copy_u8port){
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <MDIO_GetPortValue+0x6>
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <MDIO_GetPortValue+0x8>
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	8a 83       	std	Y+2, r24	; 0x02

	u8 value=0;
    1a32:	19 82       	std	Y+1, r1	; 0x01
	switch (copy_u8port) {
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	3c 83       	std	Y+4, r19	; 0x04
    1a3c:	2b 83       	std	Y+3, r18	; 0x03
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	9c 81       	ldd	r25, Y+4	; 0x04
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	91 05       	cpc	r25, r1
    1a46:	d1 f0       	breq	.+52     	; 0x1a7c <MDIO_GetPortValue+0x58>
    1a48:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4c:	22 30       	cpi	r18, 0x02	; 2
    1a4e:	31 05       	cpc	r19, r1
    1a50:	2c f4       	brge	.+10     	; 0x1a5c <MDIO_GetPortValue+0x38>
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	61 f0       	breq	.+24     	; 0x1a72 <MDIO_GetPortValue+0x4e>
    1a5a:	1e c0       	rjmp	.+60     	; 0x1a98 <MDIO_GetPortValue+0x74>
    1a5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a60:	22 30       	cpi	r18, 0x02	; 2
    1a62:	31 05       	cpc	r19, r1
    1a64:	81 f0       	breq	.+32     	; 0x1a86 <MDIO_GetPortValue+0x62>
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	83 30       	cpi	r24, 0x03	; 3
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	81 f0       	breq	.+32     	; 0x1a90 <MDIO_GetPortValue+0x6c>
    1a70:	13 c0       	rjmp	.+38     	; 0x1a98 <MDIO_GetPortValue+0x74>
	case PORTA:
		value = PINA_reg;
    1a72:	e9 e3       	ldi	r30, 0x39	; 57
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	0e c0       	rjmp	.+28     	; 0x1a98 <MDIO_GetPortValue+0x74>
		break;
	case PORTB:
		value=PINB_reg;
    1a7c:	e6 e3       	ldi	r30, 0x36	; 54
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	89 83       	std	Y+1, r24	; 0x01
    1a84:	09 c0       	rjmp	.+18     	; 0x1a98 <MDIO_GetPortValue+0x74>
		break;
	case PORTC:
		value=PINC_reg;
    1a86:	e3 e3       	ldi	r30, 0x33	; 51
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	89 83       	std	Y+1, r24	; 0x01
    1a8e:	04 c0       	rjmp	.+8      	; 0x1a98 <MDIO_GetPortValue+0x74>
		break;
	case PORTD:
		value=PIND_reg;
    1a90:	e0 e3       	ldi	r30, 0x30	; 48
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return value;
    1a98:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <MDIO_vSetPinDirection>:
 * 	function inputs:	Port number , pin number ,value to be input  or output
 * 	function outputs:	void
 */
/************************************************************************************************************/
void MDIO_vSetPinDirection( u8 copy_u8port,u8 copy_u8pin, u8 copy_u8PinDirection)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	27 97       	sbiw	r28, 0x07	; 7
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	6a 83       	std	Y+2, r22	; 0x02
    1ac0:	4b 83       	std	Y+3, r20	; 0x03

	if (copy_u8PinDirection == DIO_OUTPUT) 
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	81 30       	cpi	r24, 0x01	; 1
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <MDIO_vSetPinDirection+0x22>
    1ac8:	6f c0       	rjmp	.+222    	; 0x1ba8 <MDIO_vSetPinDirection+0x100>
	{
		switch (copy_u8port) 
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	3f 83       	std	Y+7, r19	; 0x07
    1ad2:	2e 83       	std	Y+6, r18	; 0x06
    1ad4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	91 05       	cpc	r25, r1
    1adc:	49 f1       	breq	.+82     	; 0x1b30 <MDIO_vSetPinDirection+0x88>
    1ade:	2e 81       	ldd	r18, Y+6	; 0x06
    1ae0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ae2:	22 30       	cpi	r18, 0x02	; 2
    1ae4:	31 05       	cpc	r19, r1
    1ae6:	2c f4       	brge	.+10     	; 0x1af2 <MDIO_vSetPinDirection+0x4a>
    1ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aea:	9f 81       	ldd	r25, Y+7	; 0x07
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	61 f0       	breq	.+24     	; 0x1b08 <MDIO_vSetPinDirection+0x60>
    1af0:	d2 c0       	rjmp	.+420    	; 0x1c96 <MDIO_vSetPinDirection+0x1ee>
    1af2:	2e 81       	ldd	r18, Y+6	; 0x06
    1af4:	3f 81       	ldd	r19, Y+7	; 0x07
    1af6:	22 30       	cpi	r18, 0x02	; 2
    1af8:	31 05       	cpc	r19, r1
    1afa:	71 f1       	breq	.+92     	; 0x1b58 <MDIO_vSetPinDirection+0xb0>
    1afc:	8e 81       	ldd	r24, Y+6	; 0x06
    1afe:	9f 81       	ldd	r25, Y+7	; 0x07
    1b00:	83 30       	cpi	r24, 0x03	; 3
    1b02:	91 05       	cpc	r25, r1
    1b04:	e9 f1       	breq	.+122    	; 0x1b80 <MDIO_vSetPinDirection+0xd8>
    1b06:	c7 c0       	rjmp	.+398    	; 0x1c96 <MDIO_vSetPinDirection+0x1ee>
		{
		case PORTA:
			SET_BIT(DDRA_reg, copy_u8pin);
    1b08:	aa e3       	ldi	r26, 0x3A	; 58
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	ea e3       	ldi	r30, 0x3A	; 58
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 2e       	mov	r0, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <MDIO_vSetPinDirection+0x7e>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	0a 94       	dec	r0
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <MDIO_vSetPinDirection+0x7a>
    1b2a:	84 2b       	or	r24, r20
    1b2c:	8c 93       	st	X, r24
    1b2e:	b3 c0       	rjmp	.+358    	; 0x1c96 <MDIO_vSetPinDirection+0x1ee>
			break;
		case PORTB:
			SET_BIT(DDRB_reg, copy_u8pin);
    1b30:	a7 e3       	ldi	r26, 0x37	; 55
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e7 e3       	ldi	r30, 0x37	; 55
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	02 2e       	mov	r0, r18
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <MDIO_vSetPinDirection+0xa6>
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	0a 94       	dec	r0
    1b50:	e2 f7       	brpl	.-8      	; 0x1b4a <MDIO_vSetPinDirection+0xa2>
    1b52:	84 2b       	or	r24, r20
    1b54:	8c 93       	st	X, r24
    1b56:	9f c0       	rjmp	.+318    	; 0x1c96 <MDIO_vSetPinDirection+0x1ee>
			break;
		case PORTC:
			SET_BIT(DDRC_reg, copy_u8pin);
    1b58:	a4 e3       	ldi	r26, 0x34	; 52
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	e4 e3       	ldi	r30, 0x34	; 52
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	48 2f       	mov	r20, r24
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	02 2e       	mov	r0, r18
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <MDIO_vSetPinDirection+0xce>
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	0a 94       	dec	r0
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <MDIO_vSetPinDirection+0xca>
    1b7a:	84 2b       	or	r24, r20
    1b7c:	8c 93       	st	X, r24
    1b7e:	8b c0       	rjmp	.+278    	; 0x1c96 <MDIO_vSetPinDirection+0x1ee>
			break;
		case PORTD:
			SET_BIT(DDRD_reg, copy_u8pin);
    1b80:	a1 e3       	ldi	r26, 0x31	; 49
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e1 e3       	ldi	r30, 0x31	; 49
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	02 2e       	mov	r0, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <MDIO_vSetPinDirection+0xf6>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	0a 94       	dec	r0
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <MDIO_vSetPinDirection+0xf2>
    1ba2:	84 2b       	or	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	77 c0       	rjmp	.+238    	; 0x1c96 <MDIO_vSetPinDirection+0x1ee>
			break;
		}
	}
	else if (copy_u8PinDirection == DIO_INPUT) 
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	88 23       	and	r24, r24
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <MDIO_vSetPinDirection+0x108>
    1bae:	73 c0       	rjmp	.+230    	; 0x1c96 <MDIO_vSetPinDirection+0x1ee>
	{
		switch (copy_u8port) 
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	3d 83       	std	Y+5, r19	; 0x05
    1bb8:	2c 83       	std	Y+4, r18	; 0x04
    1bba:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	59 f1       	breq	.+86     	; 0x1c1a <MDIO_vSetPinDirection+0x172>
    1bc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc8:	22 30       	cpi	r18, 0x02	; 2
    1bca:	31 05       	cpc	r19, r1
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <MDIO_vSetPinDirection+0x130>
    1bce:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	69 f0       	breq	.+26     	; 0x1bf0 <MDIO_vSetPinDirection+0x148>
    1bd6:	5f c0       	rjmp	.+190    	; 0x1c96 <MDIO_vSetPinDirection+0x1ee>
    1bd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bda:	3d 81       	ldd	r19, Y+5	; 0x05
    1bdc:	22 30       	cpi	r18, 0x02	; 2
    1bde:	31 05       	cpc	r19, r1
    1be0:	89 f1       	breq	.+98     	; 0x1c44 <MDIO_vSetPinDirection+0x19c>
    1be2:	8c 81       	ldd	r24, Y+4	; 0x04
    1be4:	9d 81       	ldd	r25, Y+5	; 0x05
    1be6:	83 30       	cpi	r24, 0x03	; 3
    1be8:	91 05       	cpc	r25, r1
    1bea:	09 f4       	brne	.+2      	; 0x1bee <MDIO_vSetPinDirection+0x146>
    1bec:	40 c0       	rjmp	.+128    	; 0x1c6e <MDIO_vSetPinDirection+0x1c6>
    1bee:	53 c0       	rjmp	.+166    	; 0x1c96 <MDIO_vSetPinDirection+0x1ee>
		{
		case PORTA:
			CLR_BIT(DDRA_reg, copy_u8pin);
    1bf0:	aa e3       	ldi	r26, 0x3A	; 58
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	ea e3       	ldi	r30, 0x3A	; 58
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <MDIO_vSetPinDirection+0x166>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <MDIO_vSetPinDirection+0x162>
    1c12:	80 95       	com	r24
    1c14:	84 23       	and	r24, r20
    1c16:	8c 93       	st	X, r24
    1c18:	3e c0       	rjmp	.+124    	; 0x1c96 <MDIO_vSetPinDirection+0x1ee>
			break;
		case PORTB:
			CLR_BIT(DDRB_reg, copy_u8pin);
    1c1a:	a7 e3       	ldi	r26, 0x37	; 55
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e7 e3       	ldi	r30, 0x37	; 55
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	48 2f       	mov	r20, r24
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 2e       	mov	r0, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <MDIO_vSetPinDirection+0x190>
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	0a 94       	dec	r0
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <MDIO_vSetPinDirection+0x18c>
    1c3c:	80 95       	com	r24
    1c3e:	84 23       	and	r24, r20
    1c40:	8c 93       	st	X, r24
    1c42:	29 c0       	rjmp	.+82     	; 0x1c96 <MDIO_vSetPinDirection+0x1ee>
			break;
		case PORTC:
			CLR_BIT(DDRC_reg, copy_u8pin);
    1c44:	a4 e3       	ldi	r26, 0x34	; 52
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e4 e3       	ldi	r30, 0x34	; 52
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	48 2f       	mov	r20, r24
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	02 2e       	mov	r0, r18
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <MDIO_vSetPinDirection+0x1ba>
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	0a 94       	dec	r0
    1c64:	e2 f7       	brpl	.-8      	; 0x1c5e <MDIO_vSetPinDirection+0x1b6>
    1c66:	80 95       	com	r24
    1c68:	84 23       	and	r24, r20
    1c6a:	8c 93       	st	X, r24
    1c6c:	14 c0       	rjmp	.+40     	; 0x1c96 <MDIO_vSetPinDirection+0x1ee>
			break;
		case PORTD:
			CLR_BIT(DDRD_reg, copy_u8pin);
    1c6e:	a1 e3       	ldi	r26, 0x31	; 49
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e1 e3       	ldi	r30, 0x31	; 49
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	48 2f       	mov	r20, r24
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 2e       	mov	r0, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <MDIO_vSetPinDirection+0x1e4>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	0a 94       	dec	r0
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <MDIO_vSetPinDirection+0x1e0>
    1c90:	80 95       	com	r24
    1c92:	84 23       	and	r24, r20
    1c94:	8c 93       	st	X, r24
			break;
		}
	}
}
    1c96:	27 96       	adiw	r28, 0x07	; 7
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <MDIO_vSetPinValue>:
 * 	function inputs:	Port number , pin number, value to be high or low
 * 	function outputs:	void
 */
/************************************************************************************************************/
void MDIO_vSetPinValue( u8 copy_u8port,u8 copy_u8pin, u8 copy_u8PinValue)
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	27 97       	sbiw	r28, 0x07	; 7
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	6a 83       	std	Y+2, r22	; 0x02
    1cc0:	4b 83       	std	Y+3, r20	; 0x03

	if (copy_u8PinValue == DIO_HIGH) 
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <MDIO_vSetPinValue+0x22>
    1cc8:	6f c0       	rjmp	.+222    	; 0x1da8 <MDIO_vSetPinValue+0x100>
	{
		switch (copy_u8port) 
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	3f 83       	std	Y+7, r19	; 0x07
    1cd2:	2e 83       	std	Y+6, r18	; 0x06
    1cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	91 05       	cpc	r25, r1
    1cdc:	49 f1       	breq	.+82     	; 0x1d30 <MDIO_vSetPinValue+0x88>
    1cde:	2e 81       	ldd	r18, Y+6	; 0x06
    1ce0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ce2:	22 30       	cpi	r18, 0x02	; 2
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <MDIO_vSetPinValue+0x4a>
    1ce8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cea:	9f 81       	ldd	r25, Y+7	; 0x07
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	61 f0       	breq	.+24     	; 0x1d08 <MDIO_vSetPinValue+0x60>
    1cf0:	d2 c0       	rjmp	.+420    	; 0x1e96 <MDIO_vSetPinValue+0x1ee>
    1cf2:	2e 81       	ldd	r18, Y+6	; 0x06
    1cf4:	3f 81       	ldd	r19, Y+7	; 0x07
    1cf6:	22 30       	cpi	r18, 0x02	; 2
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	71 f1       	breq	.+92     	; 0x1d58 <MDIO_vSetPinValue+0xb0>
    1cfc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfe:	9f 81       	ldd	r25, Y+7	; 0x07
    1d00:	83 30       	cpi	r24, 0x03	; 3
    1d02:	91 05       	cpc	r25, r1
    1d04:	e9 f1       	breq	.+122    	; 0x1d80 <MDIO_vSetPinValue+0xd8>
    1d06:	c7 c0       	rjmp	.+398    	; 0x1e96 <MDIO_vSetPinValue+0x1ee>
		{
		case PORTA:
			SET_BIT(PORTA_reg, copy_u8pin);
    1d08:	ab e3       	ldi	r26, 0x3B	; 59
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	eb e3       	ldi	r30, 0x3B	; 59
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 2e       	mov	r0, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <MDIO_vSetPinValue+0x7e>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <MDIO_vSetPinValue+0x7a>
    1d2a:	84 2b       	or	r24, r20
    1d2c:	8c 93       	st	X, r24
    1d2e:	b3 c0       	rjmp	.+358    	; 0x1e96 <MDIO_vSetPinValue+0x1ee>
			break;
		case PORTB:
			SET_BIT(PORTB_reg, copy_u8pin);
    1d30:	a8 e3       	ldi	r26, 0x38	; 56
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e8 e3       	ldi	r30, 0x38	; 56
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 2e       	mov	r0, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <MDIO_vSetPinValue+0xa6>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	0a 94       	dec	r0
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <MDIO_vSetPinValue+0xa2>
    1d52:	84 2b       	or	r24, r20
    1d54:	8c 93       	st	X, r24
    1d56:	9f c0       	rjmp	.+318    	; 0x1e96 <MDIO_vSetPinValue+0x1ee>
			break;
		case PORTC:
			SET_BIT(PORTC_reg, copy_u8pin);
    1d58:	a5 e3       	ldi	r26, 0x35	; 53
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e5 e3       	ldi	r30, 0x35	; 53
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	48 2f       	mov	r20, r24
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	02 2e       	mov	r0, r18
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <MDIO_vSetPinValue+0xce>
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	0a 94       	dec	r0
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <MDIO_vSetPinValue+0xca>
    1d7a:	84 2b       	or	r24, r20
    1d7c:	8c 93       	st	X, r24
    1d7e:	8b c0       	rjmp	.+278    	; 0x1e96 <MDIO_vSetPinValue+0x1ee>
			break;
		case PORTD:
			SET_BIT(PORTD_reg, copy_u8pin);
    1d80:	a2 e3       	ldi	r26, 0x32	; 50
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e2 e3       	ldi	r30, 0x32	; 50
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	48 2f       	mov	r20, r24
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	02 2e       	mov	r0, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <MDIO_vSetPinValue+0xf6>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	0a 94       	dec	r0
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <MDIO_vSetPinValue+0xf2>
    1da2:	84 2b       	or	r24, r20
    1da4:	8c 93       	st	X, r24
    1da6:	77 c0       	rjmp	.+238    	; 0x1e96 <MDIO_vSetPinValue+0x1ee>
			break;
		}
	}
	else if (copy_u8PinValue == DIO_LOW) 
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	88 23       	and	r24, r24
    1dac:	09 f0       	breq	.+2      	; 0x1db0 <MDIO_vSetPinValue+0x108>
    1dae:	73 c0       	rjmp	.+230    	; 0x1e96 <MDIO_vSetPinValue+0x1ee>
	{
		switch (copy_u8port) 
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	3d 83       	std	Y+5, r19	; 0x05
    1db8:	2c 83       	std	Y+4, r18	; 0x04
    1dba:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	59 f1       	breq	.+86     	; 0x1e1a <MDIO_vSetPinValue+0x172>
    1dc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc8:	22 30       	cpi	r18, 0x02	; 2
    1dca:	31 05       	cpc	r19, r1
    1dcc:	2c f4       	brge	.+10     	; 0x1dd8 <MDIO_vSetPinValue+0x130>
    1dce:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	69 f0       	breq	.+26     	; 0x1df0 <MDIO_vSetPinValue+0x148>
    1dd6:	5f c0       	rjmp	.+190    	; 0x1e96 <MDIO_vSetPinValue+0x1ee>
    1dd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dda:	3d 81       	ldd	r19, Y+5	; 0x05
    1ddc:	22 30       	cpi	r18, 0x02	; 2
    1dde:	31 05       	cpc	r19, r1
    1de0:	89 f1       	breq	.+98     	; 0x1e44 <MDIO_vSetPinValue+0x19c>
    1de2:	8c 81       	ldd	r24, Y+4	; 0x04
    1de4:	9d 81       	ldd	r25, Y+5	; 0x05
    1de6:	83 30       	cpi	r24, 0x03	; 3
    1de8:	91 05       	cpc	r25, r1
    1dea:	09 f4       	brne	.+2      	; 0x1dee <MDIO_vSetPinValue+0x146>
    1dec:	40 c0       	rjmp	.+128    	; 0x1e6e <MDIO_vSetPinValue+0x1c6>
    1dee:	53 c0       	rjmp	.+166    	; 0x1e96 <MDIO_vSetPinValue+0x1ee>
		{
		case PORTA:
			CLR_BIT(PORTA_reg, copy_u8pin);
    1df0:	ab e3       	ldi	r26, 0x3B	; 59
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	eb e3       	ldi	r30, 0x3B	; 59
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 2e       	mov	r0, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <MDIO_vSetPinValue+0x166>
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	0a 94       	dec	r0
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <MDIO_vSetPinValue+0x162>
    1e12:	80 95       	com	r24
    1e14:	84 23       	and	r24, r20
    1e16:	8c 93       	st	X, r24
    1e18:	3e c0       	rjmp	.+124    	; 0x1e96 <MDIO_vSetPinValue+0x1ee>
			break;
		case PORTB:
			CLR_BIT(PORTB_reg, copy_u8pin);
    1e1a:	a8 e3       	ldi	r26, 0x38	; 56
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e8 e3       	ldi	r30, 0x38	; 56
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	48 2f       	mov	r20, r24
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	02 2e       	mov	r0, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <MDIO_vSetPinValue+0x190>
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	0a 94       	dec	r0
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <MDIO_vSetPinValue+0x18c>
    1e3c:	80 95       	com	r24
    1e3e:	84 23       	and	r24, r20
    1e40:	8c 93       	st	X, r24
    1e42:	29 c0       	rjmp	.+82     	; 0x1e96 <MDIO_vSetPinValue+0x1ee>
			break;
		case PORTC:
			CLR_BIT(PORTC_reg, copy_u8pin);
    1e44:	a5 e3       	ldi	r26, 0x35	; 53
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e5 e3       	ldi	r30, 0x35	; 53
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	48 2f       	mov	r20, r24
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	02 2e       	mov	r0, r18
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <MDIO_vSetPinValue+0x1ba>
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	0a 94       	dec	r0
    1e64:	e2 f7       	brpl	.-8      	; 0x1e5e <MDIO_vSetPinValue+0x1b6>
    1e66:	80 95       	com	r24
    1e68:	84 23       	and	r24, r20
    1e6a:	8c 93       	st	X, r24
    1e6c:	14 c0       	rjmp	.+40     	; 0x1e96 <MDIO_vSetPinValue+0x1ee>
			break;
		case PORTD:
			CLR_BIT(PORTD_reg, copy_u8pin);
    1e6e:	a2 e3       	ldi	r26, 0x32	; 50
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e2 e3       	ldi	r30, 0x32	; 50
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	48 2f       	mov	r20, r24
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	02 2e       	mov	r0, r18
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <MDIO_vSetPinValue+0x1e4>
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	0a 94       	dec	r0
    1e8e:	e2 f7       	brpl	.-8      	; 0x1e88 <MDIO_vSetPinValue+0x1e0>
    1e90:	80 95       	com	r24
    1e92:	84 23       	and	r24, r20
    1e94:	8c 93       	st	X, r24
			break;
		}
	}
}
    1e96:	27 96       	adiw	r28, 0x07	; 7
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	de bf       	out	0x3e, r29	; 62
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	cd bf       	out	0x3d, r28	; 61
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <MDIO_GetPinValue>:
/*	function name:		void GET_PIN_VALUE( u8 PORT,u8 PIN_ID)
 * 	function inputs:	Port number, Pin number
 * 	function outputs:	value is is high or low
 */
/************************************************************************************************************/
u8 MDIO_GetPinValue( u8 copy_u8port,u8 copy_u8pin){
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <MDIO_GetPinValue+0x6>
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <MDIO_GetPinValue+0x8>
    1eb0:	0f 92       	push	r0
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	8a 83       	std	Y+2, r24	; 0x02
    1eb8:	6b 83       	std	Y+3, r22	; 0x03
	u8 value=0;
    1eba:	19 82       	std	Y+1, r1	; 0x01
	switch (copy_u8port) {
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	3d 83       	std	Y+5, r19	; 0x05
    1ec4:	2c 83       	std	Y+4, r18	; 0x04
    1ec6:	4c 81       	ldd	r20, Y+4	; 0x04
    1ec8:	5d 81       	ldd	r21, Y+5	; 0x05
    1eca:	41 30       	cpi	r20, 0x01	; 1
    1ecc:	51 05       	cpc	r21, r1
    1ece:	41 f1       	breq	.+80     	; 0x1f20 <MDIO_GetPinValue+0x78>
    1ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed4:	82 30       	cpi	r24, 0x02	; 2
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	34 f4       	brge	.+12     	; 0x1ee6 <MDIO_GetPinValue+0x3e>
    1eda:	2c 81       	ldd	r18, Y+4	; 0x04
    1edc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ede:	21 15       	cp	r18, r1
    1ee0:	31 05       	cpc	r19, r1
    1ee2:	61 f0       	breq	.+24     	; 0x1efc <MDIO_GetPinValue+0x54>
    1ee4:	52 c0       	rjmp	.+164    	; 0x1f8a <MDIO_GetPinValue+0xe2>
    1ee6:	4c 81       	ldd	r20, Y+4	; 0x04
    1ee8:	5d 81       	ldd	r21, Y+5	; 0x05
    1eea:	42 30       	cpi	r20, 0x02	; 2
    1eec:	51 05       	cpc	r21, r1
    1eee:	51 f1       	breq	.+84     	; 0x1f44 <MDIO_GetPinValue+0x9c>
    1ef0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef4:	83 30       	cpi	r24, 0x03	; 3
    1ef6:	91 05       	cpc	r25, r1
    1ef8:	b9 f1       	breq	.+110    	; 0x1f68 <MDIO_GetPinValue+0xc0>
    1efa:	47 c0       	rjmp	.+142    	; 0x1f8a <MDIO_GetPinValue+0xe2>
	case PORTA:
		value = GET_BIT(PINA_reg,copy_u8pin);
    1efc:	e9 e3       	ldi	r30, 0x39	; 57
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	a9 01       	movw	r20, r18
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <MDIO_GetPinValue+0x6c>
    1f10:	55 95       	asr	r21
    1f12:	47 95       	ror	r20
    1f14:	8a 95       	dec	r24
    1f16:	e2 f7       	brpl	.-8      	; 0x1f10 <MDIO_GetPinValue+0x68>
    1f18:	ca 01       	movw	r24, r20
    1f1a:	81 70       	andi	r24, 0x01	; 1
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	35 c0       	rjmp	.+106    	; 0x1f8a <MDIO_GetPinValue+0xe2>
		break;
	case PORTB:
		value = GET_BIT(PINB_reg,copy_u8pin);
    1f20:	e6 e3       	ldi	r30, 0x36	; 54
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	88 2f       	mov	r24, r24
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	a9 01       	movw	r20, r18
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <MDIO_GetPinValue+0x90>
    1f34:	55 95       	asr	r21
    1f36:	47 95       	ror	r20
    1f38:	8a 95       	dec	r24
    1f3a:	e2 f7       	brpl	.-8      	; 0x1f34 <MDIO_GetPinValue+0x8c>
    1f3c:	ca 01       	movw	r24, r20
    1f3e:	81 70       	andi	r24, 0x01	; 1
    1f40:	89 83       	std	Y+1, r24	; 0x01
    1f42:	23 c0       	rjmp	.+70     	; 0x1f8a <MDIO_GetPinValue+0xe2>
		break;
	case PORTC:
		value = GET_BIT(PINC_reg,copy_u8pin);
    1f44:	e3 e3       	ldi	r30, 0x33	; 51
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	88 2f       	mov	r24, r24
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	a9 01       	movw	r20, r18
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <MDIO_GetPinValue+0xb4>
    1f58:	55 95       	asr	r21
    1f5a:	47 95       	ror	r20
    1f5c:	8a 95       	dec	r24
    1f5e:	e2 f7       	brpl	.-8      	; 0x1f58 <MDIO_GetPinValue+0xb0>
    1f60:	ca 01       	movw	r24, r20
    1f62:	81 70       	andi	r24, 0x01	; 1
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	11 c0       	rjmp	.+34     	; 0x1f8a <MDIO_GetPinValue+0xe2>
		break;
	case PORTD:
		value = GET_BIT(PIND_reg,copy_u8pin);
    1f68:	e0 e3       	ldi	r30, 0x30	; 48
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	88 2f       	mov	r24, r24
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	a9 01       	movw	r20, r18
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <MDIO_GetPinValue+0xd8>
    1f7c:	55 95       	asr	r21
    1f7e:	47 95       	ror	r20
    1f80:	8a 95       	dec	r24
    1f82:	e2 f7       	brpl	.-8      	; 0x1f7c <MDIO_GetPinValue+0xd4>
    1f84:	ca 01       	movw	r24, r20
    1f86:	81 70       	andi	r24, 0x01	; 1
    1f88:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return value;
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <AVR_GIEInit>:
#include "MGIE_config.h"
#include "MGIE_interface.h"


void AVR_GIEInit(void)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
	switch (GIE_MODE)
	{
	case enable:
		SET_BIT(SREG, 7);
    1fa4:	af e5       	ldi	r26, 0x5F	; 95
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	ef e5       	ldi	r30, 0x5F	; 95
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	80 68       	ori	r24, 0x80	; 128
    1fb0:	8c 93       	st	X, r24
		break;
	case disable:
		CLR_BIT(SREG, 7);
		break;
	}
}
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <main>:
volatile u8 ADC_flag=0;


void GetADCValue(void);
int main ()
 {
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	60 97       	sbiw	r28, 0x10	; 16
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
	AVR_GIEInit();
    1fcc:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <AVR_GIEInit>
	HLCD_vInitLcd();
    1fd0:	0e 94 46 06 	call	0xc8c	; 0xc8c <HLCD_vInitLcd>

	u16 temprature = 0;
    1fd4:	18 8a       	std	Y+16, r1	; 0x10
    1fd6:	1f 86       	std	Y+15, r1	; 0x0f


	MADC_vAdcInit();
    1fd8:	0e 94 6f 0b 	call	0x16de	; 0x16de <MADC_vAdcInit>
	MADC_SetCallback(&GetADCValue);
    1fdc:	89 e8       	ldi	r24, 0x89	; 137
    1fde:	90 e1       	ldi	r25, 0x10	; 16
    1fe0:	0e 94 32 0c 	call	0x1864	; 0x1864 <MADC_SetCallback>
	MADC_enumStartConversionADC(ADC_CH0);
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	0e 94 0d 0c 	call	0x181a	; 0x181a <MADC_enumStartConversionADC>

	while (1) {
		if (ADC_flag == 1) {
    1fea:	80 91 70 00 	lds	r24, 0x0070
    1fee:	81 30       	cpi	r24, 0x01	; 1
    1ff0:	e9 f4       	brne	.+58     	; 0x202c <main+0x74>
			ADC_flag = 0;
    1ff2:	10 92 70 00 	sts	0x0070, r1
			temprature = (5000 * digital_value) / 1024;
    1ff6:	20 91 6e 00 	lds	r18, 0x006E
    1ffa:	30 91 6f 00 	lds	r19, 0x006F
    1ffe:	88 e8       	ldi	r24, 0x88	; 136
    2000:	93 e1       	ldi	r25, 0x13	; 19
    2002:	ac 01       	movw	r20, r24
    2004:	24 9f       	mul	r18, r20
    2006:	c0 01       	movw	r24, r0
    2008:	25 9f       	mul	r18, r21
    200a:	90 0d       	add	r25, r0
    200c:	34 9f       	mul	r19, r20
    200e:	90 0d       	add	r25, r0
    2010:	11 24       	eor	r1, r1
    2012:	89 2f       	mov	r24, r25
    2014:	99 27       	eor	r25, r25
    2016:	86 95       	lsr	r24
    2018:	86 95       	lsr	r24
    201a:	98 8b       	std	Y+16, r25	; 0x10
    201c:	8f 87       	std	Y+15, r24	; 0x0f
			HLCD_vSendCommand(Clear);
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_vSendCommand>
			HLCD_vWriteNumber(temprature);
    2024:	8f 85       	ldd	r24, Y+15	; 0x0f
    2026:	98 89       	ldd	r25, Y+16	; 0x10
    2028:	0e 94 40 0a 	call	0x1480	; 0x1480 <HLCD_vWriteNumber>
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a8 e4       	ldi	r26, 0x48	; 72
    2032:	b3 e4       	ldi	r27, 0x43	; 67
    2034:	8b 87       	std	Y+11, r24	; 0x0b
    2036:	9c 87       	std	Y+12, r25	; 0x0c
    2038:	ad 87       	std	Y+13, r26	; 0x0d
    203a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203c:	6b 85       	ldd	r22, Y+11	; 0x0b
    203e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2040:	8d 85       	ldd	r24, Y+13	; 0x0d
    2042:	9e 85       	ldd	r25, Y+14	; 0x0e
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	4a ef       	ldi	r20, 0xFA	; 250
    204a:	54 e4       	ldi	r21, 0x44	; 68
    204c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	8f 83       	std	Y+7, r24	; 0x07
    2056:	98 87       	std	Y+8, r25	; 0x08
    2058:	a9 87       	std	Y+9, r26	; 0x09
    205a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    205c:	6f 81       	ldd	r22, Y+7	; 0x07
    205e:	78 85       	ldd	r23, Y+8	; 0x08
    2060:	89 85       	ldd	r24, Y+9	; 0x09
    2062:	9a 85       	ldd	r25, Y+10	; 0x0a
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e8       	ldi	r20, 0x80	; 128
    206a:	5f e3       	ldi	r21, 0x3F	; 63
    206c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2070:	88 23       	and	r24, r24
    2072:	2c f4       	brge	.+10     	; 0x207e <main+0xc6>
		__ticks = 1;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	3f c0       	rjmp	.+126    	; 0x20fc <main+0x144>
	else if (__tmp > 65535)
    207e:	6f 81       	ldd	r22, Y+7	; 0x07
    2080:	78 85       	ldd	r23, Y+8	; 0x08
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	3f ef       	ldi	r19, 0xFF	; 255
    208a:	4f e7       	ldi	r20, 0x7F	; 127
    208c:	57 e4       	ldi	r21, 0x47	; 71
    208e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2092:	18 16       	cp	r1, r24
    2094:	4c f5       	brge	.+82     	; 0x20e8 <main+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2096:	6b 85       	ldd	r22, Y+11	; 0x0b
    2098:	7c 85       	ldd	r23, Y+12	; 0x0c
    209a:	8d 85       	ldd	r24, Y+13	; 0x0d
    209c:	9e 85       	ldd	r25, Y+14	; 0x0e
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e2       	ldi	r20, 0x20	; 32
    20a4:	51 e4       	ldi	r21, 0x41	; 65
    20a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9e 83       	std	Y+6, r25	; 0x06
    20bc:	8d 83       	std	Y+5, r24	; 0x05
    20be:	0f c0       	rjmp	.+30     	; 0x20de <main+0x126>
    20c0:	88 ec       	ldi	r24, 0xC8	; 200
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9c 83       	std	Y+4, r25	; 0x04
    20c6:	8b 83       	std	Y+3, r24	; 0x03
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	9c 81       	ldd	r25, Y+4	; 0x04
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <main+0x114>
    20d0:	9c 83       	std	Y+4, r25	; 0x04
    20d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d4:	8d 81       	ldd	r24, Y+5	; 0x05
    20d6:	9e 81       	ldd	r25, Y+6	; 0x06
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	9e 83       	std	Y+6, r25	; 0x06
    20dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20de:	8d 81       	ldd	r24, Y+5	; 0x05
    20e0:	9e 81       	ldd	r25, Y+6	; 0x06
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	69 f7       	brne	.-38     	; 0x20c0 <main+0x108>
    20e6:	81 cf       	rjmp	.-254    	; 0x1fea <main+0x32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ea:	78 85       	ldd	r23, Y+8	; 0x08
    20ec:	89 85       	ldd	r24, Y+9	; 0x09
    20ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	8d 83       	std	Y+5, r24	; 0x05
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <main+0x150>
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	6c cf       	rjmp	.-296    	; 0x1fea <main+0x32>

00002112 <GetADCValue>:
		_delay_ms(200);
	}

}
void GetADCValue(void)
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
	digital_value=MADC_u16ReadDataADC();
    211a:	0e 94 27 0c 	call	0x184e	; 0x184e <MADC_u16ReadDataADC>
    211e:	90 93 6f 00 	sts	0x006F, r25
    2122:	80 93 6e 00 	sts	0x006E, r24
	ADC_flag =1;
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	80 93 70 00 	sts	0x0070, r24
	MADC_enumStartConversionADC(ADC_CH0);
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	0e 94 0d 0c 	call	0x181a	; 0x181a <MADC_enumStartConversionADC>
}
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <__prologue_saves__>:
    2138:	2f 92       	push	r2
    213a:	3f 92       	push	r3
    213c:	4f 92       	push	r4
    213e:	5f 92       	push	r5
    2140:	6f 92       	push	r6
    2142:	7f 92       	push	r7
    2144:	8f 92       	push	r8
    2146:	9f 92       	push	r9
    2148:	af 92       	push	r10
    214a:	bf 92       	push	r11
    214c:	cf 92       	push	r12
    214e:	df 92       	push	r13
    2150:	ef 92       	push	r14
    2152:	ff 92       	push	r15
    2154:	0f 93       	push	r16
    2156:	1f 93       	push	r17
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	ca 1b       	sub	r28, r26
    2162:	db 0b       	sbc	r29, r27
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
    216e:	09 94       	ijmp

00002170 <__epilogue_restores__>:
    2170:	2a 88       	ldd	r2, Y+18	; 0x12
    2172:	39 88       	ldd	r3, Y+17	; 0x11
    2174:	48 88       	ldd	r4, Y+16	; 0x10
    2176:	5f 84       	ldd	r5, Y+15	; 0x0f
    2178:	6e 84       	ldd	r6, Y+14	; 0x0e
    217a:	7d 84       	ldd	r7, Y+13	; 0x0d
    217c:	8c 84       	ldd	r8, Y+12	; 0x0c
    217e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2180:	aa 84       	ldd	r10, Y+10	; 0x0a
    2182:	b9 84       	ldd	r11, Y+9	; 0x09
    2184:	c8 84       	ldd	r12, Y+8	; 0x08
    2186:	df 80       	ldd	r13, Y+7	; 0x07
    2188:	ee 80       	ldd	r14, Y+6	; 0x06
    218a:	fd 80       	ldd	r15, Y+5	; 0x05
    218c:	0c 81       	ldd	r16, Y+4	; 0x04
    218e:	1b 81       	ldd	r17, Y+3	; 0x03
    2190:	aa 81       	ldd	r26, Y+2	; 0x02
    2192:	b9 81       	ldd	r27, Y+1	; 0x01
    2194:	ce 0f       	add	r28, r30
    2196:	d1 1d       	adc	r29, r1
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	ed 01       	movw	r28, r26
    21a4:	08 95       	ret

000021a6 <itoa>:
    21a6:	fb 01       	movw	r30, r22
    21a8:	9f 01       	movw	r18, r30
    21aa:	e8 94       	clt
    21ac:	42 30       	cpi	r20, 0x02	; 2
    21ae:	c4 f0       	brlt	.+48     	; 0x21e0 <itoa+0x3a>
    21b0:	45 32       	cpi	r20, 0x25	; 37
    21b2:	b4 f4       	brge	.+44     	; 0x21e0 <itoa+0x3a>
    21b4:	4a 30       	cpi	r20, 0x0A	; 10
    21b6:	29 f4       	brne	.+10     	; 0x21c2 <itoa+0x1c>
    21b8:	97 fb       	bst	r25, 7
    21ba:	1e f4       	brtc	.+6      	; 0x21c2 <itoa+0x1c>
    21bc:	90 95       	com	r25
    21be:	81 95       	neg	r24
    21c0:	9f 4f       	sbci	r25, 0xFF	; 255
    21c2:	64 2f       	mov	r22, r20
    21c4:	77 27       	eor	r23, r23
    21c6:	0e 94 04 11 	call	0x2208	; 0x2208 <__udivmodhi4>
    21ca:	80 5d       	subi	r24, 0xD0	; 208
    21cc:	8a 33       	cpi	r24, 0x3A	; 58
    21ce:	0c f0       	brlt	.+2      	; 0x21d2 <itoa+0x2c>
    21d0:	89 5d       	subi	r24, 0xD9	; 217
    21d2:	81 93       	st	Z+, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	a1 f7       	brne	.-24     	; 0x21c2 <itoa+0x1c>
    21da:	16 f4       	brtc	.+4      	; 0x21e0 <itoa+0x3a>
    21dc:	5d e2       	ldi	r21, 0x2D	; 45
    21de:	51 93       	st	Z+, r21
    21e0:	10 82       	st	Z, r1
    21e2:	c9 01       	movw	r24, r18
    21e4:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <strrev>

000021e8 <strrev>:
    21e8:	dc 01       	movw	r26, r24
    21ea:	fc 01       	movw	r30, r24
    21ec:	67 2f       	mov	r22, r23
    21ee:	71 91       	ld	r23, Z+
    21f0:	77 23       	and	r23, r23
    21f2:	e1 f7       	brne	.-8      	; 0x21ec <strrev+0x4>
    21f4:	32 97       	sbiw	r30, 0x02	; 2
    21f6:	04 c0       	rjmp	.+8      	; 0x2200 <strrev+0x18>
    21f8:	7c 91       	ld	r23, X
    21fa:	6d 93       	st	X+, r22
    21fc:	70 83       	st	Z, r23
    21fe:	62 91       	ld	r22, -Z
    2200:	ae 17       	cp	r26, r30
    2202:	bf 07       	cpc	r27, r31
    2204:	c8 f3       	brcs	.-14     	; 0x21f8 <strrev+0x10>
    2206:	08 95       	ret

00002208 <__udivmodhi4>:
    2208:	aa 1b       	sub	r26, r26
    220a:	bb 1b       	sub	r27, r27
    220c:	51 e1       	ldi	r21, 0x11	; 17
    220e:	07 c0       	rjmp	.+14     	; 0x221e <__udivmodhi4_ep>

00002210 <__udivmodhi4_loop>:
    2210:	aa 1f       	adc	r26, r26
    2212:	bb 1f       	adc	r27, r27
    2214:	a6 17       	cp	r26, r22
    2216:	b7 07       	cpc	r27, r23
    2218:	10 f0       	brcs	.+4      	; 0x221e <__udivmodhi4_ep>
    221a:	a6 1b       	sub	r26, r22
    221c:	b7 0b       	sbc	r27, r23

0000221e <__udivmodhi4_ep>:
    221e:	88 1f       	adc	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	5a 95       	dec	r21
    2224:	a9 f7       	brne	.-22     	; 0x2210 <__udivmodhi4_loop>
    2226:	80 95       	com	r24
    2228:	90 95       	com	r25
    222a:	bc 01       	movw	r22, r24
    222c:	cd 01       	movw	r24, r26
    222e:	08 95       	ret

00002230 <_exit>:
    2230:	f8 94       	cli

00002232 <__stop_program>:
    2232:	ff cf       	rjmp	.-2      	; 0x2232 <__stop_program>
