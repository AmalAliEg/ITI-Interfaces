
kepad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000021a4  00002218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001a04  00000000  00000000  00002234  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000de1  00000000  00000000  00003c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004a19  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006912  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000077fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000085ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000870c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008999  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009167  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 3e 10 	call	0x207c	; 0x207c <main>
      7a:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <MDIO_vSetPortDirection>:
 * 	function inputs:	Port number , value to be input  or output
 * 	function outputs:	DIO_ErrorStatus
 */
/************************************************************************************************************/
DIO_ErrorStatus MDIO_vSetPortDirection( u8 copy_u8port,u8 copy_u8PortDirection)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <MDIO_vSetPortDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <MDIO_vSetPortDirection+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	8a 83       	std	Y+2, r24	; 0x02
     b46:	6b 83       	std	Y+3, r22	; 0x03
	/*create local enum state for this function */
	DIO_ErrorStatus Local_enumState=DIO_Ok;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	89 83       	std	Y+1, r24	; 0x01
	/*check the validation range of ports and pins*/
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD))
     b4c:	8a 81       	ldd	r24, Y+2	; 0x02
     b4e:	84 30       	cpi	r24, 0x04	; 4
     b50:	98 f5       	brcc	.+102    	; 0xbb8 <MDIO_vSetPortDirection+0x82>
	{
		/*check the chosen port*/
		switch (copy_u8port)
     b52:	8a 81       	ldd	r24, Y+2	; 0x02
     b54:	28 2f       	mov	r18, r24
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	3d 83       	std	Y+5, r19	; 0x05
     b5a:	2c 83       	std	Y+4, r18	; 0x04
     b5c:	8c 81       	ldd	r24, Y+4	; 0x04
     b5e:	9d 81       	ldd	r25, Y+5	; 0x05
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	91 05       	cpc	r25, r1
     b64:	d1 f0       	breq	.+52     	; 0xb9a <MDIO_vSetPortDirection+0x64>
     b66:	2c 81       	ldd	r18, Y+4	; 0x04
     b68:	3d 81       	ldd	r19, Y+5	; 0x05
     b6a:	22 30       	cpi	r18, 0x02	; 2
     b6c:	31 05       	cpc	r19, r1
     b6e:	2c f4       	brge	.+10     	; 0xb7a <MDIO_vSetPortDirection+0x44>
     b70:	8c 81       	ldd	r24, Y+4	; 0x04
     b72:	9d 81       	ldd	r25, Y+5	; 0x05
     b74:	00 97       	sbiw	r24, 0x00	; 0
     b76:	61 f0       	breq	.+24     	; 0xb90 <MDIO_vSetPortDirection+0x5a>
     b78:	20 c0       	rjmp	.+64     	; 0xbba <MDIO_vSetPortDirection+0x84>
     b7a:	2c 81       	ldd	r18, Y+4	; 0x04
     b7c:	3d 81       	ldd	r19, Y+5	; 0x05
     b7e:	22 30       	cpi	r18, 0x02	; 2
     b80:	31 05       	cpc	r19, r1
     b82:	81 f0       	breq	.+32     	; 0xba4 <MDIO_vSetPortDirection+0x6e>
     b84:	8c 81       	ldd	r24, Y+4	; 0x04
     b86:	9d 81       	ldd	r25, Y+5	; 0x05
     b88:	83 30       	cpi	r24, 0x03	; 3
     b8a:	91 05       	cpc	r25, r1
     b8c:	81 f0       	breq	.+32     	; 0xbae <MDIO_vSetPortDirection+0x78>
     b8e:	15 c0       	rjmp	.+42     	; 0xbba <MDIO_vSetPortDirection+0x84>
		{
		case PORTA:	DDRA_reg = copy_u8PortDirection;	break;
     b90:	ea e3       	ldi	r30, 0x3A	; 58
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	80 83       	st	Z, r24
     b98:	10 c0       	rjmp	.+32     	; 0xbba <MDIO_vSetPortDirection+0x84>
		case PORTB:	DDRB_reg = copy_u8PortDirection;	break;
     b9a:	e7 e3       	ldi	r30, 0x37	; 55
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	80 83       	st	Z, r24
     ba2:	0b c0       	rjmp	.+22     	; 0xbba <MDIO_vSetPortDirection+0x84>
		case PORTC:	DDRC_reg = copy_u8PortDirection;	break;
     ba4:	e4 e3       	ldi	r30, 0x34	; 52
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	80 83       	st	Z, r24
     bac:	06 c0       	rjmp	.+12     	; 0xbba <MDIO_vSetPortDirection+0x84>
		case PORTD:	DDRD_reg = copy_u8PortDirection;	break;
     bae:	e1 e3       	ldi	r30, 0x31	; 49
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	80 83       	st	Z, r24
     bb6:	01 c0       	rjmp	.+2      	; 0xbba <MDIO_vSetPortDirection+0x84>
		}
	}
	else
	{
		Local_enumState=DIO_NOK;
     bb8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enumState;
     bba:	89 81       	ldd	r24, Y+1	; 0x01
}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <MDIO_vSetPortValue>:
 * 	function inputs:	Port number , value to be high or low
 * 	function outputs:	DIO_ErrorStatus
 */
/************************************************************************************************************/
DIO_ErrorStatus MDIO_vSetPortValue( u8 copy_u8port,u8 copy_u8PortValue)
{
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <MDIO_vSetPortValue+0x6>
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <MDIO_vSetPortValue+0x8>
     bd4:	0f 92       	push	r0
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	8a 83       	std	Y+2, r24	; 0x02
     bdc:	6b 83       	std	Y+3, r22	; 0x03
	/*create local enum state for this function */
	DIO_ErrorStatus Local_enumState=DIO_Ok;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	89 83       	std	Y+1, r24	; 0x01
	/*check the validation range of ports and pins*/
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD))
     be2:	8a 81       	ldd	r24, Y+2	; 0x02
     be4:	84 30       	cpi	r24, 0x04	; 4
     be6:	98 f5       	brcc	.+102    	; 0xc4e <MDIO_vSetPortValue+0x82>
	{
		/*check the chosen port*/
		switch (copy_u8port)
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	3d 83       	std	Y+5, r19	; 0x05
     bf0:	2c 83       	std	Y+4, r18	; 0x04
     bf2:	8c 81       	ldd	r24, Y+4	; 0x04
     bf4:	9d 81       	ldd	r25, Y+5	; 0x05
     bf6:	81 30       	cpi	r24, 0x01	; 1
     bf8:	91 05       	cpc	r25, r1
     bfa:	d1 f0       	breq	.+52     	; 0xc30 <MDIO_vSetPortValue+0x64>
     bfc:	2c 81       	ldd	r18, Y+4	; 0x04
     bfe:	3d 81       	ldd	r19, Y+5	; 0x05
     c00:	22 30       	cpi	r18, 0x02	; 2
     c02:	31 05       	cpc	r19, r1
     c04:	2c f4       	brge	.+10     	; 0xc10 <MDIO_vSetPortValue+0x44>
     c06:	8c 81       	ldd	r24, Y+4	; 0x04
     c08:	9d 81       	ldd	r25, Y+5	; 0x05
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	61 f0       	breq	.+24     	; 0xc26 <MDIO_vSetPortValue+0x5a>
     c0e:	20 c0       	rjmp	.+64     	; 0xc50 <MDIO_vSetPortValue+0x84>
     c10:	2c 81       	ldd	r18, Y+4	; 0x04
     c12:	3d 81       	ldd	r19, Y+5	; 0x05
     c14:	22 30       	cpi	r18, 0x02	; 2
     c16:	31 05       	cpc	r19, r1
     c18:	81 f0       	breq	.+32     	; 0xc3a <MDIO_vSetPortValue+0x6e>
     c1a:	8c 81       	ldd	r24, Y+4	; 0x04
     c1c:	9d 81       	ldd	r25, Y+5	; 0x05
     c1e:	83 30       	cpi	r24, 0x03	; 3
     c20:	91 05       	cpc	r25, r1
     c22:	81 f0       	breq	.+32     	; 0xc44 <MDIO_vSetPortValue+0x78>
     c24:	15 c0       	rjmp	.+42     	; 0xc50 <MDIO_vSetPortValue+0x84>
		{
		case PORTA:	PORTA_reg = copy_u8PortValue;	break;
     c26:	eb e3       	ldi	r30, 0x3B	; 59
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	80 83       	st	Z, r24
     c2e:	10 c0       	rjmp	.+32     	; 0xc50 <MDIO_vSetPortValue+0x84>
		case PORTB:	PORTB_reg = copy_u8PortValue;	break;
     c30:	e8 e3       	ldi	r30, 0x38	; 56
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	80 83       	st	Z, r24
     c38:	0b c0       	rjmp	.+22     	; 0xc50 <MDIO_vSetPortValue+0x84>
		case PORTC:	PORTC_reg = copy_u8PortValue;	break;
     c3a:	e5 e3       	ldi	r30, 0x35	; 53
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	80 83       	st	Z, r24
     c42:	06 c0       	rjmp	.+12     	; 0xc50 <MDIO_vSetPortValue+0x84>
		case PORTD:	PORTD_reg = copy_u8PortValue;	break;
     c44:	e2 e3       	ldi	r30, 0x32	; 50
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	80 83       	st	Z, r24
     c4c:	01 c0       	rjmp	.+2      	; 0xc50 <MDIO_vSetPortValue+0x84>
		}
	}
	else
	{
		Local_enumState=DIO_NOK;
     c4e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enumState;
     c50:	89 81       	ldd	r24, Y+1	; 0x01
}
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <MDIO_GetPortValue>:
/*	function name:		u8 MDIO_GetPortValue( u8 copy_u8port)
 * 	function inputs:	Port number
 * 	function outputs:	value is is high or low
 */
/************************************************************************************************************/
u8 MDIO_GetPortValue( u8 copy_u8port){
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	00 d0       	rcall	.+0      	; 0xc68 <MDIO_GetPortValue+0x6>
     c68:	00 d0       	rcall	.+0      	; 0xc6a <MDIO_GetPortValue+0x8>
     c6a:	0f 92       	push	r0
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	8a 83       	std	Y+2, r24	; 0x02
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD)) {
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	84 30       	cpi	r24, 0x04	; 4
     c76:	b8 f5       	brcc	.+110    	; 0xce6 <MDIO_GetPortValue+0x84>
		u8 value = 0;
     c78:	19 82       	std	Y+1, r1	; 0x01
		switch (copy_u8port) {
     c7a:	8a 81       	ldd	r24, Y+2	; 0x02
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	3c 83       	std	Y+4, r19	; 0x04
     c82:	2b 83       	std	Y+3, r18	; 0x03
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	9c 81       	ldd	r25, Y+4	; 0x04
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	91 05       	cpc	r25, r1
     c8c:	d1 f0       	breq	.+52     	; 0xcc2 <MDIO_GetPortValue+0x60>
     c8e:	2b 81       	ldd	r18, Y+3	; 0x03
     c90:	3c 81       	ldd	r19, Y+4	; 0x04
     c92:	22 30       	cpi	r18, 0x02	; 2
     c94:	31 05       	cpc	r19, r1
     c96:	2c f4       	brge	.+10     	; 0xca2 <MDIO_GetPortValue+0x40>
     c98:	8b 81       	ldd	r24, Y+3	; 0x03
     c9a:	9c 81       	ldd	r25, Y+4	; 0x04
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	61 f0       	breq	.+24     	; 0xcb8 <MDIO_GetPortValue+0x56>
     ca0:	1e c0       	rjmp	.+60     	; 0xcde <MDIO_GetPortValue+0x7c>
     ca2:	2b 81       	ldd	r18, Y+3	; 0x03
     ca4:	3c 81       	ldd	r19, Y+4	; 0x04
     ca6:	22 30       	cpi	r18, 0x02	; 2
     ca8:	31 05       	cpc	r19, r1
     caa:	81 f0       	breq	.+32     	; 0xccc <MDIO_GetPortValue+0x6a>
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	9c 81       	ldd	r25, Y+4	; 0x04
     cb0:	83 30       	cpi	r24, 0x03	; 3
     cb2:	91 05       	cpc	r25, r1
     cb4:	81 f0       	breq	.+32     	; 0xcd6 <MDIO_GetPortValue+0x74>
     cb6:	13 c0       	rjmp	.+38     	; 0xcde <MDIO_GetPortValue+0x7c>
		case PORTA:
			value = PINA_reg;
     cb8:	e9 e3       	ldi	r30, 0x39	; 57
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	89 83       	std	Y+1, r24	; 0x01
     cc0:	0e c0       	rjmp	.+28     	; 0xcde <MDIO_GetPortValue+0x7c>
			break;
		case PORTB:
			value = PINB_reg;
     cc2:	e6 e3       	ldi	r30, 0x36	; 54
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	89 83       	std	Y+1, r24	; 0x01
     cca:	09 c0       	rjmp	.+18     	; 0xcde <MDIO_GetPortValue+0x7c>
			break;
		case PORTC:
			value = PINC_reg;
     ccc:	e3 e3       	ldi	r30, 0x33	; 51
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	89 83       	std	Y+1, r24	; 0x01
     cd4:	04 c0       	rjmp	.+8      	; 0xcde <MDIO_GetPortValue+0x7c>
			break;
		case PORTD:
			value = PIND_reg;
     cd6:	e0 e3       	ldi	r30, 0x30	; 48
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		return value;
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	8d 83       	std	Y+5, r24	; 0x05
	}
}
     ce2:	8d 81       	ldd	r24, Y+5	; 0x05
     ce4:	00 c0       	rjmp	.+0      	; 0xce6 <MDIO_GetPortValue+0x84>
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <MDIO_vSetPinDirection>:
 * 	function inputs:	Port number , pin number ,value to be input  or output
 * 	function outputs:	DIO_ErrorStatus
 */
/************************************************************************************************************/
DIO_ErrorStatus MDIO_vSetPinDirection( u8 copy_u8port,u8 copy_u8pin, u8 copy_u8PinDirection)
{
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	28 97       	sbiw	r28, 0x08	; 8
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	8a 83       	std	Y+2, r24	; 0x02
     d0c:	6b 83       	std	Y+3, r22	; 0x03
     d0e:	4c 83       	std	Y+4, r20	; 0x04
	/*create local var. from Error state*/
	DIO_ErrorStatus Local_enumState=DIO_Ok;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	89 83       	std	Y+1, r24	; 0x01
	/*check the validation range of ports and pins */
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD) && (copy_u8pin >= PIN0)
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	84 30       	cpi	r24, 0x04	; 4
     d18:	08 f0       	brcs	.+2      	; 0xd1c <MDIO_vSetPinDirection+0x26>
     d1a:	f1 c0       	rjmp	.+482    	; 0xefe <MDIO_vSetPinDirection+0x208>
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	88 30       	cpi	r24, 0x08	; 8
     d20:	08 f0       	brcs	.+2      	; 0xd24 <MDIO_vSetPinDirection+0x2e>
     d22:	ed c0       	rjmp	.+474    	; 0xefe <MDIO_vSetPinDirection+0x208>
			&& (copy_u8pin <= PIN7))
	{
		/*check DDR reg. direction if it is output */
		if (copy_u8PinDirection == DIO_OUTPUT)
     d24:	8c 81       	ldd	r24, Y+4	; 0x04
     d26:	8f 3f       	cpi	r24, 0xFF	; 255
     d28:	09 f0       	breq	.+2      	; 0xd2c <MDIO_vSetPinDirection+0x36>
     d2a:	6f c0       	rjmp	.+222    	; 0xe0a <MDIO_vSetPinDirection+0x114>
		{
			/*check the chosen port*/
			switch (copy_u8port)
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	38 87       	std	Y+8, r19	; 0x08
     d34:	2f 83       	std	Y+7, r18	; 0x07
     d36:	8f 81       	ldd	r24, Y+7	; 0x07
     d38:	98 85       	ldd	r25, Y+8	; 0x08
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	91 05       	cpc	r25, r1
     d3e:	49 f1       	breq	.+82     	; 0xd92 <MDIO_vSetPinDirection+0x9c>
     d40:	2f 81       	ldd	r18, Y+7	; 0x07
     d42:	38 85       	ldd	r19, Y+8	; 0x08
     d44:	22 30       	cpi	r18, 0x02	; 2
     d46:	31 05       	cpc	r19, r1
     d48:	2c f4       	brge	.+10     	; 0xd54 <MDIO_vSetPinDirection+0x5e>
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	98 85       	ldd	r25, Y+8	; 0x08
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	61 f0       	breq	.+24     	; 0xd6a <MDIO_vSetPinDirection+0x74>
     d52:	d6 c0       	rjmp	.+428    	; 0xf00 <MDIO_vSetPinDirection+0x20a>
     d54:	2f 81       	ldd	r18, Y+7	; 0x07
     d56:	38 85       	ldd	r19, Y+8	; 0x08
     d58:	22 30       	cpi	r18, 0x02	; 2
     d5a:	31 05       	cpc	r19, r1
     d5c:	71 f1       	breq	.+92     	; 0xdba <MDIO_vSetPinDirection+0xc4>
     d5e:	8f 81       	ldd	r24, Y+7	; 0x07
     d60:	98 85       	ldd	r25, Y+8	; 0x08
     d62:	83 30       	cpi	r24, 0x03	; 3
     d64:	91 05       	cpc	r25, r1
     d66:	e9 f1       	breq	.+122    	; 0xde2 <MDIO_vSetPinDirection+0xec>
     d68:	cb c0       	rjmp	.+406    	; 0xf00 <MDIO_vSetPinDirection+0x20a>
			{
			case PORTA:	SET_BIT(DDRA_reg, copy_u8pin);	break;
     d6a:	aa e3       	ldi	r26, 0x3A	; 58
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	ea e3       	ldi	r30, 0x3A	; 58
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	48 2f       	mov	r20, r24
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <MDIO_vSetPinDirection+0x92>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <MDIO_vSetPinDirection+0x8e>
     d8c:	84 2b       	or	r24, r20
     d8e:	8c 93       	st	X, r24
     d90:	b7 c0       	rjmp	.+366    	; 0xf00 <MDIO_vSetPinDirection+0x20a>
			case PORTB:	SET_BIT(DDRB_reg, copy_u8pin);	break;
     d92:	a7 e3       	ldi	r26, 0x37	; 55
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e7 e3       	ldi	r30, 0x37	; 55
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <MDIO_vSetPinDirection+0xba>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <MDIO_vSetPinDirection+0xb6>
     db4:	84 2b       	or	r24, r20
     db6:	8c 93       	st	X, r24
     db8:	a3 c0       	rjmp	.+326    	; 0xf00 <MDIO_vSetPinDirection+0x20a>
			case PORTC:	SET_BIT(DDRC_reg, copy_u8pin);	break;
     dba:	a4 e3       	ldi	r26, 0x34	; 52
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e4 e3       	ldi	r30, 0x34	; 52
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <MDIO_vSetPinDirection+0xe2>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <MDIO_vSetPinDirection+0xde>
     ddc:	84 2b       	or	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	8f c0       	rjmp	.+286    	; 0xf00 <MDIO_vSetPinDirection+0x20a>
			case PORTD:	SET_BIT(DDRD_reg, copy_u8pin);	break;
     de2:	a1 e3       	ldi	r26, 0x31	; 49
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e1 e3       	ldi	r30, 0x31	; 49
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <MDIO_vSetPinDirection+0x10a>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <MDIO_vSetPinDirection+0x106>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	7b c0       	rjmp	.+246    	; 0xf00 <MDIO_vSetPinDirection+0x20a>
			}
		}
		/*check DDR reg. direction if it is input */
		else if (copy_u8PinDirection == DIO_INPUT)
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	88 23       	and	r24, r24
     e0e:	09 f0       	breq	.+2      	; 0xe12 <MDIO_vSetPinDirection+0x11c>
     e10:	74 c0       	rjmp	.+232    	; 0xefa <MDIO_vSetPinDirection+0x204>
		{
			/*check the chosen port*/
			switch (copy_u8port)
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	3e 83       	std	Y+6, r19	; 0x06
     e1a:	2d 83       	std	Y+5, r18	; 0x05
     e1c:	8d 81       	ldd	r24, Y+5	; 0x05
     e1e:	9e 81       	ldd	r25, Y+6	; 0x06
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	91 05       	cpc	r25, r1
     e24:	59 f1       	breq	.+86     	; 0xe7c <MDIO_vSetPinDirection+0x186>
     e26:	2d 81       	ldd	r18, Y+5	; 0x05
     e28:	3e 81       	ldd	r19, Y+6	; 0x06
     e2a:	22 30       	cpi	r18, 0x02	; 2
     e2c:	31 05       	cpc	r19, r1
     e2e:	2c f4       	brge	.+10     	; 0xe3a <MDIO_vSetPinDirection+0x144>
     e30:	8d 81       	ldd	r24, Y+5	; 0x05
     e32:	9e 81       	ldd	r25, Y+6	; 0x06
     e34:	00 97       	sbiw	r24, 0x00	; 0
     e36:	69 f0       	breq	.+26     	; 0xe52 <MDIO_vSetPinDirection+0x15c>
     e38:	63 c0       	rjmp	.+198    	; 0xf00 <MDIO_vSetPinDirection+0x20a>
     e3a:	2d 81       	ldd	r18, Y+5	; 0x05
     e3c:	3e 81       	ldd	r19, Y+6	; 0x06
     e3e:	22 30       	cpi	r18, 0x02	; 2
     e40:	31 05       	cpc	r19, r1
     e42:	89 f1       	breq	.+98     	; 0xea6 <MDIO_vSetPinDirection+0x1b0>
     e44:	8d 81       	ldd	r24, Y+5	; 0x05
     e46:	9e 81       	ldd	r25, Y+6	; 0x06
     e48:	83 30       	cpi	r24, 0x03	; 3
     e4a:	91 05       	cpc	r25, r1
     e4c:	09 f4       	brne	.+2      	; 0xe50 <MDIO_vSetPinDirection+0x15a>
     e4e:	40 c0       	rjmp	.+128    	; 0xed0 <MDIO_vSetPinDirection+0x1da>
     e50:	57 c0       	rjmp	.+174    	; 0xf00 <MDIO_vSetPinDirection+0x20a>
			{
			case PORTA:	CLR_BIT(DDRA_reg, copy_u8pin);	break;
     e52:	aa e3       	ldi	r26, 0x3A	; 58
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ea e3       	ldi	r30, 0x3A	; 58
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <MDIO_vSetPinDirection+0x17a>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <MDIO_vSetPinDirection+0x176>
     e74:	80 95       	com	r24
     e76:	84 23       	and	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	42 c0       	rjmp	.+132    	; 0xf00 <MDIO_vSetPinDirection+0x20a>
			case PORTB:	CLR_BIT(DDRB_reg, copy_u8pin);	break;
     e7c:	a7 e3       	ldi	r26, 0x37	; 55
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e7 e3       	ldi	r30, 0x37	; 55
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <MDIO_vSetPinDirection+0x1a4>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <MDIO_vSetPinDirection+0x1a0>
     e9e:	80 95       	com	r24
     ea0:	84 23       	and	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	2d c0       	rjmp	.+90     	; 0xf00 <MDIO_vSetPinDirection+0x20a>
			case PORTC:	CLR_BIT(DDRC_reg, copy_u8pin);	break;
     ea6:	a4 e3       	ldi	r26, 0x34	; 52
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e4 e3       	ldi	r30, 0x34	; 52
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <MDIO_vSetPinDirection+0x1ce>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <MDIO_vSetPinDirection+0x1ca>
     ec8:	80 95       	com	r24
     eca:	84 23       	and	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	18 c0       	rjmp	.+48     	; 0xf00 <MDIO_vSetPinDirection+0x20a>
			case PORTD:	CLR_BIT(DDRD_reg, copy_u8pin);	break;
     ed0:	a1 e3       	ldi	r26, 0x31	; 49
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e1 e3       	ldi	r30, 0x31	; 49
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <MDIO_vSetPinDirection+0x1f8>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <MDIO_vSetPinDirection+0x1f4>
     ef2:	80 95       	com	r24
     ef4:	84 23       	and	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <MDIO_vSetPinDirection+0x20a>
			}
		}
		else
		{
			Local_enumState=DIO_NOK;
     efa:	19 82       	std	Y+1, r1	; 0x01
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <MDIO_vSetPinDirection+0x20a>
		}
	}
	else
	{
		Local_enumState=DIO_NOK;
     efe:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enumState;
     f00:	89 81       	ldd	r24, Y+1	; 0x01
}
     f02:	28 96       	adiw	r28, 0x08	; 8
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	de bf       	out	0x3e, r29	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	cd bf       	out	0x3d, r28	; 61
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <MDIO_vSetPinValue>:
 * 	function inputs:	Port number , pin number, value to be high or low
 * 	function outputs:	DIO_ErrorStatus
 */
/************************************************************************************************************/
DIO_ErrorStatus MDIO_vSetPinValue( u8 copy_u8port,u8 copy_u8pin, u8 copy_u8PinValue)
 {
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	28 97       	sbiw	r28, 0x08	; 8
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	8a 83       	std	Y+2, r24	; 0x02
     f2a:	6b 83       	std	Y+3, r22	; 0x03
     f2c:	4c 83       	std	Y+4, r20	; 0x04
	/*create local var. from Error state*/
	DIO_ErrorStatus Local_enumState=DIO_Ok;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	89 83       	std	Y+1, r24	; 0x01
	/*check the validation range of ports and pins */
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD) && (copy_u8pin >= PIN0)
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	84 30       	cpi	r24, 0x04	; 4
     f36:	08 f0       	brcs	.+2      	; 0xf3a <MDIO_vSetPinValue+0x26>
     f38:	f1 c0       	rjmp	.+482    	; 0x111c <MDIO_vSetPinValue+0x208>
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	88 30       	cpi	r24, 0x08	; 8
     f3e:	08 f0       	brcs	.+2      	; 0xf42 <MDIO_vSetPinValue+0x2e>
     f40:	ed c0       	rjmp	.+474    	; 0x111c <MDIO_vSetPinValue+0x208>
			&& (copy_u8pin <= PIN7)) {
		/*check PORT reg. value if it is high */
		if (copy_u8PinValue == DIO_HIGH) {
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	09 f0       	breq	.+2      	; 0xf4a <MDIO_vSetPinValue+0x36>
     f48:	6f c0       	rjmp	.+222    	; 0x1028 <MDIO_vSetPinValue+0x114>
			switch (copy_u8port)
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	38 87       	std	Y+8, r19	; 0x08
     f52:	2f 83       	std	Y+7, r18	; 0x07
     f54:	8f 81       	ldd	r24, Y+7	; 0x07
     f56:	98 85       	ldd	r25, Y+8	; 0x08
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	91 05       	cpc	r25, r1
     f5c:	49 f1       	breq	.+82     	; 0xfb0 <MDIO_vSetPinValue+0x9c>
     f5e:	2f 81       	ldd	r18, Y+7	; 0x07
     f60:	38 85       	ldd	r19, Y+8	; 0x08
     f62:	22 30       	cpi	r18, 0x02	; 2
     f64:	31 05       	cpc	r19, r1
     f66:	2c f4       	brge	.+10     	; 0xf72 <MDIO_vSetPinValue+0x5e>
     f68:	8f 81       	ldd	r24, Y+7	; 0x07
     f6a:	98 85       	ldd	r25, Y+8	; 0x08
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	61 f0       	breq	.+24     	; 0xf88 <MDIO_vSetPinValue+0x74>
     f70:	d6 c0       	rjmp	.+428    	; 0x111e <MDIO_vSetPinValue+0x20a>
     f72:	2f 81       	ldd	r18, Y+7	; 0x07
     f74:	38 85       	ldd	r19, Y+8	; 0x08
     f76:	22 30       	cpi	r18, 0x02	; 2
     f78:	31 05       	cpc	r19, r1
     f7a:	71 f1       	breq	.+92     	; 0xfd8 <MDIO_vSetPinValue+0xc4>
     f7c:	8f 81       	ldd	r24, Y+7	; 0x07
     f7e:	98 85       	ldd	r25, Y+8	; 0x08
     f80:	83 30       	cpi	r24, 0x03	; 3
     f82:	91 05       	cpc	r25, r1
     f84:	e9 f1       	breq	.+122    	; 0x1000 <MDIO_vSetPinValue+0xec>
     f86:	cb c0       	rjmp	.+406    	; 0x111e <MDIO_vSetPinValue+0x20a>
			{
			case PORTA:	SET_BIT(PORTA_reg, copy_u8pin);	break;
     f88:	ab e3       	ldi	r26, 0x3B	; 59
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	eb e3       	ldi	r30, 0x3B	; 59
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <MDIO_vSetPinValue+0x92>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <MDIO_vSetPinValue+0x8e>
     faa:	84 2b       	or	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	b7 c0       	rjmp	.+366    	; 0x111e <MDIO_vSetPinValue+0x20a>
			case PORTB:	SET_BIT(PORTB_reg, copy_u8pin);	break;
     fb0:	a8 e3       	ldi	r26, 0x38	; 56
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e8 e3       	ldi	r30, 0x38	; 56
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <MDIO_vSetPinValue+0xba>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <MDIO_vSetPinValue+0xb6>
     fd2:	84 2b       	or	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	a3 c0       	rjmp	.+326    	; 0x111e <MDIO_vSetPinValue+0x20a>
			case PORTC:	SET_BIT(PORTC_reg, copy_u8pin);	break;
     fd8:	a5 e3       	ldi	r26, 0x35	; 53
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e5 e3       	ldi	r30, 0x35	; 53
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <MDIO_vSetPinValue+0xe2>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <MDIO_vSetPinValue+0xde>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	8f c0       	rjmp	.+286    	; 0x111e <MDIO_vSetPinValue+0x20a>
			case PORTD:	SET_BIT(PORTD_reg, copy_u8pin);	break;
    1000:	a2 e3       	ldi	r26, 0x32	; 50
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e2 e3       	ldi	r30, 0x32	; 50
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <MDIO_vSetPinValue+0x10a>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <MDIO_vSetPinValue+0x106>
    1022:	84 2b       	or	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	7b c0       	rjmp	.+246    	; 0x111e <MDIO_vSetPinValue+0x20a>
			}
		}
		/*check PORT reg. value if it is low */
		else if (copy_u8PinValue == DIO_LOW) {
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	88 23       	and	r24, r24
    102c:	09 f0       	breq	.+2      	; 0x1030 <MDIO_vSetPinValue+0x11c>
    102e:	74 c0       	rjmp	.+232    	; 0x1118 <MDIO_vSetPinValue+0x204>
			switch (copy_u8port) {
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	3e 83       	std	Y+6, r19	; 0x06
    1038:	2d 83       	std	Y+5, r18	; 0x05
    103a:	8d 81       	ldd	r24, Y+5	; 0x05
    103c:	9e 81       	ldd	r25, Y+6	; 0x06
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	91 05       	cpc	r25, r1
    1042:	59 f1       	breq	.+86     	; 0x109a <MDIO_vSetPinValue+0x186>
    1044:	2d 81       	ldd	r18, Y+5	; 0x05
    1046:	3e 81       	ldd	r19, Y+6	; 0x06
    1048:	22 30       	cpi	r18, 0x02	; 2
    104a:	31 05       	cpc	r19, r1
    104c:	2c f4       	brge	.+10     	; 0x1058 <MDIO_vSetPinValue+0x144>
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	69 f0       	breq	.+26     	; 0x1070 <MDIO_vSetPinValue+0x15c>
    1056:	63 c0       	rjmp	.+198    	; 0x111e <MDIO_vSetPinValue+0x20a>
    1058:	2d 81       	ldd	r18, Y+5	; 0x05
    105a:	3e 81       	ldd	r19, Y+6	; 0x06
    105c:	22 30       	cpi	r18, 0x02	; 2
    105e:	31 05       	cpc	r19, r1
    1060:	89 f1       	breq	.+98     	; 0x10c4 <MDIO_vSetPinValue+0x1b0>
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	83 30       	cpi	r24, 0x03	; 3
    1068:	91 05       	cpc	r25, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <MDIO_vSetPinValue+0x15a>
    106c:	40 c0       	rjmp	.+128    	; 0x10ee <MDIO_vSetPinValue+0x1da>
    106e:	57 c0       	rjmp	.+174    	; 0x111e <MDIO_vSetPinValue+0x20a>
			case PORTA:	CLR_BIT(PORTA_reg, copy_u8pin);	break;
    1070:	ab e3       	ldi	r26, 0x3B	; 59
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	eb e3       	ldi	r30, 0x3B	; 59
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <MDIO_vSetPinValue+0x17a>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <MDIO_vSetPinValue+0x176>
    1092:	80 95       	com	r24
    1094:	84 23       	and	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	42 c0       	rjmp	.+132    	; 0x111e <MDIO_vSetPinValue+0x20a>
			case PORTB:	CLR_BIT(PORTB_reg, copy_u8pin);	break;
    109a:	a8 e3       	ldi	r26, 0x38	; 56
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e8 e3       	ldi	r30, 0x38	; 56
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <MDIO_vSetPinValue+0x1a4>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <MDIO_vSetPinValue+0x1a0>
    10bc:	80 95       	com	r24
    10be:	84 23       	and	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	2d c0       	rjmp	.+90     	; 0x111e <MDIO_vSetPinValue+0x20a>
			case PORTC:	CLR_BIT(PORTC_reg, copy_u8pin);	break;
    10c4:	a5 e3       	ldi	r26, 0x35	; 53
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e5 e3       	ldi	r30, 0x35	; 53
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <MDIO_vSetPinValue+0x1ce>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <MDIO_vSetPinValue+0x1ca>
    10e6:	80 95       	com	r24
    10e8:	84 23       	and	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	18 c0       	rjmp	.+48     	; 0x111e <MDIO_vSetPinValue+0x20a>
			case PORTD:	CLR_BIT(PORTD_reg, copy_u8pin);	break;
    10ee:	a2 e3       	ldi	r26, 0x32	; 50
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e2 e3       	ldi	r30, 0x32	; 50
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <MDIO_vSetPinValue+0x1f8>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <MDIO_vSetPinValue+0x1f4>
    1110:	80 95       	com	r24
    1112:	84 23       	and	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	03 c0       	rjmp	.+6      	; 0x111e <MDIO_vSetPinValue+0x20a>
			}
		}
		else
		{
			Local_enumState=DIO_NOK;
    1118:	19 82       	std	Y+1, r1	; 0x01
    111a:	01 c0       	rjmp	.+2      	; 0x111e <MDIO_vSetPinValue+0x20a>
		}
	}
	else
	{
		Local_enumState=DIO_NOK;
    111c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enumState;
    111e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1120:	28 96       	adiw	r28, 0x08	; 8
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <MDIO_GetPinValue>:
/*	function name:		void GET_PIN_VALUE( u8 PORT,u8 PIN_ID)
 * 	function inputs:	Port number, Pin number
 * 	function outputs:	value is is high or low
 */
/************************************************************************************************************/
u8 MDIO_GetPinValue( u8 copy_u8port,u8 copy_u8pin){
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	00 d0       	rcall	.+0      	; 0x1138 <MDIO_GetPinValue+0x6>
    1138:	00 d0       	rcall	.+0      	; 0x113a <MDIO_GetPinValue+0x8>
    113a:	00 d0       	rcall	.+0      	; 0x113c <MDIO_GetPinValue+0xa>
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	8a 83       	std	Y+2, r24	; 0x02
    1142:	6b 83       	std	Y+3, r22	; 0x03
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD) && (copy_u8pin >= PIN0)
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	84 30       	cpi	r24, 0x04	; 4
    1148:	08 f0       	brcs	.+2      	; 0x114c <MDIO_GetPinValue+0x1a>
    114a:	70 c0       	rjmp	.+224    	; 0x122c <MDIO_GetPinValue+0xfa>
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	88 30       	cpi	r24, 0x08	; 8
    1150:	08 f0       	brcs	.+2      	; 0x1154 <MDIO_GetPinValue+0x22>
    1152:	6c c0       	rjmp	.+216    	; 0x122c <MDIO_GetPinValue+0xfa>
			&& (copy_u8pin <= PIN7)) {

		u8 value = 0;
    1154:	19 82       	std	Y+1, r1	; 0x01
		switch (copy_u8port) {
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	3d 83       	std	Y+5, r19	; 0x05
    115e:	2c 83       	std	Y+4, r18	; 0x04
    1160:	4c 81       	ldd	r20, Y+4	; 0x04
    1162:	5d 81       	ldd	r21, Y+5	; 0x05
    1164:	41 30       	cpi	r20, 0x01	; 1
    1166:	51 05       	cpc	r21, r1
    1168:	41 f1       	breq	.+80     	; 0x11ba <MDIO_GetPinValue+0x88>
    116a:	8c 81       	ldd	r24, Y+4	; 0x04
    116c:	9d 81       	ldd	r25, Y+5	; 0x05
    116e:	82 30       	cpi	r24, 0x02	; 2
    1170:	91 05       	cpc	r25, r1
    1172:	34 f4       	brge	.+12     	; 0x1180 <MDIO_GetPinValue+0x4e>
    1174:	2c 81       	ldd	r18, Y+4	; 0x04
    1176:	3d 81       	ldd	r19, Y+5	; 0x05
    1178:	21 15       	cp	r18, r1
    117a:	31 05       	cpc	r19, r1
    117c:	61 f0       	breq	.+24     	; 0x1196 <MDIO_GetPinValue+0x64>
    117e:	52 c0       	rjmp	.+164    	; 0x1224 <MDIO_GetPinValue+0xf2>
    1180:	4c 81       	ldd	r20, Y+4	; 0x04
    1182:	5d 81       	ldd	r21, Y+5	; 0x05
    1184:	42 30       	cpi	r20, 0x02	; 2
    1186:	51 05       	cpc	r21, r1
    1188:	51 f1       	breq	.+84     	; 0x11de <MDIO_GetPinValue+0xac>
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	83 30       	cpi	r24, 0x03	; 3
    1190:	91 05       	cpc	r25, r1
    1192:	b9 f1       	breq	.+110    	; 0x1202 <MDIO_GetPinValue+0xd0>
    1194:	47 c0       	rjmp	.+142    	; 0x1224 <MDIO_GetPinValue+0xf2>
		case PORTA:
			value = GET_BIT(PINA_reg, copy_u8pin);
    1196:	e9 e3       	ldi	r30, 0x39	; 57
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a9 01       	movw	r20, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <MDIO_GetPinValue+0x7c>
    11aa:	55 95       	asr	r21
    11ac:	47 95       	ror	r20
    11ae:	8a 95       	dec	r24
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <MDIO_GetPinValue+0x78>
    11b2:	ca 01       	movw	r24, r20
    11b4:	81 70       	andi	r24, 0x01	; 1
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	35 c0       	rjmp	.+106    	; 0x1224 <MDIO_GetPinValue+0xf2>
			break;
		case PORTB:
			value = GET_BIT(PINB_reg, copy_u8pin);
    11ba:	e6 e3       	ldi	r30, 0x36	; 54
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a9 01       	movw	r20, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <MDIO_GetPinValue+0xa0>
    11ce:	55 95       	asr	r21
    11d0:	47 95       	ror	r20
    11d2:	8a 95       	dec	r24
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <MDIO_GetPinValue+0x9c>
    11d6:	ca 01       	movw	r24, r20
    11d8:	81 70       	andi	r24, 0x01	; 1
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	23 c0       	rjmp	.+70     	; 0x1224 <MDIO_GetPinValue+0xf2>
			break;
		case PORTC:
			value = GET_BIT(PINC_reg, copy_u8pin);
    11de:	e3 e3       	ldi	r30, 0x33	; 51
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	88 2f       	mov	r24, r24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a9 01       	movw	r20, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <MDIO_GetPinValue+0xc4>
    11f2:	55 95       	asr	r21
    11f4:	47 95       	ror	r20
    11f6:	8a 95       	dec	r24
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <MDIO_GetPinValue+0xc0>
    11fa:	ca 01       	movw	r24, r20
    11fc:	81 70       	andi	r24, 0x01	; 1
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	11 c0       	rjmp	.+34     	; 0x1224 <MDIO_GetPinValue+0xf2>
			break;
		case PORTD:
			value = GET_BIT(PIND_reg, copy_u8pin);
    1202:	e0 e3       	ldi	r30, 0x30	; 48
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	88 2f       	mov	r24, r24
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	a9 01       	movw	r20, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <MDIO_GetPinValue+0xe8>
    1216:	55 95       	asr	r21
    1218:	47 95       	ror	r20
    121a:	8a 95       	dec	r24
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <MDIO_GetPinValue+0xe4>
    121e:	ca 01       	movw	r24, r20
    1220:	81 70       	andi	r24, 0x01	; 1
    1222:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		return value;
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	8e 83       	std	Y+6, r24	; 0x06
	}
}
    1228:	8e 81       	ldd	r24, Y+6	; 0x06
    122a:	00 c0       	rjmp	.+0      	; 0x122c <MDIO_GetPinValue+0xfa>
    122c:	26 96       	adiw	r28, 0x06	; 6
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <MDIO_vTogglePinValue>:
 */
/************************************************************************************************************/


DIO_ErrorStatus MDIO_vTogglePinValue( u8 copy_u8port,u8 copy_u8pin, u8 copy_u8PinValue)
 {
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <MDIO_vTogglePinValue+0x6>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <MDIO_vTogglePinValue+0x8>
    1246:	00 d0       	rcall	.+0      	; 0x1248 <MDIO_vTogglePinValue+0xa>
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	8a 83       	std	Y+2, r24	; 0x02
    124e:	6b 83       	std	Y+3, r22	; 0x03
    1250:	4c 83       	std	Y+4, r20	; 0x04
	/*create local var. from Error state*/
	DIO_ErrorStatus Local_enumState=DIO_Ok;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	89 83       	std	Y+1, r24	; 0x01
	/*check the validation range of ports and pins */
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD) && (copy_u8pin >= PIN0)
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	84 30       	cpi	r24, 0x04	; 4
    125a:	08 f0       	brcs	.+2      	; 0x125e <MDIO_vTogglePinValue+0x20>
    125c:	73 c0       	rjmp	.+230    	; 0x1344 <MDIO_vTogglePinValue+0x106>
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	88 30       	cpi	r24, 0x08	; 8
    1262:	08 f0       	brcs	.+2      	; 0x1266 <MDIO_vTogglePinValue+0x28>
    1264:	6f c0       	rjmp	.+222    	; 0x1344 <MDIO_vTogglePinValue+0x106>
			&& (copy_u8pin <= PIN7)) {
		/*check PORT reg. value to toggle */
			switch (copy_u8port)
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	3e 83       	std	Y+6, r19	; 0x06
    126e:	2d 83       	std	Y+5, r18	; 0x05
    1270:	8d 81       	ldd	r24, Y+5	; 0x05
    1272:	9e 81       	ldd	r25, Y+6	; 0x06
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	91 05       	cpc	r25, r1
    1278:	49 f1       	breq	.+82     	; 0x12cc <MDIO_vTogglePinValue+0x8e>
    127a:	2d 81       	ldd	r18, Y+5	; 0x05
    127c:	3e 81       	ldd	r19, Y+6	; 0x06
    127e:	22 30       	cpi	r18, 0x02	; 2
    1280:	31 05       	cpc	r19, r1
    1282:	2c f4       	brge	.+10     	; 0x128e <MDIO_vTogglePinValue+0x50>
    1284:	8d 81       	ldd	r24, Y+5	; 0x05
    1286:	9e 81       	ldd	r25, Y+6	; 0x06
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	61 f0       	breq	.+24     	; 0x12a4 <MDIO_vTogglePinValue+0x66>
    128c:	5c c0       	rjmp	.+184    	; 0x1346 <MDIO_vTogglePinValue+0x108>
    128e:	2d 81       	ldd	r18, Y+5	; 0x05
    1290:	3e 81       	ldd	r19, Y+6	; 0x06
    1292:	22 30       	cpi	r18, 0x02	; 2
    1294:	31 05       	cpc	r19, r1
    1296:	71 f1       	breq	.+92     	; 0x12f4 <MDIO_vTogglePinValue+0xb6>
    1298:	8d 81       	ldd	r24, Y+5	; 0x05
    129a:	9e 81       	ldd	r25, Y+6	; 0x06
    129c:	83 30       	cpi	r24, 0x03	; 3
    129e:	91 05       	cpc	r25, r1
    12a0:	e9 f1       	breq	.+122    	; 0x131c <MDIO_vTogglePinValue+0xde>
    12a2:	51 c0       	rjmp	.+162    	; 0x1346 <MDIO_vTogglePinValue+0x108>
			{
			case PORTA:	TOG_BIT(PORTA_reg, copy_u8pin);	break;
    12a4:	ab e3       	ldi	r26, 0x3B	; 59
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	eb e3       	ldi	r30, 0x3B	; 59
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <MDIO_vTogglePinValue+0x84>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <MDIO_vTogglePinValue+0x80>
    12c6:	84 27       	eor	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	3d c0       	rjmp	.+122    	; 0x1346 <MDIO_vTogglePinValue+0x108>
			case PORTB:	TOG_BIT(PORTB_reg, copy_u8pin);	break;
    12cc:	a8 e3       	ldi	r26, 0x38	; 56
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e8 e3       	ldi	r30, 0x38	; 56
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <MDIO_vTogglePinValue+0xac>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <MDIO_vTogglePinValue+0xa8>
    12ee:	84 27       	eor	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	29 c0       	rjmp	.+82     	; 0x1346 <MDIO_vTogglePinValue+0x108>
			case PORTC:	TOG_BIT(PORTC_reg, copy_u8pin);	break;
    12f4:	a5 e3       	ldi	r26, 0x35	; 53
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e5 e3       	ldi	r30, 0x35	; 53
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <MDIO_vTogglePinValue+0xd4>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <MDIO_vTogglePinValue+0xd0>
    1316:	84 27       	eor	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	15 c0       	rjmp	.+42     	; 0x1346 <MDIO_vTogglePinValue+0x108>
			case PORTD:	TOG_BIT(PORTD_reg, copy_u8pin);	break;
    131c:	a2 e3       	ldi	r26, 0x32	; 50
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e2 e3       	ldi	r30, 0x32	; 50
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <MDIO_vTogglePinValue+0xfc>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <MDIO_vTogglePinValue+0xf8>
    133e:	84 27       	eor	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	01 c0       	rjmp	.+2      	; 0x1346 <MDIO_vTogglePinValue+0x108>
			}
		}
	else
	{
		Local_enumState=DIO_NOK;
    1344:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enumState;
    1346:	89 81       	ldd	r24, Y+1	; 0x01
}
    1348:	26 96       	adiw	r28, 0x06	; 6
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <HKYP_vInit>:
#include "KYP_config.h"
#include "KYP_private.h"



void HKYP_vInit(void){
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62

	//set keypad pin configurations
	//col. as output
	//row as inputs
	MDIO_vSetPortDirection(KYP_PORT,0x0f);
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	6f e0       	ldi	r22, 0x0F	; 15
    1366:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_vSetPortDirection>
	//active pull-up resistor
	//deactivate for all col.
	MDIO_vSetPortValue(KYP_PORT,0xff);
    136a:	82 e0       	ldi	r24, 0x02	; 2
    136c:	6f ef       	ldi	r22, 0xFF	; 255
    136e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_vSetPortValue>

}
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <HKYP_u8ReadButton>:

u8 HKYP_u8ReadButton(void)
 {
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	a3 97       	sbiw	r28, 0x23	; 35
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NOT_PRESSED;
    138c:	8f ef       	ldi	r24, 0xFF	; 255
    138e:	8e 83       	std	Y+6, r24	; 0x06
	u8 col_iterator;
	u8 row_iterator;
	u8 Local_u8Pressed;
	u16 flag = 0;
    1390:	1a 82       	std	Y+2, r1	; 0x02
    1392:	19 82       	std	Y+1, r1	; 0x01
	//u16 counter=0; //to check the de bounce

	u8 KEYPAD_arr[Row_num][Col_num] = { { '7', '8', '9', '/' },
										{ '4', '5', '6', '*' },
										{ '1', '2', '3', '-' },
										{ '#', '0', '=', '+' } };
    1394:	ce 01       	movw	r24, r28
    1396:	07 96       	adiw	r24, 0x07	; 7
    1398:	98 a3       	std	Y+32, r25	; 0x20
    139a:	8f 8f       	std	Y+31, r24	; 0x1f
    139c:	ec e6       	ldi	r30, 0x6C	; 108
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	fa a3       	std	Y+34, r31	; 0x22
    13a2:	e9 a3       	std	Y+33, r30	; 0x21
    13a4:	f0 e1       	ldi	r31, 0x10	; 16
    13a6:	fb a3       	std	Y+35, r31	; 0x23
    13a8:	e9 a1       	ldd	r30, Y+33	; 0x21
    13aa:	fa a1       	ldd	r31, Y+34	; 0x22
    13ac:	00 80       	ld	r0, Z
    13ae:	89 a1       	ldd	r24, Y+33	; 0x21
    13b0:	9a a1       	ldd	r25, Y+34	; 0x22
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	9a a3       	std	Y+34, r25	; 0x22
    13b6:	89 a3       	std	Y+33, r24	; 0x21
    13b8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    13ba:	f8 a1       	ldd	r31, Y+32	; 0x20
    13bc:	00 82       	st	Z, r0
    13be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13c0:	98 a1       	ldd	r25, Y+32	; 0x20
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	98 a3       	std	Y+32, r25	; 0x20
    13c6:	8f 8f       	std	Y+31, r24	; 0x1f
    13c8:	9b a1       	ldd	r25, Y+35	; 0x23
    13ca:	91 50       	subi	r25, 0x01	; 1
    13cc:	9b a3       	std	Y+35, r25	; 0x23
    13ce:	eb a1       	ldd	r30, Y+35	; 0x23
    13d0:	ee 23       	and	r30, r30
    13d2:	51 f7       	brne	.-44     	; 0x13a8 <HKYP_u8ReadButton+0x30>

	u8 col_arr[Col_num] = { COL_PIN0, COL_PIN1, COL_PIN2, COL_PIN3 };
    13d4:	1f 8a       	std	Y+23, r1	; 0x17
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	88 8f       	std	Y+24, r24	; 0x18
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	89 8f       	std	Y+25, r24	; 0x19
    13de:	83 e0       	ldi	r24, 0x03	; 3
    13e0:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 row_arr[Row_num] = { ROW_PIN0, ROW_PIN1, ROW_PIN2, ROW_PIN3 };
    13e2:	84 e0       	ldi	r24, 0x04	; 4
    13e4:	8b 8f       	std	Y+27, r24	; 0x1b
    13e6:	85 e0       	ldi	r24, 0x05	; 5
    13e8:	8c 8f       	std	Y+28, r24	; 0x1c
    13ea:	86 e0       	ldi	r24, 0x06	; 6
    13ec:	8d 8f       	std	Y+29, r24	; 0x1d
    13ee:	87 e0       	ldi	r24, 0x07	; 7
    13f0:	8e 8f       	std	Y+30, r24	; 0x1e

	for (col_iterator = 0; col_iterator < Col_num; col_iterator++)
    13f2:	1d 82       	std	Y+5, r1	; 0x05
    13f4:	69 c0       	rjmp	.+210    	; 0x14c8 <HKYP_u8ReadButton+0x150>
	{
		/*activate current col.*/
		MDIO_vSetPinValue(KYP_PORT, col_arr[col_iterator], DIO_LOW);
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	ce 01       	movw	r24, r28
    13fe:	47 96       	adiw	r24, 0x17	; 23
    1400:	fc 01       	movw	r30, r24
    1402:	e2 0f       	add	r30, r18
    1404:	f3 1f       	adc	r31, r19
    1406:	90 81       	ld	r25, Z
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	69 2f       	mov	r22, r25
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	0e 94 8a 07 	call	0xf14	; 0xf14 <MDIO_vSetPinValue>
		for (row_iterator = 0; row_iterator < Row_num; row_iterator++)
    1412:	1c 82       	std	Y+4, r1	; 0x04
    1414:	3f c0       	rjmp	.+126    	; 0x1494 <HKYP_u8ReadButton+0x11c>
		{
			Local_u8Pressed = MDIO_GetPinValue(KYP_PORT, row_arr[row_iterator]);
    1416:	8c 81       	ldd	r24, Y+4	; 0x04
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	ce 01       	movw	r24, r28
    141e:	4b 96       	adiw	r24, 0x1b	; 27
    1420:	fc 01       	movw	r30, r24
    1422:	e2 0f       	add	r30, r18
    1424:	f3 1f       	adc	r31, r19
    1426:	90 81       	ld	r25, Z
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	69 2f       	mov	r22, r25
    142c:	0e 94 99 08 	call	0x1132	; 0x1132 <MDIO_GetPinValue>
    1430:	8b 83       	std	Y+3, r24	; 0x03
			/*check all rows*/
			if (DIO_LOW == Local_u8Pressed)
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	88 23       	and	r24, r24
    1436:	59 f5       	brne	.+86     	; 0x148e <HKYP_u8ReadButton+0x116>
			{
				Local_u8PressedKey = KEYPAD_arr[row_iterator][col_iterator];
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	48 2f       	mov	r20, r24
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	22 0f       	add	r18, r18
    1446:	33 1f       	adc	r19, r19
    1448:	22 0f       	add	r18, r18
    144a:	33 1f       	adc	r19, r19
    144c:	ce 01       	movw	r24, r28
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	82 0f       	add	r24, r18
    1452:	93 1f       	adc	r25, r19
    1454:	84 0f       	add	r24, r20
    1456:	95 1f       	adc	r25, r21
    1458:	fc 01       	movw	r30, r24
    145a:	36 96       	adiw	r30, 0x06	; 6
    145c:	80 81       	ld	r24, Z
    145e:	8e 83       	std	Y+6, r24	; 0x06
    1460:	0e c0       	rjmp	.+28     	; 0x147e <HKYP_u8ReadButton+0x106>

				/*busy wait -> de bounce*/
				while (DIO_LOW == Local_u8Pressed /*|| counter<1000*/)
				{
					Local_u8Pressed = MDIO_GetPinValue(KYP_PORT,row_arr[row_iterator]);
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	ce 01       	movw	r24, r28
    146a:	4b 96       	adiw	r24, 0x1b	; 27
    146c:	fc 01       	movw	r30, r24
    146e:	e2 0f       	add	r30, r18
    1470:	f3 1f       	adc	r31, r19
    1472:	90 81       	ld	r25, Z
    1474:	82 e0       	ldi	r24, 0x02	; 2
    1476:	69 2f       	mov	r22, r25
    1478:	0e 94 99 08 	call	0x1132	; 0x1132 <MDIO_GetPinValue>
    147c:	8b 83       	std	Y+3, r24	; 0x03
			if (DIO_LOW == Local_u8Pressed)
			{
				Local_u8PressedKey = KEYPAD_arr[row_iterator][col_iterator];

				/*busy wait -> de bounce*/
				while (DIO_LOW == Local_u8Pressed /*|| counter<1000*/)
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	88 23       	and	r24, r24
    1482:	79 f3       	breq	.-34     	; 0x1462 <HKYP_u8ReadButton+0xea>
				{
					Local_u8Pressed = MDIO_GetPinValue(KYP_PORT,row_arr[row_iterator]);
				}
				//_delay_ms(20);
				flag = 1;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	9a 83       	std	Y+2, r25	; 0x02
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	07 c0       	rjmp	.+14     	; 0x149c <HKYP_u8ReadButton+0x124>

	for (col_iterator = 0; col_iterator < Col_num; col_iterator++)
	{
		/*activate current col.*/
		MDIO_vSetPinValue(KYP_PORT, col_arr[col_iterator], DIO_LOW);
		for (row_iterator = 0; row_iterator < Row_num; row_iterator++)
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	8f 5f       	subi	r24, 0xFF	; 255
    1492:	8c 83       	std	Y+4, r24	; 0x04
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	84 30       	cpi	r24, 0x04	; 4
    1498:	08 f4       	brcc	.+2      	; 0x149c <HKYP_u8ReadButton+0x124>
    149a:	bd cf       	rjmp	.-134    	; 0x1416 <HKYP_u8ReadButton+0x9e>
				break;
			}
			else
			{/*do nothing*/}
		}
		if (DIO_HIGH== flag)
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	9a 81       	ldd	r25, Y+2	; 0x02
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	91 05       	cpc	r25, r1
    14a4:	a9 f0       	breq	.+42     	; 0x14d0 <HKYP_u8ReadButton+0x158>
			break;
		}
		else {/*do nothing*/}

		/*deactivate the current col.*/
		MDIO_vSetPinValue( KYP_PORT, col_arr[col_iterator], DIO_HIGH);
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	ce 01       	movw	r24, r28
    14ae:	47 96       	adiw	r24, 0x17	; 23
    14b0:	fc 01       	movw	r30, r24
    14b2:	e2 0f       	add	r30, r18
    14b4:	f3 1f       	adc	r31, r19
    14b6:	90 81       	ld	r25, Z
    14b8:	82 e0       	ldi	r24, 0x02	; 2
    14ba:	69 2f       	mov	r22, r25
    14bc:	41 e0       	ldi	r20, 0x01	; 1
    14be:	0e 94 8a 07 	call	0xf14	; 0xf14 <MDIO_vSetPinValue>
										{ '#', '0', '=', '+' } };

	u8 col_arr[Col_num] = { COL_PIN0, COL_PIN1, COL_PIN2, COL_PIN3 };
	u8 row_arr[Row_num] = { ROW_PIN0, ROW_PIN1, ROW_PIN2, ROW_PIN3 };

	for (col_iterator = 0; col_iterator < Col_num; col_iterator++)
    14c2:	8d 81       	ldd	r24, Y+5	; 0x05
    14c4:	8f 5f       	subi	r24, 0xFF	; 255
    14c6:	8d 83       	std	Y+5, r24	; 0x05
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	84 30       	cpi	r24, 0x04	; 4
    14cc:	08 f4       	brcc	.+2      	; 0x14d0 <HKYP_u8ReadButton+0x158>
    14ce:	93 cf       	rjmp	.-218    	; 0x13f6 <HKYP_u8ReadButton+0x7e>
		else {/*do nothing*/}

		/*deactivate the current col.*/
		MDIO_vSetPinValue( KYP_PORT, col_arr[col_iterator], DIO_HIGH);
	}
	return Local_u8PressedKey;
    14d0:	8e 81       	ldd	r24, Y+6	; 0x06

}
    14d2:	a3 96       	adiw	r28, 0x23	; 35
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <HLCD_vInitLcd>:
copy_u8CustChar[]={
		{0x00,  0x1B,	0x1F,	0x1F,  0x1F,  0x1F,  0x0E,  0x04},	//heart
		{0x04,	0x00,	0x04,	0x0E,  0x0E,  0x0A,  0x15,  0x00}	};//bell

void HLCD_vInitLcd(void)
{
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	c4 55       	subi	r28, 0x54	; 84
    14f2:	d0 40       	sbci	r29, 0x00	; 0
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
	/*set config of lcd pins*/
	MDIO_vSetPinDirection(CTR_PORT,	LCD_RS,	DIO_OUTPUT);
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	4f ef       	ldi	r20, 0xFF	; 255
    1504:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(CTR_PORT,	LCD_RW,	DIO_OUTPUT);
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	4f ef       	ldi	r20, 0xFF	; 255
    150e:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(CTR_PORT,	LCD_E,	DIO_OUTPUT);
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	62 e0       	ldi	r22, 0x02	; 2
    1516:	4f ef       	ldi	r20, 0xFF	; 255
    1518:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <MDIO_vSetPinDirection>
	MDIO_vSetPortDirection(DATA_PORT,0xff);
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	6f ef       	ldi	r22, 0xFF	; 255
    1520:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_vSetPortDirection>
    1524:	fe 01       	movw	r30, r28
    1526:	ef 5a       	subi	r30, 0xAF	; 175
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	a0 e2       	ldi	r26, 0x20	; 32
    1530:	b2 e4       	ldi	r27, 0x42	; 66
    1532:	80 83       	st	Z, r24
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	a2 83       	std	Z+2, r26	; 0x02
    1538:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153a:	8e 01       	movw	r16, r28
    153c:	03 5b       	subi	r16, 0xB3	; 179
    153e:	1f 4f       	sbci	r17, 0xFF	; 255
    1540:	fe 01       	movw	r30, r28
    1542:	ef 5a       	subi	r30, 0xAF	; 175
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	60 81       	ld	r22, Z
    1548:	71 81       	ldd	r23, Z+1	; 0x01
    154a:	82 81       	ldd	r24, Z+2	; 0x02
    154c:	93 81       	ldd	r25, Z+3	; 0x03
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	4a ef       	ldi	r20, 0xFA	; 250
    1554:	54 e4       	ldi	r21, 0x44	; 68
    1556:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	f8 01       	movw	r30, r16
    1560:	80 83       	st	Z, r24
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	a2 83       	std	Z+2, r26	; 0x02
    1566:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1568:	fe 01       	movw	r30, r28
    156a:	e3 5b       	subi	r30, 0xB3	; 179
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e8       	ldi	r20, 0x80	; 128
    157c:	5f e3       	ldi	r21, 0x3F	; 63
    157e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1582:	88 23       	and	r24, r24
    1584:	44 f4       	brge	.+16     	; 0x1596 <HLCD_vInitLcd+0xb2>
		__ticks = 1;
    1586:	fe 01       	movw	r30, r28
    1588:	e5 5b       	subi	r30, 0xB5	; 181
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	91 83       	std	Z+1, r25	; 0x01
    1592:	80 83       	st	Z, r24
    1594:	64 c0       	rjmp	.+200    	; 0x165e <HLCD_vInitLcd+0x17a>
	else if (__tmp > 65535)
    1596:	fe 01       	movw	r30, r28
    1598:	e3 5b       	subi	r30, 0xB3	; 179
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	60 81       	ld	r22, Z
    159e:	71 81       	ldd	r23, Z+1	; 0x01
    15a0:	82 81       	ldd	r24, Z+2	; 0x02
    15a2:	93 81       	ldd	r25, Z+3	; 0x03
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	57 e4       	ldi	r21, 0x47	; 71
    15ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15b0:	18 16       	cp	r1, r24
    15b2:	0c f0       	brlt	.+2      	; 0x15b6 <HLCD_vInitLcd+0xd2>
    15b4:	43 c0       	rjmp	.+134    	; 0x163c <HLCD_vInitLcd+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b6:	fe 01       	movw	r30, r28
    15b8:	ef 5a       	subi	r30, 0xAF	; 175
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	60 81       	ld	r22, Z
    15be:	71 81       	ldd	r23, Z+1	; 0x01
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e2       	ldi	r20, 0x20	; 32
    15ca:	51 e4       	ldi	r21, 0x41	; 65
    15cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	8e 01       	movw	r16, r28
    15d6:	05 5b       	subi	r16, 0xB5	; 181
    15d8:	1f 4f       	sbci	r17, 0xFF	; 255
    15da:	bc 01       	movw	r22, r24
    15dc:	cd 01       	movw	r24, r26
    15de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	f8 01       	movw	r30, r16
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	80 83       	st	Z, r24
    15ec:	1f c0       	rjmp	.+62     	; 0x162c <HLCD_vInitLcd+0x148>
    15ee:	fe 01       	movw	r30, r28
    15f0:	e7 5b       	subi	r30, 0xB7	; 183
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	88 ec       	ldi	r24, 0xC8	; 200
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15fc:	fe 01       	movw	r30, r28
    15fe:	e7 5b       	subi	r30, 0xB7	; 183
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	80 81       	ld	r24, Z
    1604:	91 81       	ldd	r25, Z+1	; 0x01
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <HLCD_vInitLcd+0x122>
    160a:	fe 01       	movw	r30, r28
    160c:	e7 5b       	subi	r30, 0xB7	; 183
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1614:	de 01       	movw	r26, r28
    1616:	a5 5b       	subi	r26, 0xB5	; 181
    1618:	bf 4f       	sbci	r27, 0xFF	; 255
    161a:	fe 01       	movw	r30, r28
    161c:	e5 5b       	subi	r30, 0xB5	; 181
    161e:	ff 4f       	sbci	r31, 0xFF	; 255
    1620:	80 81       	ld	r24, Z
    1622:	91 81       	ldd	r25, Z+1	; 0x01
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	11 96       	adiw	r26, 0x01	; 1
    1628:	9c 93       	st	X, r25
    162a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162c:	fe 01       	movw	r30, r28
    162e:	e5 5b       	subi	r30, 0xB5	; 181
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	80 81       	ld	r24, Z
    1634:	91 81       	ldd	r25, Z+1	; 0x01
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	d1 f6       	brne	.-76     	; 0x15ee <HLCD_vInitLcd+0x10a>
    163a:	27 c0       	rjmp	.+78     	; 0x168a <HLCD_vInitLcd+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163c:	8e 01       	movw	r16, r28
    163e:	05 5b       	subi	r16, 0xB5	; 181
    1640:	1f 4f       	sbci	r17, 0xFF	; 255
    1642:	fe 01       	movw	r30, r28
    1644:	e3 5b       	subi	r30, 0xB3	; 179
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	f8 01       	movw	r30, r16
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	80 83       	st	Z, r24
    165e:	de 01       	movw	r26, r28
    1660:	a9 5b       	subi	r26, 0xB9	; 185
    1662:	bf 4f       	sbci	r27, 0xFF	; 255
    1664:	fe 01       	movw	r30, r28
    1666:	e5 5b       	subi	r30, 0xB5	; 181
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	80 81       	ld	r24, Z
    166c:	91 81       	ldd	r25, Z+1	; 0x01
    166e:	8d 93       	st	X+, r24
    1670:	9c 93       	st	X, r25
    1672:	fe 01       	movw	r30, r28
    1674:	e9 5b       	subi	r30, 0xB9	; 185
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	80 81       	ld	r24, Z
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <HLCD_vInitLcd+0x198>
    1680:	fe 01       	movw	r30, r28
    1682:	e9 5b       	subi	r30, 0xB9	; 185
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	91 83       	std	Z+1, r25	; 0x01
    1688:	80 83       	st	Z, r24

	/*wait for more than 30ms*/
	_delay_ms(40);
	HLCD_vSendCommand(lcd_Home);
    168a:	82 e0       	ldi	r24, 0x02	; 2
    168c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <HLCD_vSendCommand>
    1690:	fe 01       	movw	r30, r28
    1692:	ed 5b       	subi	r30, 0xBD	; 189
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	a0 e7       	ldi	r26, 0x70	; 112
    169c:	b1 e4       	ldi	r27, 0x41	; 65
    169e:	80 83       	st	Z, r24
    16a0:	91 83       	std	Z+1, r25	; 0x01
    16a2:	a2 83       	std	Z+2, r26	; 0x02
    16a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a6:	8e 01       	movw	r16, r28
    16a8:	01 5c       	subi	r16, 0xC1	; 193
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	fe 01       	movw	r30, r28
    16ae:	ed 5b       	subi	r30, 0xBD	; 189
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	60 81       	ld	r22, Z
    16b4:	71 81       	ldd	r23, Z+1	; 0x01
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	93 81       	ldd	r25, Z+3	; 0x03
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	4a ef       	ldi	r20, 0xFA	; 250
    16c0:	54 e4       	ldi	r21, 0x44	; 68
    16c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	f8 01       	movw	r30, r16
    16cc:	80 83       	st	Z, r24
    16ce:	91 83       	std	Z+1, r25	; 0x01
    16d0:	a2 83       	std	Z+2, r26	; 0x02
    16d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16d4:	fe 01       	movw	r30, r28
    16d6:	ff 96       	adiw	r30, 0x3f	; 63
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	82 81       	ldd	r24, Z+2	; 0x02
    16de:	93 81       	ldd	r25, Z+3	; 0x03
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e8       	ldi	r20, 0x80	; 128
    16e6:	5f e3       	ldi	r21, 0x3F	; 63
    16e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	2c f4       	brge	.+10     	; 0x16fa <HLCD_vInitLcd+0x216>
		__ticks = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	9e af       	std	Y+62, r25	; 0x3e
    16f6:	8d af       	std	Y+61, r24	; 0x3d
    16f8:	46 c0       	rjmp	.+140    	; 0x1786 <HLCD_vInitLcd+0x2a2>
	else if (__tmp > 65535)
    16fa:	fe 01       	movw	r30, r28
    16fc:	ff 96       	adiw	r30, 0x3f	; 63
    16fe:	60 81       	ld	r22, Z
    1700:	71 81       	ldd	r23, Z+1	; 0x01
    1702:	82 81       	ldd	r24, Z+2	; 0x02
    1704:	93 81       	ldd	r25, Z+3	; 0x03
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	3f ef       	ldi	r19, 0xFF	; 255
    170a:	4f e7       	ldi	r20, 0x7F	; 127
    170c:	57 e4       	ldi	r21, 0x47	; 71
    170e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1712:	18 16       	cp	r1, r24
    1714:	64 f5       	brge	.+88     	; 0x176e <HLCD_vInitLcd+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1716:	fe 01       	movw	r30, r28
    1718:	ed 5b       	subi	r30, 0xBD	; 189
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	60 81       	ld	r22, Z
    171e:	71 81       	ldd	r23, Z+1	; 0x01
    1720:	82 81       	ldd	r24, Z+2	; 0x02
    1722:	93 81       	ldd	r25, Z+3	; 0x03
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e2       	ldi	r20, 0x20	; 32
    172a:	51 e4       	ldi	r21, 0x41	; 65
    172c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	bc 01       	movw	r22, r24
    1736:	cd 01       	movw	r24, r26
    1738:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	9e af       	std	Y+62, r25	; 0x3e
    1742:	8d af       	std	Y+61, r24	; 0x3d
    1744:	0f c0       	rjmp	.+30     	; 0x1764 <HLCD_vInitLcd+0x280>
    1746:	88 ec       	ldi	r24, 0xC8	; 200
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	9c af       	std	Y+60, r25	; 0x3c
    174c:	8b af       	std	Y+59, r24	; 0x3b
    174e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1750:	9c ad       	ldd	r25, Y+60	; 0x3c
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <HLCD_vInitLcd+0x26e>
    1756:	9c af       	std	Y+60, r25	; 0x3c
    1758:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175a:	8d ad       	ldd	r24, Y+61	; 0x3d
    175c:	9e ad       	ldd	r25, Y+62	; 0x3e
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	9e af       	std	Y+62, r25	; 0x3e
    1762:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1764:	8d ad       	ldd	r24, Y+61	; 0x3d
    1766:	9e ad       	ldd	r25, Y+62	; 0x3e
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	69 f7       	brne	.-38     	; 0x1746 <HLCD_vInitLcd+0x262>
    176c:	16 c0       	rjmp	.+44     	; 0x179a <HLCD_vInitLcd+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176e:	fe 01       	movw	r30, r28
    1770:	ff 96       	adiw	r30, 0x3f	; 63
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	9e af       	std	Y+62, r25	; 0x3e
    1784:	8d af       	std	Y+61, r24	; 0x3d
    1786:	8d ad       	ldd	r24, Y+61	; 0x3d
    1788:	9e ad       	ldd	r25, Y+62	; 0x3e
    178a:	9a af       	std	Y+58, r25	; 0x3a
    178c:	89 af       	std	Y+57, r24	; 0x39
    178e:	89 ad       	ldd	r24, Y+57	; 0x39
    1790:	9a ad       	ldd	r25, Y+58	; 0x3a
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	f1 f7       	brne	.-4      	; 0x1792 <HLCD_vInitLcd+0x2ae>
    1796:	9a af       	std	Y+58, r25	; 0x3a
    1798:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);
	/*send function set command */
	HLCD_vSendCommand(Func_set);
    179a:	88 e3       	ldi	r24, 0x38	; 56
    179c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <HLCD_vSendCommand>
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	a0 e8       	ldi	r26, 0x80	; 128
    17a6:	bf e3       	ldi	r27, 0x3F	; 63
    17a8:	8d ab       	std	Y+53, r24	; 0x35
    17aa:	9e ab       	std	Y+54, r25	; 0x36
    17ac:	af ab       	std	Y+55, r26	; 0x37
    17ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b0:	6d a9       	ldd	r22, Y+53	; 0x35
    17b2:	7e a9       	ldd	r23, Y+54	; 0x36
    17b4:	8f a9       	ldd	r24, Y+55	; 0x37
    17b6:	98 ad       	ldd	r25, Y+56	; 0x38
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	4a ef       	ldi	r20, 0xFA	; 250
    17be:	54 e4       	ldi	r21, 0x44	; 68
    17c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	89 ab       	std	Y+49, r24	; 0x31
    17ca:	9a ab       	std	Y+50, r25	; 0x32
    17cc:	ab ab       	std	Y+51, r26	; 0x33
    17ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17d0:	69 a9       	ldd	r22, Y+49	; 0x31
    17d2:	7a a9       	ldd	r23, Y+50	; 0x32
    17d4:	8b a9       	ldd	r24, Y+51	; 0x33
    17d6:	9c a9       	ldd	r25, Y+52	; 0x34
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e8       	ldi	r20, 0x80	; 128
    17de:	5f e3       	ldi	r21, 0x3F	; 63
    17e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17e4:	88 23       	and	r24, r24
    17e6:	2c f4       	brge	.+10     	; 0x17f2 <HLCD_vInitLcd+0x30e>
		__ticks = 1;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	98 ab       	std	Y+48, r25	; 0x30
    17ee:	8f a7       	std	Y+47, r24	; 0x2f
    17f0:	3f c0       	rjmp	.+126    	; 0x1870 <HLCD_vInitLcd+0x38c>
	else if (__tmp > 65535)
    17f2:	69 a9       	ldd	r22, Y+49	; 0x31
    17f4:	7a a9       	ldd	r23, Y+50	; 0x32
    17f6:	8b a9       	ldd	r24, Y+51	; 0x33
    17f8:	9c a9       	ldd	r25, Y+52	; 0x34
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	3f ef       	ldi	r19, 0xFF	; 255
    17fe:	4f e7       	ldi	r20, 0x7F	; 127
    1800:	57 e4       	ldi	r21, 0x47	; 71
    1802:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1806:	18 16       	cp	r1, r24
    1808:	4c f5       	brge	.+82     	; 0x185c <HLCD_vInitLcd+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180a:	6d a9       	ldd	r22, Y+53	; 0x35
    180c:	7e a9       	ldd	r23, Y+54	; 0x36
    180e:	8f a9       	ldd	r24, Y+55	; 0x37
    1810:	98 ad       	ldd	r25, Y+56	; 0x38
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e2       	ldi	r20, 0x20	; 32
    1818:	51 e4       	ldi	r21, 0x41	; 65
    181a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	bc 01       	movw	r22, r24
    1824:	cd 01       	movw	r24, r26
    1826:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	98 ab       	std	Y+48, r25	; 0x30
    1830:	8f a7       	std	Y+47, r24	; 0x2f
    1832:	0f c0       	rjmp	.+30     	; 0x1852 <HLCD_vInitLcd+0x36e>
    1834:	88 ec       	ldi	r24, 0xC8	; 200
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	9e a7       	std	Y+46, r25	; 0x2e
    183a:	8d a7       	std	Y+45, r24	; 0x2d
    183c:	8d a5       	ldd	r24, Y+45	; 0x2d
    183e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	f1 f7       	brne	.-4      	; 0x1840 <HLCD_vInitLcd+0x35c>
    1844:	9e a7       	std	Y+46, r25	; 0x2e
    1846:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1848:	8f a5       	ldd	r24, Y+47	; 0x2f
    184a:	98 a9       	ldd	r25, Y+48	; 0x30
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	98 ab       	std	Y+48, r25	; 0x30
    1850:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1852:	8f a5       	ldd	r24, Y+47	; 0x2f
    1854:	98 a9       	ldd	r25, Y+48	; 0x30
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	69 f7       	brne	.-38     	; 0x1834 <HLCD_vInitLcd+0x350>
    185a:	14 c0       	rjmp	.+40     	; 0x1884 <HLCD_vInitLcd+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185c:	69 a9       	ldd	r22, Y+49	; 0x31
    185e:	7a a9       	ldd	r23, Y+50	; 0x32
    1860:	8b a9       	ldd	r24, Y+51	; 0x33
    1862:	9c a9       	ldd	r25, Y+52	; 0x34
    1864:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	98 ab       	std	Y+48, r25	; 0x30
    186e:	8f a7       	std	Y+47, r24	; 0x2f
    1870:	8f a5       	ldd	r24, Y+47	; 0x2f
    1872:	98 a9       	ldd	r25, Y+48	; 0x30
    1874:	9c a7       	std	Y+44, r25	; 0x2c
    1876:	8b a7       	std	Y+43, r24	; 0x2b
    1878:	8b a5       	ldd	r24, Y+43	; 0x2b
    187a:	9c a5       	ldd	r25, Y+44	; 0x2c
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <HLCD_vInitLcd+0x398>
    1880:	9c a7       	std	Y+44, r25	; 0x2c
    1882:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait 39 us*/
	_delay_ms(1);
	/*send display on/off command*/
	HLCD_vSendCommand(Display_On_Off);
    1884:	8f e0       	ldi	r24, 0x0F	; 15
    1886:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <HLCD_vSendCommand>
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a0 e8       	ldi	r26, 0x80	; 128
    1890:	bf e3       	ldi	r27, 0x3F	; 63
    1892:	8f a3       	std	Y+39, r24	; 0x27
    1894:	98 a7       	std	Y+40, r25	; 0x28
    1896:	a9 a7       	std	Y+41, r26	; 0x29
    1898:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189a:	6f a1       	ldd	r22, Y+39	; 0x27
    189c:	78 a5       	ldd	r23, Y+40	; 0x28
    189e:	89 a5       	ldd	r24, Y+41	; 0x29
    18a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	4a ef       	ldi	r20, 0xFA	; 250
    18a8:	54 e4       	ldi	r21, 0x44	; 68
    18aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	8b a3       	std	Y+35, r24	; 0x23
    18b4:	9c a3       	std	Y+36, r25	; 0x24
    18b6:	ad a3       	std	Y+37, r26	; 0x25
    18b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18ba:	6b a1       	ldd	r22, Y+35	; 0x23
    18bc:	7c a1       	ldd	r23, Y+36	; 0x24
    18be:	8d a1       	ldd	r24, Y+37	; 0x25
    18c0:	9e a1       	ldd	r25, Y+38	; 0x26
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e8       	ldi	r20, 0x80	; 128
    18c8:	5f e3       	ldi	r21, 0x3F	; 63
    18ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	2c f4       	brge	.+10     	; 0x18dc <HLCD_vInitLcd+0x3f8>
		__ticks = 1;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	9a a3       	std	Y+34, r25	; 0x22
    18d8:	89 a3       	std	Y+33, r24	; 0x21
    18da:	3f c0       	rjmp	.+126    	; 0x195a <HLCD_vInitLcd+0x476>
	else if (__tmp > 65535)
    18dc:	6b a1       	ldd	r22, Y+35	; 0x23
    18de:	7c a1       	ldd	r23, Y+36	; 0x24
    18e0:	8d a1       	ldd	r24, Y+37	; 0x25
    18e2:	9e a1       	ldd	r25, Y+38	; 0x26
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	3f ef       	ldi	r19, 0xFF	; 255
    18e8:	4f e7       	ldi	r20, 0x7F	; 127
    18ea:	57 e4       	ldi	r21, 0x47	; 71
    18ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18f0:	18 16       	cp	r1, r24
    18f2:	4c f5       	brge	.+82     	; 0x1946 <HLCD_vInitLcd+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f4:	6f a1       	ldd	r22, Y+39	; 0x27
    18f6:	78 a5       	ldd	r23, Y+40	; 0x28
    18f8:	89 a5       	ldd	r24, Y+41	; 0x29
    18fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e2       	ldi	r20, 0x20	; 32
    1902:	51 e4       	ldi	r21, 0x41	; 65
    1904:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	bc 01       	movw	r22, r24
    190e:	cd 01       	movw	r24, r26
    1910:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	9a a3       	std	Y+34, r25	; 0x22
    191a:	89 a3       	std	Y+33, r24	; 0x21
    191c:	0f c0       	rjmp	.+30     	; 0x193c <HLCD_vInitLcd+0x458>
    191e:	88 ec       	ldi	r24, 0xC8	; 200
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	98 a3       	std	Y+32, r25	; 0x20
    1924:	8f 8f       	std	Y+31, r24	; 0x1f
    1926:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1928:	98 a1       	ldd	r25, Y+32	; 0x20
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <HLCD_vInitLcd+0x446>
    192e:	98 a3       	std	Y+32, r25	; 0x20
    1930:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1932:	89 a1       	ldd	r24, Y+33	; 0x21
    1934:	9a a1       	ldd	r25, Y+34	; 0x22
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	9a a3       	std	Y+34, r25	; 0x22
    193a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193c:	89 a1       	ldd	r24, Y+33	; 0x21
    193e:	9a a1       	ldd	r25, Y+34	; 0x22
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	69 f7       	brne	.-38     	; 0x191e <HLCD_vInitLcd+0x43a>
    1944:	14 c0       	rjmp	.+40     	; 0x196e <HLCD_vInitLcd+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1946:	6b a1       	ldd	r22, Y+35	; 0x23
    1948:	7c a1       	ldd	r23, Y+36	; 0x24
    194a:	8d a1       	ldd	r24, Y+37	; 0x25
    194c:	9e a1       	ldd	r25, Y+38	; 0x26
    194e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	9a a3       	std	Y+34, r25	; 0x22
    1958:	89 a3       	std	Y+33, r24	; 0x21
    195a:	89 a1       	ldd	r24, Y+33	; 0x21
    195c:	9a a1       	ldd	r25, Y+34	; 0x22
    195e:	9e 8f       	std	Y+30, r25	; 0x1e
    1960:	8d 8f       	std	Y+29, r24	; 0x1d
    1962:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1964:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <HLCD_vInitLcd+0x482>
    196a:	9e 8f       	std	Y+30, r25	; 0x1e
    196c:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait 39 us*/
	_delay_ms(1);
	/*send clear command */
	HLCD_vSendCommand(Clear);
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <HLCD_vSendCommand>
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	a0 e7       	ldi	r26, 0x70	; 112
    197a:	b1 e4       	ldi	r27, 0x41	; 65
    197c:	89 8f       	std	Y+25, r24	; 0x19
    197e:	9a 8f       	std	Y+26, r25	; 0x1a
    1980:	ab 8f       	std	Y+27, r26	; 0x1b
    1982:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1984:	69 8d       	ldd	r22, Y+25	; 0x19
    1986:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1988:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	4a ef       	ldi	r20, 0xFA	; 250
    1992:	54 e4       	ldi	r21, 0x44	; 68
    1994:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	8d 8b       	std	Y+21, r24	; 0x15
    199e:	9e 8b       	std	Y+22, r25	; 0x16
    19a0:	af 8b       	std	Y+23, r26	; 0x17
    19a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19a4:	6d 89       	ldd	r22, Y+21	; 0x15
    19a6:	7e 89       	ldd	r23, Y+22	; 0x16
    19a8:	8f 89       	ldd	r24, Y+23	; 0x17
    19aa:	98 8d       	ldd	r25, Y+24	; 0x18
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e8       	ldi	r20, 0x80	; 128
    19b2:	5f e3       	ldi	r21, 0x3F	; 63
    19b4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19b8:	88 23       	and	r24, r24
    19ba:	2c f4       	brge	.+10     	; 0x19c6 <HLCD_vInitLcd+0x4e2>
		__ticks = 1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	9c 8b       	std	Y+20, r25	; 0x14
    19c2:	8b 8b       	std	Y+19, r24	; 0x13
    19c4:	3f c0       	rjmp	.+126    	; 0x1a44 <HLCD_vInitLcd+0x560>
	else if (__tmp > 65535)
    19c6:	6d 89       	ldd	r22, Y+21	; 0x15
    19c8:	7e 89       	ldd	r23, Y+22	; 0x16
    19ca:	8f 89       	ldd	r24, Y+23	; 0x17
    19cc:	98 8d       	ldd	r25, Y+24	; 0x18
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	3f ef       	ldi	r19, 0xFF	; 255
    19d2:	4f e7       	ldi	r20, 0x7F	; 127
    19d4:	57 e4       	ldi	r21, 0x47	; 71
    19d6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19da:	18 16       	cp	r1, r24
    19dc:	4c f5       	brge	.+82     	; 0x1a30 <HLCD_vInitLcd+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19de:	69 8d       	ldd	r22, Y+25	; 0x19
    19e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e2       	ldi	r20, 0x20	; 32
    19ec:	51 e4       	ldi	r21, 0x41	; 65
    19ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	9c 8b       	std	Y+20, r25	; 0x14
    1a04:	8b 8b       	std	Y+19, r24	; 0x13
    1a06:	0f c0       	rjmp	.+30     	; 0x1a26 <HLCD_vInitLcd+0x542>
    1a08:	88 ec       	ldi	r24, 0xC8	; 200
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9a 8b       	std	Y+18, r25	; 0x12
    1a0e:	89 8b       	std	Y+17, r24	; 0x11
    1a10:	89 89       	ldd	r24, Y+17	; 0x11
    1a12:	9a 89       	ldd	r25, Y+18	; 0x12
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <HLCD_vInitLcd+0x530>
    1a18:	9a 8b       	std	Y+18, r25	; 0x12
    1a1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	9c 8b       	std	Y+20, r25	; 0x14
    1a24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a26:	8b 89       	ldd	r24, Y+19	; 0x13
    1a28:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	69 f7       	brne	.-38     	; 0x1a08 <HLCD_vInitLcd+0x524>
    1a2e:	14 c0       	rjmp	.+40     	; 0x1a58 <HLCD_vInitLcd+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a30:	6d 89       	ldd	r22, Y+21	; 0x15
    1a32:	7e 89       	ldd	r23, Y+22	; 0x16
    1a34:	8f 89       	ldd	r24, Y+23	; 0x17
    1a36:	98 8d       	ldd	r25, Y+24	; 0x18
    1a38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9c 8b       	std	Y+20, r25	; 0x14
    1a42:	8b 8b       	std	Y+19, r24	; 0x13
    1a44:	8b 89       	ldd	r24, Y+19	; 0x13
    1a46:	9c 89       	ldd	r25, Y+20	; 0x14
    1a48:	98 8b       	std	Y+16, r25	; 0x10
    1a4a:	8f 87       	std	Y+15, r24	; 0x0f
    1a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a4e:	98 89       	ldd	r25, Y+16	; 0x10
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <HLCD_vInitLcd+0x56c>
    1a54:	98 8b       	std	Y+16, r25	; 0x10
    1a56:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);
	/*send entrymode command*/
	HLCD_vSendCommand(Entry_mode);
    1a58:	86 e0       	ldi	r24, 0x06	; 6
    1a5a:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <HLCD_vSendCommand>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a0 e0       	ldi	r26, 0x00	; 0
    1a64:	b0 e4       	ldi	r27, 0x40	; 64
    1a66:	8b 87       	std	Y+11, r24	; 0x0b
    1a68:	9c 87       	std	Y+12, r25	; 0x0c
    1a6a:	ad 87       	std	Y+13, r26	; 0x0d
    1a6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	4a ef       	ldi	r20, 0xFA	; 250
    1a7c:	54 e4       	ldi	r21, 0x44	; 68
    1a7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	8f 83       	std	Y+7, r24	; 0x07
    1a88:	98 87       	std	Y+8, r25	; 0x08
    1a8a:	a9 87       	std	Y+9, r26	; 0x09
    1a8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a90:	78 85       	ldd	r23, Y+8	; 0x08
    1a92:	89 85       	ldd	r24, Y+9	; 0x09
    1a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e8       	ldi	r20, 0x80	; 128
    1a9c:	5f e3       	ldi	r21, 0x3F	; 63
    1a9e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aa2:	88 23       	and	r24, r24
    1aa4:	2c f4       	brge	.+10     	; 0x1ab0 <HLCD_vInitLcd+0x5cc>
		__ticks = 1;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	9e 83       	std	Y+6, r25	; 0x06
    1aac:	8d 83       	std	Y+5, r24	; 0x05
    1aae:	3f c0       	rjmp	.+126    	; 0x1b2e <HLCD_vInitLcd+0x64a>
	else if (__tmp > 65535)
    1ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab2:	78 85       	ldd	r23, Y+8	; 0x08
    1ab4:	89 85       	ldd	r24, Y+9	; 0x09
    1ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	3f ef       	ldi	r19, 0xFF	; 255
    1abc:	4f e7       	ldi	r20, 0x7F	; 127
    1abe:	57 e4       	ldi	r21, 0x47	; 71
    1ac0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ac4:	18 16       	cp	r1, r24
    1ac6:	4c f5       	brge	.+82     	; 0x1b1a <HLCD_vInitLcd+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1acc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ace:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e2       	ldi	r20, 0x20	; 32
    1ad6:	51 e4       	ldi	r21, 0x41	; 65
    1ad8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	cd 01       	movw	r24, r26
    1ae4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	9e 83       	std	Y+6, r25	; 0x06
    1aee:	8d 83       	std	Y+5, r24	; 0x05
    1af0:	0f c0       	rjmp	.+30     	; 0x1b10 <HLCD_vInitLcd+0x62c>
    1af2:	88 ec       	ldi	r24, 0xC8	; 200
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	9c 83       	std	Y+4, r25	; 0x04
    1af8:	8b 83       	std	Y+3, r24	; 0x03
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	9c 81       	ldd	r25, Y+4	; 0x04
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <HLCD_vInitLcd+0x61a>
    1b02:	9c 83       	std	Y+4, r25	; 0x04
    1b04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b06:	8d 81       	ldd	r24, Y+5	; 0x05
    1b08:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	9e 83       	std	Y+6, r25	; 0x06
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b10:	8d 81       	ldd	r24, Y+5	; 0x05
    1b12:	9e 81       	ldd	r25, Y+6	; 0x06
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	69 f7       	brne	.-38     	; 0x1af2 <HLCD_vInitLcd+0x60e>
    1b18:	14 c0       	rjmp	.+40     	; 0x1b42 <HLCD_vInitLcd+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1c:	78 85       	ldd	r23, Y+8	; 0x08
    1b1e:	89 85       	ldd	r24, Y+9	; 0x09
    1b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	9e 83       	std	Y+6, r25	; 0x06
    1b2c:	8d 83       	std	Y+5, r24	; 0x05
    1b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b30:	9e 81       	ldd	r25, Y+6	; 0x06
    1b32:	9a 83       	std	Y+2, r25	; 0x02
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <HLCD_vInitLcd+0x656>
    1b3e:	9a 83       	std	Y+2, r25	; 0x02
    1b40:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1b42:	cc 5a       	subi	r28, 0xAC	; 172
    1b44:	df 4f       	sbci	r29, 0xFF	; 255
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	1f 91       	pop	r17
    1b56:	0f 91       	pop	r16
    1b58:	08 95       	ret

00001b5a <HLCD_vSendCommand>:

static void HLCD_vSendCommand( u8 copy_u8command)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	2f 97       	sbiw	r28, 0x0f	; 15
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	8f 87       	std	Y+15, r24	; 0x0f
	/*set rs pin to 0 clr rs*/
	MDIO_vSetPinValue(CTR_PORT,LCD_RS,DIO_LOW);
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	0e 94 8a 07 	call	0xf14	; 0xf14 <MDIO_vSetPinValue>
	/*clr rw */
	MDIO_vSetPinValue(CTR_PORT,LCD_RW,DIO_LOW);
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	61 e0       	ldi	r22, 0x01	; 1
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	0e 94 8a 07 	call	0xf14	; 0xf14 <MDIO_vSetPinValue>

	/*set E pin*/
	MDIO_vSetPinValue(CTR_PORT,LCD_E,DIO_HIGH);
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	62 e0       	ldi	r22, 0x02	; 2
    1b88:	41 e0       	ldi	r20, 0x01	; 1
    1b8a:	0e 94 8a 07 	call	0xf14	; 0xf14 <MDIO_vSetPinValue>

	/*send command */
	MDIO_vSetPortValue(DATA_PORT,copy_u8command);
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b92:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_vSetPortValue>

	/*clr E*/
	MDIO_vSetPinValue(CTR_PORT,LCD_E,DIO_LOW);
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	62 e0       	ldi	r22, 0x02	; 2
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	0e 94 8a 07 	call	0xf14	; 0xf14 <MDIO_vSetPinValue>
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	a0 ea       	ldi	r26, 0xA0	; 160
    1ba6:	b0 e4       	ldi	r27, 0x40	; 64
    1ba8:	8b 87       	std	Y+11, r24	; 0x0b
    1baa:	9c 87       	std	Y+12, r25	; 0x0c
    1bac:	ad 87       	std	Y+13, r26	; 0x0d
    1bae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	4a ef       	ldi	r20, 0xFA	; 250
    1bbe:	54 e4       	ldi	r21, 0x44	; 68
    1bc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	8f 83       	std	Y+7, r24	; 0x07
    1bca:	98 87       	std	Y+8, r25	; 0x08
    1bcc:	a9 87       	std	Y+9, r26	; 0x09
    1bce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd2:	78 85       	ldd	r23, Y+8	; 0x08
    1bd4:	89 85       	ldd	r24, Y+9	; 0x09
    1bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1be4:	88 23       	and	r24, r24
    1be6:	2c f4       	brge	.+10     	; 0x1bf2 <HLCD_vSendCommand+0x98>
		__ticks = 1;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	9e 83       	std	Y+6, r25	; 0x06
    1bee:	8d 83       	std	Y+5, r24	; 0x05
    1bf0:	3f c0       	rjmp	.+126    	; 0x1c70 <HLCD_vSendCommand+0x116>
	else if (__tmp > 65535)
    1bf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf4:	78 85       	ldd	r23, Y+8	; 0x08
    1bf6:	89 85       	ldd	r24, Y+9	; 0x09
    1bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	3f ef       	ldi	r19, 0xFF	; 255
    1bfe:	4f e7       	ldi	r20, 0x7F	; 127
    1c00:	57 e4       	ldi	r21, 0x47	; 71
    1c02:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c06:	18 16       	cp	r1, r24
    1c08:	4c f5       	brge	.+82     	; 0x1c5c <HLCD_vSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e2       	ldi	r20, 0x20	; 32
    1c18:	51 e4       	ldi	r21, 0x41	; 65
    1c1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	8d 83       	std	Y+5, r24	; 0x05
    1c32:	0f c0       	rjmp	.+30     	; 0x1c52 <HLCD_vSendCommand+0xf8>
    1c34:	88 ec       	ldi	r24, 0xC8	; 200
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9c 83       	std	Y+4, r25	; 0x04
    1c3a:	8b 83       	std	Y+3, r24	; 0x03
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <HLCD_vSendCommand+0xe6>
    1c44:	9c 83       	std	Y+4, r25	; 0x04
    1c46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	9e 83       	std	Y+6, r25	; 0x06
    1c50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	9e 81       	ldd	r25, Y+6	; 0x06
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	69 f7       	brne	.-38     	; 0x1c34 <HLCD_vSendCommand+0xda>
    1c5a:	14 c0       	rjmp	.+40     	; 0x1c84 <HLCD_vSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5e:	78 85       	ldd	r23, Y+8	; 0x08
    1c60:	89 85       	ldd	r24, Y+9	; 0x09
    1c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9e 83       	std	Y+6, r25	; 0x06
    1c6e:	8d 83       	std	Y+5, r24	; 0x05
    1c70:	8d 81       	ldd	r24, Y+5	; 0x05
    1c72:	9e 81       	ldd	r25, Y+6	; 0x06
    1c74:	9a 83       	std	Y+2, r25	; 0x02
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <HLCD_vSendCommand+0x122>
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01

	/*wait 5ms*/
	_delay_ms(5);
	/*set E pin*/
	MDIO_vSetPinValue(CTR_PORT,LCD_E,DIO_HIGH);
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	62 e0       	ldi	r22, 0x02	; 2
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	0e 94 8a 07 	call	0xf14	; 0xf14 <MDIO_vSetPinValue>

}
    1c8e:	2f 96       	adiw	r28, 0x0f	; 15
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <HLCD_vSendChar>:


void HLCD_vSendChar( u8 copy_u8Char){
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	2f 97       	sbiw	r28, 0x0f	; 15
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	cd bf       	out	0x3d, r28	; 61
    1cb4:	8f 87       	std	Y+15, r24	; 0x0f
	/*set rs pin to 1 set rs*/
	MDIO_vSetPinValue(CTR_PORT, LCD_RS, DIO_HIGH);
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	60 e0       	ldi	r22, 0x00	; 0
    1cba:	41 e0       	ldi	r20, 0x01	; 1
    1cbc:	0e 94 8a 07 	call	0xf14	; 0xf14 <MDIO_vSetPinValue>
	/*clr rw */
	MDIO_vSetPinValue(CTR_PORT, LCD_RW, DIO_LOW);
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	61 e0       	ldi	r22, 0x01	; 1
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	0e 94 8a 07 	call	0xf14	; 0xf14 <MDIO_vSetPinValue>

	/*set E pin*/
	MDIO_vSetPinValue(CTR_PORT, LCD_E, DIO_HIGH);
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	62 e0       	ldi	r22, 0x02	; 2
    1cce:	41 e0       	ldi	r20, 0x01	; 1
    1cd0:	0e 94 8a 07 	call	0xf14	; 0xf14 <MDIO_vSetPinValue>

	/*send command */
	MDIO_vSetPortValue(DATA_PORT, copy_u8Char);
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1cd8:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MDIO_vSetPortValue>

	/*clr E*/
	MDIO_vSetPinValue(CTR_PORT, LCD_E, DIO_LOW);
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	62 e0       	ldi	r22, 0x02	; 2
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	0e 94 8a 07 	call	0xf14	; 0xf14 <MDIO_vSetPinValue>
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	a0 ea       	ldi	r26, 0xA0	; 160
    1cec:	b0 e4       	ldi	r27, 0x40	; 64
    1cee:	8b 87       	std	Y+11, r24	; 0x0b
    1cf0:	9c 87       	std	Y+12, r25	; 0x0c
    1cf2:	ad 87       	std	Y+13, r26	; 0x0d
    1cf4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	4a ef       	ldi	r20, 0xFA	; 250
    1d04:	54 e4       	ldi	r21, 0x44	; 68
    1d06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	8f 83       	std	Y+7, r24	; 0x07
    1d10:	98 87       	std	Y+8, r25	; 0x08
    1d12:	a9 87       	std	Y+9, r26	; 0x09
    1d14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d16:	6f 81       	ldd	r22, Y+7	; 0x07
    1d18:	78 85       	ldd	r23, Y+8	; 0x08
    1d1a:	89 85       	ldd	r24, Y+9	; 0x09
    1d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e8       	ldi	r20, 0x80	; 128
    1d24:	5f e3       	ldi	r21, 0x3F	; 63
    1d26:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d2a:	88 23       	and	r24, r24
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <HLCD_vSendChar+0x98>
		__ticks = 1;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9e 83       	std	Y+6, r25	; 0x06
    1d34:	8d 83       	std	Y+5, r24	; 0x05
    1d36:	3f c0       	rjmp	.+126    	; 0x1db6 <HLCD_vSendChar+0x116>
	else if (__tmp > 65535)
    1d38:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3a:	78 85       	ldd	r23, Y+8	; 0x08
    1d3c:	89 85       	ldd	r24, Y+9	; 0x09
    1d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	3f ef       	ldi	r19, 0xFF	; 255
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	57 e4       	ldi	r21, 0x47	; 71
    1d48:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	4c f5       	brge	.+82     	; 0x1da2 <HLCD_vSendChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e2       	ldi	r20, 0x20	; 32
    1d5e:	51 e4       	ldi	r21, 0x41	; 65
    1d60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	bc 01       	movw	r22, r24
    1d6a:	cd 01       	movw	r24, r26
    1d6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	8d 83       	std	Y+5, r24	; 0x05
    1d78:	0f c0       	rjmp	.+30     	; 0x1d98 <HLCD_vSendChar+0xf8>
    1d7a:	88 ec       	ldi	r24, 0xC8	; 200
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9c 83       	std	Y+4, r25	; 0x04
    1d80:	8b 83       	std	Y+3, r24	; 0x03
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	9c 81       	ldd	r25, Y+4	; 0x04
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <HLCD_vSendChar+0xe6>
    1d8a:	9c 83       	std	Y+4, r25	; 0x04
    1d8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	9e 83       	std	Y+6, r25	; 0x06
    1d96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d98:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	69 f7       	brne	.-38     	; 0x1d7a <HLCD_vSendChar+0xda>
    1da0:	14 c0       	rjmp	.+40     	; 0x1dca <HLCD_vSendChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da2:	6f 81       	ldd	r22, Y+7	; 0x07
    1da4:	78 85       	ldd	r23, Y+8	; 0x08
    1da6:	89 85       	ldd	r24, Y+9	; 0x09
    1da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1daa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	9e 83       	std	Y+6, r25	; 0x06
    1db4:	8d 83       	std	Y+5, r24	; 0x05
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	9a 83       	std	Y+2, r25	; 0x02
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <HLCD_vSendChar+0x122>
    1dc6:	9a 83       	std	Y+2, r25	; 0x02
    1dc8:	89 83       	std	Y+1, r24	; 0x01

	/*wait 5ms*/
	_delay_ms(5);
	/*set E pin*/
	MDIO_vSetPinValue(CTR_PORT, LCD_E, DIO_HIGH);
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	62 e0       	ldi	r22, 0x02	; 2
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	0e 94 8a 07 	call	0xf14	; 0xf14 <MDIO_vSetPinValue>
}
    1dd4:	2f 96       	adiw	r28, 0x0f	; 15
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <HLCD_vDisplayString>:



void HLCD_vDisplayString( u8 *p_u8ptr){
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <HLCD_vDisplayString+0x6>
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	0a c0       	rjmp	.+20     	; 0x1e0a <HLCD_vDisplayString+0x24>

	/*create infinite loop while()*/
	while ('\0'!= *p_u8ptr)
	{
		/*send char by char of the array */
		HLCD_vSendChar(*p_u8ptr);
    1df6:	e9 81       	ldd	r30, Y+1	; 0x01
    1df8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfa:	80 81       	ld	r24, Z
    1dfc:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <HLCD_vSendChar>
		/*increment the iterator */
		p_u8ptr++;
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	9a 81       	ldd	r25, Y+2	; 0x02
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	9a 83       	std	Y+2, r25	; 0x02
    1e08:	89 83       	std	Y+1, r24	; 0x01


void HLCD_vDisplayString( u8 *p_u8ptr){

	/*create infinite loop while()*/
	while ('\0'!= *p_u8ptr)
    1e0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0e:	80 81       	ld	r24, Z
    1e10:	88 23       	and	r24, r24
    1e12:	89 f7       	brne	.-30     	; 0x1df6 <HLCD_vDisplayString+0x10>
		/*send char by char of the array */
		HLCD_vSendChar(*p_u8ptr);
		/*increment the iterator */
		p_u8ptr++;
	}
}
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <HLCD_vWriteNumber>:

void HLCD_vWriteNumber(u16 Copy_u16Number)
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	29 97       	sbiw	r28, 0x09	; 9
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	99 87       	std	Y+9, r25	; 0x09
    1e34:	88 87       	std	Y+8, r24	; 0x08
	/*create arr to hold nums' digits*/
	u8 Local_u8arr[7]={0};
    1e36:	87 e0       	ldi	r24, 0x07	; 7
    1e38:	fe 01       	movw	r30, r28
    1e3a:	31 96       	adiw	r30, 0x01	; 1
    1e3c:	df 01       	movw	r26, r30
    1e3e:	98 2f       	mov	r25, r24
    1e40:	1d 92       	st	X+, r1
    1e42:	9a 95       	dec	r25
    1e44:	e9 f7       	brne	.-6      	; 0x1e40 <HLCD_vWriteNumber+0x22>

	/*turn number to char using itoa function */
	itoa(Copy_u16Number ,Local_u8arr,10);
    1e46:	88 85       	ldd	r24, Y+8	; 0x08
    1e48:	99 85       	ldd	r25, Y+9	; 0x09
    1e4a:	9e 01       	movw	r18, r28
    1e4c:	2f 5f       	subi	r18, 0xFF	; 255
    1e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e50:	b9 01       	movw	r22, r18
    1e52:	4a e0       	ldi	r20, 0x0A	; 10
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	0e 94 8b 10 	call	0x2116	; 0x2116 <itoa>
	/*send the translated value to lcd */
	HLCD_vDisplayString(Local_u8arr);
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	01 96       	adiw	r24, 0x01	; 1
    1e5e:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <HLCD_vDisplayString>

}
    1e62:	29 96       	adiw	r28, 0x09	; 9
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	cd bf       	out	0x3d, r28	; 61
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	08 95       	ret

00001e74 <HLCD_vClrLcd>:

void HLCD_vClrLcd(void){
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
	HLCD_vSendChar(Clear);
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <HLCD_vSendChar>

}
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <HLCD_vGotoXY>:


void HLCD_vGotoXY(u8 copy_u8PosX,u8 copy_u8PosY)
{
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	63 97       	sbiw	r28, 0x13	; 19
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	88 8b       	std	Y+16, r24	; 0x10
    1e9e:	69 8b       	std	Y+17, r22	; 0x11
	u8 Local_Postion;		//the exact address to start write on lcd

	if (copy_u8PosX>=LCD_ROW_2 || copy_u8PosX <=LCD_ROW_2 ||copy_u8PosY>16 || copy_u8PosY<0)
    1ea0:	88 89       	ldd	r24, Y+16	; 0x10
    1ea2:	88 23       	and	r24, r24
    1ea4:	31 f4       	brne	.+12     	; 0x1eb2 <HLCD_vGotoXY+0x2a>
    1ea6:	88 89       	ldd	r24, Y+16	; 0x10
    1ea8:	82 30       	cpi	r24, 0x02	; 2
    1eaa:	18 f0       	brcs	.+6      	; 0x1eb2 <HLCD_vGotoXY+0x2a>
    1eac:	89 89       	ldd	r24, Y+17	; 0x11
    1eae:	81 31       	cpi	r24, 0x11	; 17
    1eb0:	10 f0       	brcs	.+4      	; 0x1eb6 <HLCD_vGotoXY+0x2e>
	{
		Local_Postion=F_ADS1;
    1eb2:	80 e4       	ldi	r24, 0x40	; 64
    1eb4:	8f 87       	std	Y+15, r24	; 0x0f
	}
	/*switch on the lines of lcd */
	switch(copy_u8PosX)
    1eb6:	88 89       	ldd	r24, Y+16	; 0x10
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	3b 8b       	std	Y+19, r19	; 0x13
    1ebe:	2a 8b       	std	Y+18, r18	; 0x12
    1ec0:	8a 89       	ldd	r24, Y+18	; 0x12
    1ec2:	9b 89       	ldd	r25, Y+19	; 0x13
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	31 f0       	breq	.+12     	; 0x1ed4 <HLCD_vGotoXY+0x4c>
    1ec8:	2a 89       	ldd	r18, Y+18	; 0x12
    1eca:	3b 89       	ldd	r19, Y+19	; 0x13
    1ecc:	21 30       	cpi	r18, 0x01	; 1
    1ece:	31 05       	cpc	r19, r1
    1ed0:	29 f0       	breq	.+10     	; 0x1edc <HLCD_vGotoXY+0x54>
    1ed2:	07 c0       	rjmp	.+14     	; 0x1ee2 <HLCD_vGotoXY+0x5a>
	{
	case LCD_ROW_1:
		Local_Postion=lcd_SetCursor+(copy_u8PosY-1);
    1ed4:	89 89       	ldd	r24, Y+17	; 0x11
    1ed6:	81 58       	subi	r24, 0x81	; 129
    1ed8:	8f 87       	std	Y+15, r24	; 0x0f
    1eda:	03 c0       	rjmp	.+6      	; 0x1ee2 <HLCD_vGotoXY+0x5a>
		break;
	case LCD_ROW_2:
		Local_Postion=F_ADS1+(copy_u8PosY-1);
    1edc:	89 89       	ldd	r24, Y+17	; 0x11
    1ede:	81 5c       	subi	r24, 0xC1	; 193
    1ee0:	8f 87       	std	Y+15, r24	; 0x0f
		break;
	}
	HLCD_vSendCommand(Local_Postion);
    1ee2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee4:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <HLCD_vSendCommand>
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a0 e8       	ldi	r26, 0x80	; 128
    1eee:	bf e3       	ldi	r27, 0x3F	; 63
    1ef0:	8b 87       	std	Y+11, r24	; 0x0b
    1ef2:	9c 87       	std	Y+12, r25	; 0x0c
    1ef4:	ad 87       	std	Y+13, r26	; 0x0d
    1ef6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1efe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	4a ef       	ldi	r20, 0xFA	; 250
    1f06:	54 e4       	ldi	r21, 0x44	; 68
    1f08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	8f 83       	std	Y+7, r24	; 0x07
    1f12:	98 87       	std	Y+8, r25	; 0x08
    1f14:	a9 87       	std	Y+9, r26	; 0x09
    1f16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f18:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1a:	78 85       	ldd	r23, Y+8	; 0x08
    1f1c:	89 85       	ldd	r24, Y+9	; 0x09
    1f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e8       	ldi	r20, 0x80	; 128
    1f26:	5f e3       	ldi	r21, 0x3F	; 63
    1f28:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f2c:	88 23       	and	r24, r24
    1f2e:	2c f4       	brge	.+10     	; 0x1f3a <HLCD_vGotoXY+0xb2>
		__ticks = 1;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
    1f38:	3f c0       	rjmp	.+126    	; 0x1fb8 <HLCD_vGotoXY+0x130>
	else if (__tmp > 65535)
    1f3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3c:	78 85       	ldd	r23, Y+8	; 0x08
    1f3e:	89 85       	ldd	r24, Y+9	; 0x09
    1f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	3f ef       	ldi	r19, 0xFF	; 255
    1f46:	4f e7       	ldi	r20, 0x7F	; 127
    1f48:	57 e4       	ldi	r21, 0x47	; 71
    1f4a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f4e:	18 16       	cp	r1, r24
    1f50:	4c f5       	brge	.+82     	; 0x1fa4 <HLCD_vGotoXY+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e2       	ldi	r20, 0x20	; 32
    1f60:	51 e4       	ldi	r21, 0x41	; 65
    1f62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	bc 01       	movw	r22, r24
    1f6c:	cd 01       	movw	r24, r26
    1f6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	9e 83       	std	Y+6, r25	; 0x06
    1f78:	8d 83       	std	Y+5, r24	; 0x05
    1f7a:	0f c0       	rjmp	.+30     	; 0x1f9a <HLCD_vGotoXY+0x112>
    1f7c:	88 ec       	ldi	r24, 0xC8	; 200
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	9c 83       	std	Y+4, r25	; 0x04
    1f82:	8b 83       	std	Y+3, r24	; 0x03
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	9c 81       	ldd	r25, Y+4	; 0x04
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <HLCD_vGotoXY+0x100>
    1f8c:	9c 83       	std	Y+4, r25	; 0x04
    1f8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f90:	8d 81       	ldd	r24, Y+5	; 0x05
    1f92:	9e 81       	ldd	r25, Y+6	; 0x06
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	9e 83       	std	Y+6, r25	; 0x06
    1f98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9e:	00 97       	sbiw	r24, 0x00	; 0
    1fa0:	69 f7       	brne	.-38     	; 0x1f7c <HLCD_vGotoXY+0xf4>
    1fa2:	14 c0       	rjmp	.+40     	; 0x1fcc <HLCD_vGotoXY+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa6:	78 85       	ldd	r23, Y+8	; 0x08
    1fa8:	89 85       	ldd	r24, Y+9	; 0x09
    1faa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9e 83       	std	Y+6, r25	; 0x06
    1fb6:	8d 83       	std	Y+5, r24	; 0x05
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbc:	9a 83       	std	Y+2, r25	; 0x02
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <HLCD_vGotoXY+0x13c>
    1fc8:	9a 83       	std	Y+2, r25	; 0x02
    1fca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
}
    1fcc:	63 96       	adiw	r28, 0x13	; 19
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <HLCD_vStrPosition>:


void HLCD_vStrPosition(u8 copy_u8PosX,u8 copy_u8PosY,u8 *p_u8str)
{
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <HLCD_vStrPosition+0x6>
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <HLCD_vStrPosition+0x8>
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	89 83       	std	Y+1, r24	; 0x01
    1fec:	6a 83       	std	Y+2, r22	; 0x02
    1fee:	5c 83       	std	Y+4, r21	; 0x04
    1ff0:	4b 83       	std	Y+3, r20	; 0x03

	HLCD_vGotoXY(copy_u8PosX,copy_u8PosY);
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	6a 81       	ldd	r22, Y+2	; 0x02
    1ff6:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <HLCD_vGotoXY>
	HLCD_vDisplayString(p_u8str);
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <HLCD_vDisplayString>

}
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <HLCD_vSaveCustomChar>:

void HLCD_vSaveCustomChar(u8 copy_u8location,u8 *p_u8pattern)
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	00 d0       	rcall	.+0      	; 0x2016 <HLCD_vSaveCustomChar+0x6>
    2016:	00 d0       	rcall	.+0      	; 0x2018 <HLCD_vSaveCustomChar+0x8>
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	8a 83       	std	Y+2, r24	; 0x02
    201e:	7c 83       	std	Y+4, r23	; 0x04
    2020:	6b 83       	std	Y+3, r22	; 0x03
	/*create iterator */
	u8 iterator;
	/*AC points to CGRAM*/
	HLCD_vSendCommand(F_ADS_CG);
    2022:	80 e4       	ldi	r24, 0x40	; 64
    2024:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <HLCD_vSendCommand>
	/*draw char*/
	for (iterator=0; iterator<sizeof(copy_u8CustChar)/sizeof(copy_u8CustChar[0]); iterator++)
    2028:	19 82       	std	Y+1, r1	; 0x01
    202a:	0f c0       	rjmp	.+30     	; 0x204a <HLCD_vSaveCustomChar+0x3a>
	{
		/*send char to CGRAM */
		HLCD_vSendChar(copy_u8CustChar[iterator]);
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	88 2f       	mov	r24, r24
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	fc 01       	movw	r30, r24
    2038:	e8 59       	subi	r30, 0x98	; 152
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 81       	ld	r24, Z
    203e:	91 81       	ldd	r25, Z+1	; 0x01
    2040:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <HLCD_vSendChar>
	/*create iterator */
	u8 iterator;
	/*AC points to CGRAM*/
	HLCD_vSendCommand(F_ADS_CG);
	/*draw char*/
	for (iterator=0; iterator<sizeof(copy_u8CustChar)/sizeof(copy_u8CustChar[0]); iterator++)
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	8f 5f       	subi	r24, 0xFF	; 255
    2048:	89 83       	std	Y+1, r24	; 0x01
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	82 30       	cpi	r24, 0x02	; 2
    204e:	70 f3       	brcs	.-36     	; 0x202c <HLCD_vSaveCustomChar+0x1c>
	{
		/*send char to CGRAM */
		HLCD_vSendChar(copy_u8CustChar[iterator]);
	}
	/*return AC to DDRAM*/
	HLCD_vGotoXY(0,0);
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <HLCD_vGotoXY>
	/*send char to lcd*/
	for (iterator=0;iterator<8;iterator++)
    2058:	19 82       	std	Y+1, r1	; 0x01
    205a:	06 c0       	rjmp	.+12     	; 0x2068 <HLCD_vSaveCustomChar+0x58>
	{
		HLCD_vSendChar(iterator);
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <HLCD_vSendChar>
		HLCD_vSendChar(copy_u8CustChar[iterator]);
	}
	/*return AC to DDRAM*/
	HLCD_vGotoXY(0,0);
	/*send char to lcd*/
	for (iterator=0;iterator<8;iterator++)
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	8f 5f       	subi	r24, 0xFF	; 255
    2066:	89 83       	std	Y+1, r24	; 0x01
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	88 30       	cpi	r24, 0x08	; 8
    206c:	b8 f3       	brcs	.-18     	; 0x205c <HLCD_vSaveCustomChar+0x4c>
	{
		HLCD_vSendChar(iterator);
	}

}
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <main>:
#define show_char_on_lcd 1

#define calculator 0

int main()
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	0f 92       	push	r0
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
#if show_char_on_lcd
	u8 Data;
	HKYP_vInit();
    2086:	0e 94 ad 09 	call	0x135a	; 0x135a <HKYP_vInit>
	HLCD_vInitLcd();
    208a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <HLCD_vInitLcd>
	HLCD_vSendChar('a');
    208e:	81 e6       	ldi	r24, 0x61	; 97
    2090:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <HLCD_vSendChar>


	while(1)
	{
		Data=HKYP_u8ReadButton();
    2094:	0e 94 bc 09 	call	0x1378	; 0x1378 <HKYP_u8ReadButton>
    2098:	89 83       	std	Y+1, r24	; 0x01
		if (Data!=NOT_PRESSED)
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	8f 3f       	cpi	r24, 0xFF	; 255
    209e:	d1 f3       	breq	.-12     	; 0x2094 <main+0x18>
		{
			HLCD_vSendChar(Data);
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <HLCD_vSendChar>
    20a6:	f6 cf       	rjmp	.-20     	; 0x2094 <main+0x18>

000020a8 <__prologue_saves__>:
    20a8:	2f 92       	push	r2
    20aa:	3f 92       	push	r3
    20ac:	4f 92       	push	r4
    20ae:	5f 92       	push	r5
    20b0:	6f 92       	push	r6
    20b2:	7f 92       	push	r7
    20b4:	8f 92       	push	r8
    20b6:	9f 92       	push	r9
    20b8:	af 92       	push	r10
    20ba:	bf 92       	push	r11
    20bc:	cf 92       	push	r12
    20be:	df 92       	push	r13
    20c0:	ef 92       	push	r14
    20c2:	ff 92       	push	r15
    20c4:	0f 93       	push	r16
    20c6:	1f 93       	push	r17
    20c8:	cf 93       	push	r28
    20ca:	df 93       	push	r29
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	ca 1b       	sub	r28, r26
    20d2:	db 0b       	sbc	r29, r27
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	09 94       	ijmp

000020e0 <__epilogue_restores__>:
    20e0:	2a 88       	ldd	r2, Y+18	; 0x12
    20e2:	39 88       	ldd	r3, Y+17	; 0x11
    20e4:	48 88       	ldd	r4, Y+16	; 0x10
    20e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    20e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    20ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    20ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    20ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    20f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    20f2:	b9 84       	ldd	r11, Y+9	; 0x09
    20f4:	c8 84       	ldd	r12, Y+8	; 0x08
    20f6:	df 80       	ldd	r13, Y+7	; 0x07
    20f8:	ee 80       	ldd	r14, Y+6	; 0x06
    20fa:	fd 80       	ldd	r15, Y+5	; 0x05
    20fc:	0c 81       	ldd	r16, Y+4	; 0x04
    20fe:	1b 81       	ldd	r17, Y+3	; 0x03
    2100:	aa 81       	ldd	r26, Y+2	; 0x02
    2102:	b9 81       	ldd	r27, Y+1	; 0x01
    2104:	ce 0f       	add	r28, r30
    2106:	d1 1d       	adc	r29, r1
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	ed 01       	movw	r28, r26
    2114:	08 95       	ret

00002116 <itoa>:
    2116:	fb 01       	movw	r30, r22
    2118:	9f 01       	movw	r18, r30
    211a:	e8 94       	clt
    211c:	42 30       	cpi	r20, 0x02	; 2
    211e:	c4 f0       	brlt	.+48     	; 0x2150 <itoa+0x3a>
    2120:	45 32       	cpi	r20, 0x25	; 37
    2122:	b4 f4       	brge	.+44     	; 0x2150 <itoa+0x3a>
    2124:	4a 30       	cpi	r20, 0x0A	; 10
    2126:	29 f4       	brne	.+10     	; 0x2132 <itoa+0x1c>
    2128:	97 fb       	bst	r25, 7
    212a:	1e f4       	brtc	.+6      	; 0x2132 <itoa+0x1c>
    212c:	90 95       	com	r25
    212e:	81 95       	neg	r24
    2130:	9f 4f       	sbci	r25, 0xFF	; 255
    2132:	64 2f       	mov	r22, r20
    2134:	77 27       	eor	r23, r23
    2136:	0e 94 bc 10 	call	0x2178	; 0x2178 <__udivmodhi4>
    213a:	80 5d       	subi	r24, 0xD0	; 208
    213c:	8a 33       	cpi	r24, 0x3A	; 58
    213e:	0c f0       	brlt	.+2      	; 0x2142 <itoa+0x2c>
    2140:	89 5d       	subi	r24, 0xD9	; 217
    2142:	81 93       	st	Z+, r24
    2144:	cb 01       	movw	r24, r22
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	a1 f7       	brne	.-24     	; 0x2132 <itoa+0x1c>
    214a:	16 f4       	brtc	.+4      	; 0x2150 <itoa+0x3a>
    214c:	5d e2       	ldi	r21, 0x2D	; 45
    214e:	51 93       	st	Z+, r21
    2150:	10 82       	st	Z, r1
    2152:	c9 01       	movw	r24, r18
    2154:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <strrev>

00002158 <strrev>:
    2158:	dc 01       	movw	r26, r24
    215a:	fc 01       	movw	r30, r24
    215c:	67 2f       	mov	r22, r23
    215e:	71 91       	ld	r23, Z+
    2160:	77 23       	and	r23, r23
    2162:	e1 f7       	brne	.-8      	; 0x215c <strrev+0x4>
    2164:	32 97       	sbiw	r30, 0x02	; 2
    2166:	04 c0       	rjmp	.+8      	; 0x2170 <strrev+0x18>
    2168:	7c 91       	ld	r23, X
    216a:	6d 93       	st	X+, r22
    216c:	70 83       	st	Z, r23
    216e:	62 91       	ld	r22, -Z
    2170:	ae 17       	cp	r26, r30
    2172:	bf 07       	cpc	r27, r31
    2174:	c8 f3       	brcs	.-14     	; 0x2168 <strrev+0x10>
    2176:	08 95       	ret

00002178 <__udivmodhi4>:
    2178:	aa 1b       	sub	r26, r26
    217a:	bb 1b       	sub	r27, r27
    217c:	51 e1       	ldi	r21, 0x11	; 17
    217e:	07 c0       	rjmp	.+14     	; 0x218e <__udivmodhi4_ep>

00002180 <__udivmodhi4_loop>:
    2180:	aa 1f       	adc	r26, r26
    2182:	bb 1f       	adc	r27, r27
    2184:	a6 17       	cp	r26, r22
    2186:	b7 07       	cpc	r27, r23
    2188:	10 f0       	brcs	.+4      	; 0x218e <__udivmodhi4_ep>
    218a:	a6 1b       	sub	r26, r22
    218c:	b7 0b       	sbc	r27, r23

0000218e <__udivmodhi4_ep>:
    218e:	88 1f       	adc	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	5a 95       	dec	r21
    2194:	a9 f7       	brne	.-22     	; 0x2180 <__udivmodhi4_loop>
    2196:	80 95       	com	r24
    2198:	90 95       	com	r25
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	08 95       	ret

000021a0 <_exit>:
    21a0:	f8 94       	cli

000021a2 <__stop_program>:
    21a2:	ff cf       	rjmp	.-2      	; 0x21a2 <__stop_program>
