
UART_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d92  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000e06  2**0
                  ALLOC
  2 .stab         000010f8  00000000  00000000  00000e08  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ae6  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__vector_13>
  38:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__vector_14>
  3c:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__vector_15>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <main>
  74:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <MDIO_vSetPortDirection>:
 * 	function inputs:	Port number , value to be input  or output
 * 	function outputs:	DIO_ErrorStatus
 */
/************************************************************************************************************/
DIO_ErrorStatus MDIO_vSetPortDirection( u8 copy_u8port,u8 copy_u8PortDirection)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <MDIO_vSetPortDirection+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <MDIO_vSetPortDirection+0x8>
  84:	0f 92       	push	r0
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	8a 83       	std	Y+2, r24	; 0x02
  8c:	6b 83       	std	Y+3, r22	; 0x03
	/*create local enum state for this function */
	DIO_ErrorStatus Local_enumState=DIO_Ok;
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	89 83       	std	Y+1, r24	; 0x01
	/*check the validation range of ports and pins*/
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD))
  92:	8a 81       	ldd	r24, Y+2	; 0x02
  94:	84 30       	cpi	r24, 0x04	; 4
  96:	98 f5       	brcc	.+102    	; 0xfe <MDIO_vSetPortDirection+0x82>
	{
		/*check the chosen port*/
		switch (copy_u8port)
  98:	8a 81       	ldd	r24, Y+2	; 0x02
  9a:	28 2f       	mov	r18, r24
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	3d 83       	std	Y+5, r19	; 0x05
  a0:	2c 83       	std	Y+4, r18	; 0x04
  a2:	8c 81       	ldd	r24, Y+4	; 0x04
  a4:	9d 81       	ldd	r25, Y+5	; 0x05
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	91 05       	cpc	r25, r1
  aa:	d1 f0       	breq	.+52     	; 0xe0 <MDIO_vSetPortDirection+0x64>
  ac:	2c 81       	ldd	r18, Y+4	; 0x04
  ae:	3d 81       	ldd	r19, Y+5	; 0x05
  b0:	22 30       	cpi	r18, 0x02	; 2
  b2:	31 05       	cpc	r19, r1
  b4:	2c f4       	brge	.+10     	; 0xc0 <MDIO_vSetPortDirection+0x44>
  b6:	8c 81       	ldd	r24, Y+4	; 0x04
  b8:	9d 81       	ldd	r25, Y+5	; 0x05
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	61 f0       	breq	.+24     	; 0xd6 <MDIO_vSetPortDirection+0x5a>
  be:	20 c0       	rjmp	.+64     	; 0x100 <MDIO_vSetPortDirection+0x84>
  c0:	2c 81       	ldd	r18, Y+4	; 0x04
  c2:	3d 81       	ldd	r19, Y+5	; 0x05
  c4:	22 30       	cpi	r18, 0x02	; 2
  c6:	31 05       	cpc	r19, r1
  c8:	81 f0       	breq	.+32     	; 0xea <MDIO_vSetPortDirection+0x6e>
  ca:	8c 81       	ldd	r24, Y+4	; 0x04
  cc:	9d 81       	ldd	r25, Y+5	; 0x05
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	91 05       	cpc	r25, r1
  d2:	81 f0       	breq	.+32     	; 0xf4 <MDIO_vSetPortDirection+0x78>
  d4:	15 c0       	rjmp	.+42     	; 0x100 <MDIO_vSetPortDirection+0x84>
		{
		case PORTA:	DDRA_reg = copy_u8PortDirection;	break;
  d6:	ea e3       	ldi	r30, 0x3A	; 58
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	8b 81       	ldd	r24, Y+3	; 0x03
  dc:	80 83       	st	Z, r24
  de:	10 c0       	rjmp	.+32     	; 0x100 <MDIO_vSetPortDirection+0x84>
		case PORTB:	DDRB_reg = copy_u8PortDirection;	break;
  e0:	e7 e3       	ldi	r30, 0x37	; 55
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	80 83       	st	Z, r24
  e8:	0b c0       	rjmp	.+22     	; 0x100 <MDIO_vSetPortDirection+0x84>
		case PORTC:	DDRC_reg = copy_u8PortDirection;	break;
  ea:	e4 e3       	ldi	r30, 0x34	; 52
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	8b 81       	ldd	r24, Y+3	; 0x03
  f0:	80 83       	st	Z, r24
  f2:	06 c0       	rjmp	.+12     	; 0x100 <MDIO_vSetPortDirection+0x84>
		case PORTD:	DDRD_reg = copy_u8PortDirection;	break;
  f4:	e1 e3       	ldi	r30, 0x31	; 49
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	8b 81       	ldd	r24, Y+3	; 0x03
  fa:	80 83       	st	Z, r24
  fc:	01 c0       	rjmp	.+2      	; 0x100 <MDIO_vSetPortDirection+0x84>
		}
	}
	else
	{
		Local_enumState=DIO_NOK;
  fe:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enumState;
 100:	89 81       	ldd	r24, Y+1	; 0x01
}
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	0f 90       	pop	r0
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	cf 91       	pop	r28
 10e:	df 91       	pop	r29
 110:	08 95       	ret

00000112 <MDIO_vSetPortValue>:
 * 	function inputs:	Port number , value to be high or low
 * 	function outputs:	DIO_ErrorStatus
 */
/************************************************************************************************************/
DIO_ErrorStatus MDIO_vSetPortValue( u8 copy_u8port,u8 copy_u8PortValue)
{
 112:	df 93       	push	r29
 114:	cf 93       	push	r28
 116:	00 d0       	rcall	.+0      	; 0x118 <MDIO_vSetPortValue+0x6>
 118:	00 d0       	rcall	.+0      	; 0x11a <MDIO_vSetPortValue+0x8>
 11a:	0f 92       	push	r0
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	8a 83       	std	Y+2, r24	; 0x02
 122:	6b 83       	std	Y+3, r22	; 0x03
	/*create local enum state for this function */
	DIO_ErrorStatus Local_enumState=DIO_Ok;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	89 83       	std	Y+1, r24	; 0x01
	/*check the validation range of ports and pins*/
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD))
 128:	8a 81       	ldd	r24, Y+2	; 0x02
 12a:	84 30       	cpi	r24, 0x04	; 4
 12c:	98 f5       	brcc	.+102    	; 0x194 <MDIO_vSetPortValue+0x82>
	{
		/*check the chosen port*/
		switch (copy_u8port)
 12e:	8a 81       	ldd	r24, Y+2	; 0x02
 130:	28 2f       	mov	r18, r24
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	3d 83       	std	Y+5, r19	; 0x05
 136:	2c 83       	std	Y+4, r18	; 0x04
 138:	8c 81       	ldd	r24, Y+4	; 0x04
 13a:	9d 81       	ldd	r25, Y+5	; 0x05
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	91 05       	cpc	r25, r1
 140:	d1 f0       	breq	.+52     	; 0x176 <MDIO_vSetPortValue+0x64>
 142:	2c 81       	ldd	r18, Y+4	; 0x04
 144:	3d 81       	ldd	r19, Y+5	; 0x05
 146:	22 30       	cpi	r18, 0x02	; 2
 148:	31 05       	cpc	r19, r1
 14a:	2c f4       	brge	.+10     	; 0x156 <MDIO_vSetPortValue+0x44>
 14c:	8c 81       	ldd	r24, Y+4	; 0x04
 14e:	9d 81       	ldd	r25, Y+5	; 0x05
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	61 f0       	breq	.+24     	; 0x16c <MDIO_vSetPortValue+0x5a>
 154:	20 c0       	rjmp	.+64     	; 0x196 <MDIO_vSetPortValue+0x84>
 156:	2c 81       	ldd	r18, Y+4	; 0x04
 158:	3d 81       	ldd	r19, Y+5	; 0x05
 15a:	22 30       	cpi	r18, 0x02	; 2
 15c:	31 05       	cpc	r19, r1
 15e:	81 f0       	breq	.+32     	; 0x180 <MDIO_vSetPortValue+0x6e>
 160:	8c 81       	ldd	r24, Y+4	; 0x04
 162:	9d 81       	ldd	r25, Y+5	; 0x05
 164:	83 30       	cpi	r24, 0x03	; 3
 166:	91 05       	cpc	r25, r1
 168:	81 f0       	breq	.+32     	; 0x18a <MDIO_vSetPortValue+0x78>
 16a:	15 c0       	rjmp	.+42     	; 0x196 <MDIO_vSetPortValue+0x84>
		{
		case PORTA:	PORTA_reg = copy_u8PortValue;	break;
 16c:	eb e3       	ldi	r30, 0x3B	; 59
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	8b 81       	ldd	r24, Y+3	; 0x03
 172:	80 83       	st	Z, r24
 174:	10 c0       	rjmp	.+32     	; 0x196 <MDIO_vSetPortValue+0x84>
		case PORTB:	PORTB_reg = copy_u8PortValue;	break;
 176:	e8 e3       	ldi	r30, 0x38	; 56
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	8b 81       	ldd	r24, Y+3	; 0x03
 17c:	80 83       	st	Z, r24
 17e:	0b c0       	rjmp	.+22     	; 0x196 <MDIO_vSetPortValue+0x84>
		case PORTC:	PORTC_reg = copy_u8PortValue;	break;
 180:	e5 e3       	ldi	r30, 0x35	; 53
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	8b 81       	ldd	r24, Y+3	; 0x03
 186:	80 83       	st	Z, r24
 188:	06 c0       	rjmp	.+12     	; 0x196 <MDIO_vSetPortValue+0x84>
		case PORTD:	PORTD_reg = copy_u8PortValue;	break;
 18a:	e2 e3       	ldi	r30, 0x32	; 50
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	8b 81       	ldd	r24, Y+3	; 0x03
 190:	80 83       	st	Z, r24
 192:	01 c0       	rjmp	.+2      	; 0x196 <MDIO_vSetPortValue+0x84>
		}
	}
	else
	{
		Local_enumState=DIO_NOK;
 194:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enumState;
 196:	89 81       	ldd	r24, Y+1	; 0x01
}
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	cf 91       	pop	r28
 1a4:	df 91       	pop	r29
 1a6:	08 95       	ret

000001a8 <MDIO_GetPortValue>:
/*	function name:		u8 MDIO_GetPortValue( u8 copy_u8port)
 * 	function inputs:	Port number
 * 	function outputs:	value is is high or low
 */
/************************************************************************************************************/
u8 MDIO_GetPortValue( u8 copy_u8port){
 1a8:	df 93       	push	r29
 1aa:	cf 93       	push	r28
 1ac:	00 d0       	rcall	.+0      	; 0x1ae <MDIO_GetPortValue+0x6>
 1ae:	00 d0       	rcall	.+0      	; 0x1b0 <MDIO_GetPortValue+0x8>
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = 0;
 1b6:	19 82       	std	Y+1, r1	; 0x01

	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD)) {
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	84 30       	cpi	r24, 0x04	; 4
 1bc:	90 f5       	brcc	.+100    	; 0x222 <MDIO_GetPortValue+0x7a>
		switch (copy_u8port) {
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	28 2f       	mov	r18, r24
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	3c 83       	std	Y+4, r19	; 0x04
 1c6:	2b 83       	std	Y+3, r18	; 0x03
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	9c 81       	ldd	r25, Y+4	; 0x04
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	91 05       	cpc	r25, r1
 1d0:	d1 f0       	breq	.+52     	; 0x206 <MDIO_GetPortValue+0x5e>
 1d2:	2b 81       	ldd	r18, Y+3	; 0x03
 1d4:	3c 81       	ldd	r19, Y+4	; 0x04
 1d6:	22 30       	cpi	r18, 0x02	; 2
 1d8:	31 05       	cpc	r19, r1
 1da:	2c f4       	brge	.+10     	; 0x1e6 <MDIO_GetPortValue+0x3e>
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	9c 81       	ldd	r25, Y+4	; 0x04
 1e0:	00 97       	sbiw	r24, 0x00	; 0
 1e2:	61 f0       	breq	.+24     	; 0x1fc <MDIO_GetPortValue+0x54>
 1e4:	1e c0       	rjmp	.+60     	; 0x222 <MDIO_GetPortValue+0x7a>
 1e6:	2b 81       	ldd	r18, Y+3	; 0x03
 1e8:	3c 81       	ldd	r19, Y+4	; 0x04
 1ea:	22 30       	cpi	r18, 0x02	; 2
 1ec:	31 05       	cpc	r19, r1
 1ee:	81 f0       	breq	.+32     	; 0x210 <MDIO_GetPortValue+0x68>
 1f0:	8b 81       	ldd	r24, Y+3	; 0x03
 1f2:	9c 81       	ldd	r25, Y+4	; 0x04
 1f4:	83 30       	cpi	r24, 0x03	; 3
 1f6:	91 05       	cpc	r25, r1
 1f8:	81 f0       	breq	.+32     	; 0x21a <MDIO_GetPortValue+0x72>
 1fa:	13 c0       	rjmp	.+38     	; 0x222 <MDIO_GetPortValue+0x7a>
		case PORTA:
			value = PINA_reg;
 1fc:	e9 e3       	ldi	r30, 0x39	; 57
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	0e c0       	rjmp	.+28     	; 0x222 <MDIO_GetPortValue+0x7a>
			break;
		case PORTB:
			value = PINB_reg;
 206:	e6 e3       	ldi	r30, 0x36	; 54
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	89 83       	std	Y+1, r24	; 0x01
 20e:	09 c0       	rjmp	.+18     	; 0x222 <MDIO_GetPortValue+0x7a>
			break;
		case PORTC:
			value = PINC_reg;
 210:	e3 e3       	ldi	r30, 0x33	; 51
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	89 83       	std	Y+1, r24	; 0x01
 218:	04 c0       	rjmp	.+8      	; 0x222 <MDIO_GetPortValue+0x7a>
			break;
		case PORTD:
			value = PIND_reg;
 21a:	e0 e3       	ldi	r30, 0x30	; 48
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
 222:	89 81       	ldd	r24, Y+1	; 0x01

}
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	cf 91       	pop	r28
 22e:	df 91       	pop	r29
 230:	08 95       	ret

00000232 <MDIO_vSetPinDirection>:
 * 	function inputs:	Port number , pin number ,value to be input  or output
 * 	function outputs:	DIO_ErrorStatus
 */
/************************************************************************************************************/
DIO_ErrorStatus MDIO_vSetPinDirection( u8 copy_u8port,u8 copy_u8pin, u8 copy_u8PinDirection)
{
 232:	df 93       	push	r29
 234:	cf 93       	push	r28
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	28 97       	sbiw	r28, 0x08	; 8
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	8a 83       	std	Y+2, r24	; 0x02
 248:	6b 83       	std	Y+3, r22	; 0x03
 24a:	4c 83       	std	Y+4, r20	; 0x04
	/*create local var. from Error state*/
	DIO_ErrorStatus Local_enumState=DIO_Ok;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	89 83       	std	Y+1, r24	; 0x01
	/*check the validation range of ports and pins */
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD) && (copy_u8pin >= PIN0)
 250:	8a 81       	ldd	r24, Y+2	; 0x02
 252:	84 30       	cpi	r24, 0x04	; 4
 254:	08 f0       	brcs	.+2      	; 0x258 <MDIO_vSetPinDirection+0x26>
 256:	f1 c0       	rjmp	.+482    	; 0x43a <MDIO_vSetPinDirection+0x208>
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	88 30       	cpi	r24, 0x08	; 8
 25c:	08 f0       	brcs	.+2      	; 0x260 <MDIO_vSetPinDirection+0x2e>
 25e:	ed c0       	rjmp	.+474    	; 0x43a <MDIO_vSetPinDirection+0x208>
			&& (copy_u8pin <= PIN7))
	{
		/*check DDR reg. direction if it is output */
		if (copy_u8PinDirection == DIO_OUTPUT)
 260:	8c 81       	ldd	r24, Y+4	; 0x04
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	09 f0       	breq	.+2      	; 0x268 <MDIO_vSetPinDirection+0x36>
 266:	6f c0       	rjmp	.+222    	; 0x346 <MDIO_vSetPinDirection+0x114>
		{
			/*check the chosen port*/
			switch (copy_u8port)
 268:	8a 81       	ldd	r24, Y+2	; 0x02
 26a:	28 2f       	mov	r18, r24
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	38 87       	std	Y+8, r19	; 0x08
 270:	2f 83       	std	Y+7, r18	; 0x07
 272:	8f 81       	ldd	r24, Y+7	; 0x07
 274:	98 85       	ldd	r25, Y+8	; 0x08
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	91 05       	cpc	r25, r1
 27a:	49 f1       	breq	.+82     	; 0x2ce <MDIO_vSetPinDirection+0x9c>
 27c:	2f 81       	ldd	r18, Y+7	; 0x07
 27e:	38 85       	ldd	r19, Y+8	; 0x08
 280:	22 30       	cpi	r18, 0x02	; 2
 282:	31 05       	cpc	r19, r1
 284:	2c f4       	brge	.+10     	; 0x290 <MDIO_vSetPinDirection+0x5e>
 286:	8f 81       	ldd	r24, Y+7	; 0x07
 288:	98 85       	ldd	r25, Y+8	; 0x08
 28a:	00 97       	sbiw	r24, 0x00	; 0
 28c:	61 f0       	breq	.+24     	; 0x2a6 <MDIO_vSetPinDirection+0x74>
 28e:	d6 c0       	rjmp	.+428    	; 0x43c <MDIO_vSetPinDirection+0x20a>
 290:	2f 81       	ldd	r18, Y+7	; 0x07
 292:	38 85       	ldd	r19, Y+8	; 0x08
 294:	22 30       	cpi	r18, 0x02	; 2
 296:	31 05       	cpc	r19, r1
 298:	71 f1       	breq	.+92     	; 0x2f6 <MDIO_vSetPinDirection+0xc4>
 29a:	8f 81       	ldd	r24, Y+7	; 0x07
 29c:	98 85       	ldd	r25, Y+8	; 0x08
 29e:	83 30       	cpi	r24, 0x03	; 3
 2a0:	91 05       	cpc	r25, r1
 2a2:	e9 f1       	breq	.+122    	; 0x31e <MDIO_vSetPinDirection+0xec>
 2a4:	cb c0       	rjmp	.+406    	; 0x43c <MDIO_vSetPinDirection+0x20a>
			{
			case PORTA:	SET_BIT(DDRA_reg, copy_u8pin);	break;
 2a6:	aa e3       	ldi	r26, 0x3A	; 58
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	ea e3       	ldi	r30, 0x3A	; 58
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	48 2f       	mov	r20, r24
 2b2:	8b 81       	ldd	r24, Y+3	; 0x03
 2b4:	28 2f       	mov	r18, r24
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 2e       	mov	r0, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <MDIO_vSetPinDirection+0x92>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <MDIO_vSetPinDirection+0x8e>
 2c8:	84 2b       	or	r24, r20
 2ca:	8c 93       	st	X, r24
 2cc:	b7 c0       	rjmp	.+366    	; 0x43c <MDIO_vSetPinDirection+0x20a>
			case PORTB:	SET_BIT(DDRB_reg, copy_u8pin);	break;
 2ce:	a7 e3       	ldi	r26, 0x37	; 55
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	e7 e3       	ldi	r30, 0x37	; 55
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	48 2f       	mov	r20, r24
 2da:	8b 81       	ldd	r24, Y+3	; 0x03
 2dc:	28 2f       	mov	r18, r24
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 2e       	mov	r0, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <MDIO_vSetPinDirection+0xba>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <MDIO_vSetPinDirection+0xb6>
 2f0:	84 2b       	or	r24, r20
 2f2:	8c 93       	st	X, r24
 2f4:	a3 c0       	rjmp	.+326    	; 0x43c <MDIO_vSetPinDirection+0x20a>
			case PORTC:	SET_BIT(DDRC_reg, copy_u8pin);	break;
 2f6:	a4 e3       	ldi	r26, 0x34	; 52
 2f8:	b0 e0       	ldi	r27, 0x00	; 0
 2fa:	e4 e3       	ldi	r30, 0x34	; 52
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	48 2f       	mov	r20, r24
 302:	8b 81       	ldd	r24, Y+3	; 0x03
 304:	28 2f       	mov	r18, r24
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 2e       	mov	r0, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <MDIO_vSetPinDirection+0xe2>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <MDIO_vSetPinDirection+0xde>
 318:	84 2b       	or	r24, r20
 31a:	8c 93       	st	X, r24
 31c:	8f c0       	rjmp	.+286    	; 0x43c <MDIO_vSetPinDirection+0x20a>
			case PORTD:	SET_BIT(DDRD_reg, copy_u8pin);	break;
 31e:	a1 e3       	ldi	r26, 0x31	; 49
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	e1 e3       	ldi	r30, 0x31	; 49
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	48 2f       	mov	r20, r24
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 2e       	mov	r0, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <MDIO_vSetPinDirection+0x10a>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <MDIO_vSetPinDirection+0x106>
 340:	84 2b       	or	r24, r20
 342:	8c 93       	st	X, r24
 344:	7b c0       	rjmp	.+246    	; 0x43c <MDIO_vSetPinDirection+0x20a>
			}
		}
		/*check DDR reg. direction if it is input */
		else if (copy_u8PinDirection == DIO_INPUT)
 346:	8c 81       	ldd	r24, Y+4	; 0x04
 348:	88 23       	and	r24, r24
 34a:	09 f0       	breq	.+2      	; 0x34e <MDIO_vSetPinDirection+0x11c>
 34c:	74 c0       	rjmp	.+232    	; 0x436 <MDIO_vSetPinDirection+0x204>
		{
			/*check the chosen port*/
			switch (copy_u8port)
 34e:	8a 81       	ldd	r24, Y+2	; 0x02
 350:	28 2f       	mov	r18, r24
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	3e 83       	std	Y+6, r19	; 0x06
 356:	2d 83       	std	Y+5, r18	; 0x05
 358:	8d 81       	ldd	r24, Y+5	; 0x05
 35a:	9e 81       	ldd	r25, Y+6	; 0x06
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	91 05       	cpc	r25, r1
 360:	59 f1       	breq	.+86     	; 0x3b8 <MDIO_vSetPinDirection+0x186>
 362:	2d 81       	ldd	r18, Y+5	; 0x05
 364:	3e 81       	ldd	r19, Y+6	; 0x06
 366:	22 30       	cpi	r18, 0x02	; 2
 368:	31 05       	cpc	r19, r1
 36a:	2c f4       	brge	.+10     	; 0x376 <MDIO_vSetPinDirection+0x144>
 36c:	8d 81       	ldd	r24, Y+5	; 0x05
 36e:	9e 81       	ldd	r25, Y+6	; 0x06
 370:	00 97       	sbiw	r24, 0x00	; 0
 372:	69 f0       	breq	.+26     	; 0x38e <MDIO_vSetPinDirection+0x15c>
 374:	63 c0       	rjmp	.+198    	; 0x43c <MDIO_vSetPinDirection+0x20a>
 376:	2d 81       	ldd	r18, Y+5	; 0x05
 378:	3e 81       	ldd	r19, Y+6	; 0x06
 37a:	22 30       	cpi	r18, 0x02	; 2
 37c:	31 05       	cpc	r19, r1
 37e:	89 f1       	breq	.+98     	; 0x3e2 <MDIO_vSetPinDirection+0x1b0>
 380:	8d 81       	ldd	r24, Y+5	; 0x05
 382:	9e 81       	ldd	r25, Y+6	; 0x06
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	91 05       	cpc	r25, r1
 388:	09 f4       	brne	.+2      	; 0x38c <MDIO_vSetPinDirection+0x15a>
 38a:	40 c0       	rjmp	.+128    	; 0x40c <MDIO_vSetPinDirection+0x1da>
 38c:	57 c0       	rjmp	.+174    	; 0x43c <MDIO_vSetPinDirection+0x20a>
			{
			case PORTA:	CLR_BIT(DDRA_reg, copy_u8pin);	break;
 38e:	aa e3       	ldi	r26, 0x3A	; 58
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	ea e3       	ldi	r30, 0x3A	; 58
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	48 2f       	mov	r20, r24
 39a:	8b 81       	ldd	r24, Y+3	; 0x03
 39c:	28 2f       	mov	r18, r24
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 2e       	mov	r0, r18
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <MDIO_vSetPinDirection+0x17a>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	0a 94       	dec	r0
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <MDIO_vSetPinDirection+0x176>
 3b0:	80 95       	com	r24
 3b2:	84 23       	and	r24, r20
 3b4:	8c 93       	st	X, r24
 3b6:	42 c0       	rjmp	.+132    	; 0x43c <MDIO_vSetPinDirection+0x20a>
			case PORTB:	CLR_BIT(DDRB_reg, copy_u8pin);	break;
 3b8:	a7 e3       	ldi	r26, 0x37	; 55
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e7 e3       	ldi	r30, 0x37	; 55
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	48 2f       	mov	r20, r24
 3c4:	8b 81       	ldd	r24, Y+3	; 0x03
 3c6:	28 2f       	mov	r18, r24
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 2e       	mov	r0, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <MDIO_vSetPinDirection+0x1a4>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	0a 94       	dec	r0
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <MDIO_vSetPinDirection+0x1a0>
 3da:	80 95       	com	r24
 3dc:	84 23       	and	r24, r20
 3de:	8c 93       	st	X, r24
 3e0:	2d c0       	rjmp	.+90     	; 0x43c <MDIO_vSetPinDirection+0x20a>
			case PORTC:	CLR_BIT(DDRC_reg, copy_u8pin);	break;
 3e2:	a4 e3       	ldi	r26, 0x34	; 52
 3e4:	b0 e0       	ldi	r27, 0x00	; 0
 3e6:	e4 e3       	ldi	r30, 0x34	; 52
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	48 2f       	mov	r20, r24
 3ee:	8b 81       	ldd	r24, Y+3	; 0x03
 3f0:	28 2f       	mov	r18, r24
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 2e       	mov	r0, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <MDIO_vSetPinDirection+0x1ce>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	0a 94       	dec	r0
 402:	e2 f7       	brpl	.-8      	; 0x3fc <MDIO_vSetPinDirection+0x1ca>
 404:	80 95       	com	r24
 406:	84 23       	and	r24, r20
 408:	8c 93       	st	X, r24
 40a:	18 c0       	rjmp	.+48     	; 0x43c <MDIO_vSetPinDirection+0x20a>
			case PORTD:	CLR_BIT(DDRD_reg, copy_u8pin);	break;
 40c:	a1 e3       	ldi	r26, 0x31	; 49
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	e1 e3       	ldi	r30, 0x31	; 49
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	8b 81       	ldd	r24, Y+3	; 0x03
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 2e       	mov	r0, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <MDIO_vSetPinDirection+0x1f8>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	0a 94       	dec	r0
 42c:	e2 f7       	brpl	.-8      	; 0x426 <MDIO_vSetPinDirection+0x1f4>
 42e:	80 95       	com	r24
 430:	84 23       	and	r24, r20
 432:	8c 93       	st	X, r24
 434:	03 c0       	rjmp	.+6      	; 0x43c <MDIO_vSetPinDirection+0x20a>
			}
		}
		else
		{
			Local_enumState=DIO_NOK;
 436:	19 82       	std	Y+1, r1	; 0x01
 438:	01 c0       	rjmp	.+2      	; 0x43c <MDIO_vSetPinDirection+0x20a>
		}
	}
	else
	{
		Local_enumState=DIO_NOK;
 43a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enumState;
 43c:	89 81       	ldd	r24, Y+1	; 0x01
}
 43e:	28 96       	adiw	r28, 0x08	; 8
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61
 44a:	cf 91       	pop	r28
 44c:	df 91       	pop	r29
 44e:	08 95       	ret

00000450 <MDIO_vSetPinValue>:
 * 	function inputs:	Port number , pin number, value to be high or low
 * 	function outputs:	DIO_ErrorStatus
 */
/************************************************************************************************************/
DIO_ErrorStatus MDIO_vSetPinValue( u8 copy_u8port,u8 copy_u8pin, u8 copy_u8PinValue)
 {
 450:	df 93       	push	r29
 452:	cf 93       	push	r28
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	28 97       	sbiw	r28, 0x08	; 8
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
 464:	8a 83       	std	Y+2, r24	; 0x02
 466:	6b 83       	std	Y+3, r22	; 0x03
 468:	4c 83       	std	Y+4, r20	; 0x04
	/*create local var. from Error state*/
	DIO_ErrorStatus Local_enumState=DIO_Ok;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	89 83       	std	Y+1, r24	; 0x01
	/*check the validation range of ports and pins */
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD) && (copy_u8pin >= PIN0)
 46e:	8a 81       	ldd	r24, Y+2	; 0x02
 470:	84 30       	cpi	r24, 0x04	; 4
 472:	08 f0       	brcs	.+2      	; 0x476 <MDIO_vSetPinValue+0x26>
 474:	f1 c0       	rjmp	.+482    	; 0x658 <MDIO_vSetPinValue+0x208>
 476:	8b 81       	ldd	r24, Y+3	; 0x03
 478:	88 30       	cpi	r24, 0x08	; 8
 47a:	08 f0       	brcs	.+2      	; 0x47e <MDIO_vSetPinValue+0x2e>
 47c:	ed c0       	rjmp	.+474    	; 0x658 <MDIO_vSetPinValue+0x208>
			&& (copy_u8pin <= PIN7)) {
		/*check PORT reg. value if it is high */
		if (copy_u8PinValue == DIO_HIGH) {
 47e:	8c 81       	ldd	r24, Y+4	; 0x04
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	09 f0       	breq	.+2      	; 0x486 <MDIO_vSetPinValue+0x36>
 484:	6f c0       	rjmp	.+222    	; 0x564 <MDIO_vSetPinValue+0x114>
			switch (copy_u8port)
 486:	8a 81       	ldd	r24, Y+2	; 0x02
 488:	28 2f       	mov	r18, r24
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	38 87       	std	Y+8, r19	; 0x08
 48e:	2f 83       	std	Y+7, r18	; 0x07
 490:	8f 81       	ldd	r24, Y+7	; 0x07
 492:	98 85       	ldd	r25, Y+8	; 0x08
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	91 05       	cpc	r25, r1
 498:	49 f1       	breq	.+82     	; 0x4ec <MDIO_vSetPinValue+0x9c>
 49a:	2f 81       	ldd	r18, Y+7	; 0x07
 49c:	38 85       	ldd	r19, Y+8	; 0x08
 49e:	22 30       	cpi	r18, 0x02	; 2
 4a0:	31 05       	cpc	r19, r1
 4a2:	2c f4       	brge	.+10     	; 0x4ae <MDIO_vSetPinValue+0x5e>
 4a4:	8f 81       	ldd	r24, Y+7	; 0x07
 4a6:	98 85       	ldd	r25, Y+8	; 0x08
 4a8:	00 97       	sbiw	r24, 0x00	; 0
 4aa:	61 f0       	breq	.+24     	; 0x4c4 <MDIO_vSetPinValue+0x74>
 4ac:	d6 c0       	rjmp	.+428    	; 0x65a <MDIO_vSetPinValue+0x20a>
 4ae:	2f 81       	ldd	r18, Y+7	; 0x07
 4b0:	38 85       	ldd	r19, Y+8	; 0x08
 4b2:	22 30       	cpi	r18, 0x02	; 2
 4b4:	31 05       	cpc	r19, r1
 4b6:	71 f1       	breq	.+92     	; 0x514 <MDIO_vSetPinValue+0xc4>
 4b8:	8f 81       	ldd	r24, Y+7	; 0x07
 4ba:	98 85       	ldd	r25, Y+8	; 0x08
 4bc:	83 30       	cpi	r24, 0x03	; 3
 4be:	91 05       	cpc	r25, r1
 4c0:	e9 f1       	breq	.+122    	; 0x53c <MDIO_vSetPinValue+0xec>
 4c2:	cb c0       	rjmp	.+406    	; 0x65a <MDIO_vSetPinValue+0x20a>
			{
			case PORTA:	SET_BIT(PORTA_reg, copy_u8pin);	break;
 4c4:	ab e3       	ldi	r26, 0x3B	; 59
 4c6:	b0 e0       	ldi	r27, 0x00	; 0
 4c8:	eb e3       	ldi	r30, 0x3B	; 59
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	48 2f       	mov	r20, r24
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	28 2f       	mov	r18, r24
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 2e       	mov	r0, r18
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <MDIO_vSetPinValue+0x92>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	0a 94       	dec	r0
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <MDIO_vSetPinValue+0x8e>
 4e6:	84 2b       	or	r24, r20
 4e8:	8c 93       	st	X, r24
 4ea:	b7 c0       	rjmp	.+366    	; 0x65a <MDIO_vSetPinValue+0x20a>
			case PORTB:	SET_BIT(PORTB_reg, copy_u8pin);	break;
 4ec:	a8 e3       	ldi	r26, 0x38	; 56
 4ee:	b0 e0       	ldi	r27, 0x00	; 0
 4f0:	e8 e3       	ldi	r30, 0x38	; 56
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	80 81       	ld	r24, Z
 4f6:	48 2f       	mov	r20, r24
 4f8:	8b 81       	ldd	r24, Y+3	; 0x03
 4fa:	28 2f       	mov	r18, r24
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 2e       	mov	r0, r18
 504:	02 c0       	rjmp	.+4      	; 0x50a <MDIO_vSetPinValue+0xba>
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	0a 94       	dec	r0
 50c:	e2 f7       	brpl	.-8      	; 0x506 <MDIO_vSetPinValue+0xb6>
 50e:	84 2b       	or	r24, r20
 510:	8c 93       	st	X, r24
 512:	a3 c0       	rjmp	.+326    	; 0x65a <MDIO_vSetPinValue+0x20a>
			case PORTC:	SET_BIT(PORTC_reg, copy_u8pin);	break;
 514:	a5 e3       	ldi	r26, 0x35	; 53
 516:	b0 e0       	ldi	r27, 0x00	; 0
 518:	e5 e3       	ldi	r30, 0x35	; 53
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	80 81       	ld	r24, Z
 51e:	48 2f       	mov	r20, r24
 520:	8b 81       	ldd	r24, Y+3	; 0x03
 522:	28 2f       	mov	r18, r24
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 2e       	mov	r0, r18
 52c:	02 c0       	rjmp	.+4      	; 0x532 <MDIO_vSetPinValue+0xe2>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	0a 94       	dec	r0
 534:	e2 f7       	brpl	.-8      	; 0x52e <MDIO_vSetPinValue+0xde>
 536:	84 2b       	or	r24, r20
 538:	8c 93       	st	X, r24
 53a:	8f c0       	rjmp	.+286    	; 0x65a <MDIO_vSetPinValue+0x20a>
			case PORTD:	SET_BIT(PORTD_reg, copy_u8pin);	break;
 53c:	a2 e3       	ldi	r26, 0x32	; 50
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	e2 e3       	ldi	r30, 0x32	; 50
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	48 2f       	mov	r20, r24
 548:	8b 81       	ldd	r24, Y+3	; 0x03
 54a:	28 2f       	mov	r18, r24
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 2e       	mov	r0, r18
 554:	02 c0       	rjmp	.+4      	; 0x55a <MDIO_vSetPinValue+0x10a>
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	0a 94       	dec	r0
 55c:	e2 f7       	brpl	.-8      	; 0x556 <MDIO_vSetPinValue+0x106>
 55e:	84 2b       	or	r24, r20
 560:	8c 93       	st	X, r24
 562:	7b c0       	rjmp	.+246    	; 0x65a <MDIO_vSetPinValue+0x20a>
			}
		}
		/*check PORT reg. value if it is low */
		else if (copy_u8PinValue == DIO_LOW) {
 564:	8c 81       	ldd	r24, Y+4	; 0x04
 566:	88 23       	and	r24, r24
 568:	09 f0       	breq	.+2      	; 0x56c <MDIO_vSetPinValue+0x11c>
 56a:	74 c0       	rjmp	.+232    	; 0x654 <MDIO_vSetPinValue+0x204>
			switch (copy_u8port) {
 56c:	8a 81       	ldd	r24, Y+2	; 0x02
 56e:	28 2f       	mov	r18, r24
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	3e 83       	std	Y+6, r19	; 0x06
 574:	2d 83       	std	Y+5, r18	; 0x05
 576:	8d 81       	ldd	r24, Y+5	; 0x05
 578:	9e 81       	ldd	r25, Y+6	; 0x06
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	91 05       	cpc	r25, r1
 57e:	59 f1       	breq	.+86     	; 0x5d6 <MDIO_vSetPinValue+0x186>
 580:	2d 81       	ldd	r18, Y+5	; 0x05
 582:	3e 81       	ldd	r19, Y+6	; 0x06
 584:	22 30       	cpi	r18, 0x02	; 2
 586:	31 05       	cpc	r19, r1
 588:	2c f4       	brge	.+10     	; 0x594 <MDIO_vSetPinValue+0x144>
 58a:	8d 81       	ldd	r24, Y+5	; 0x05
 58c:	9e 81       	ldd	r25, Y+6	; 0x06
 58e:	00 97       	sbiw	r24, 0x00	; 0
 590:	69 f0       	breq	.+26     	; 0x5ac <MDIO_vSetPinValue+0x15c>
 592:	63 c0       	rjmp	.+198    	; 0x65a <MDIO_vSetPinValue+0x20a>
 594:	2d 81       	ldd	r18, Y+5	; 0x05
 596:	3e 81       	ldd	r19, Y+6	; 0x06
 598:	22 30       	cpi	r18, 0x02	; 2
 59a:	31 05       	cpc	r19, r1
 59c:	89 f1       	breq	.+98     	; 0x600 <MDIO_vSetPinValue+0x1b0>
 59e:	8d 81       	ldd	r24, Y+5	; 0x05
 5a0:	9e 81       	ldd	r25, Y+6	; 0x06
 5a2:	83 30       	cpi	r24, 0x03	; 3
 5a4:	91 05       	cpc	r25, r1
 5a6:	09 f4       	brne	.+2      	; 0x5aa <MDIO_vSetPinValue+0x15a>
 5a8:	40 c0       	rjmp	.+128    	; 0x62a <MDIO_vSetPinValue+0x1da>
 5aa:	57 c0       	rjmp	.+174    	; 0x65a <MDIO_vSetPinValue+0x20a>
			case PORTA:	CLR_BIT(PORTA_reg, copy_u8pin);	break;
 5ac:	ab e3       	ldi	r26, 0x3B	; 59
 5ae:	b0 e0       	ldi	r27, 0x00	; 0
 5b0:	eb e3       	ldi	r30, 0x3B	; 59
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	48 2f       	mov	r20, r24
 5b8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ba:	28 2f       	mov	r18, r24
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	02 2e       	mov	r0, r18
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <MDIO_vSetPinValue+0x17a>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	0a 94       	dec	r0
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <MDIO_vSetPinValue+0x176>
 5ce:	80 95       	com	r24
 5d0:	84 23       	and	r24, r20
 5d2:	8c 93       	st	X, r24
 5d4:	42 c0       	rjmp	.+132    	; 0x65a <MDIO_vSetPinValue+0x20a>
			case PORTB:	CLR_BIT(PORTB_reg, copy_u8pin);	break;
 5d6:	a8 e3       	ldi	r26, 0x38	; 56
 5d8:	b0 e0       	ldi	r27, 0x00	; 0
 5da:	e8 e3       	ldi	r30, 0x38	; 56
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	48 2f       	mov	r20, r24
 5e2:	8b 81       	ldd	r24, Y+3	; 0x03
 5e4:	28 2f       	mov	r18, r24
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	02 2e       	mov	r0, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <MDIO_vSetPinValue+0x1a4>
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	0a 94       	dec	r0
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <MDIO_vSetPinValue+0x1a0>
 5f8:	80 95       	com	r24
 5fa:	84 23       	and	r24, r20
 5fc:	8c 93       	st	X, r24
 5fe:	2d c0       	rjmp	.+90     	; 0x65a <MDIO_vSetPinValue+0x20a>
			case PORTC:	CLR_BIT(PORTC_reg, copy_u8pin);	break;
 600:	a5 e3       	ldi	r26, 0x35	; 53
 602:	b0 e0       	ldi	r27, 0x00	; 0
 604:	e5 e3       	ldi	r30, 0x35	; 53
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	80 81       	ld	r24, Z
 60a:	48 2f       	mov	r20, r24
 60c:	8b 81       	ldd	r24, Y+3	; 0x03
 60e:	28 2f       	mov	r18, r24
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	02 2e       	mov	r0, r18
 618:	02 c0       	rjmp	.+4      	; 0x61e <MDIO_vSetPinValue+0x1ce>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	0a 94       	dec	r0
 620:	e2 f7       	brpl	.-8      	; 0x61a <MDIO_vSetPinValue+0x1ca>
 622:	80 95       	com	r24
 624:	84 23       	and	r24, r20
 626:	8c 93       	st	X, r24
 628:	18 c0       	rjmp	.+48     	; 0x65a <MDIO_vSetPinValue+0x20a>
			case PORTD:	CLR_BIT(PORTD_reg, copy_u8pin);	break;
 62a:	a2 e3       	ldi	r26, 0x32	; 50
 62c:	b0 e0       	ldi	r27, 0x00	; 0
 62e:	e2 e3       	ldi	r30, 0x32	; 50
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 81       	ld	r24, Z
 634:	48 2f       	mov	r20, r24
 636:	8b 81       	ldd	r24, Y+3	; 0x03
 638:	28 2f       	mov	r18, r24
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 2e       	mov	r0, r18
 642:	02 c0       	rjmp	.+4      	; 0x648 <MDIO_vSetPinValue+0x1f8>
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	0a 94       	dec	r0
 64a:	e2 f7       	brpl	.-8      	; 0x644 <MDIO_vSetPinValue+0x1f4>
 64c:	80 95       	com	r24
 64e:	84 23       	and	r24, r20
 650:	8c 93       	st	X, r24
 652:	03 c0       	rjmp	.+6      	; 0x65a <MDIO_vSetPinValue+0x20a>
			}
		}
		else
		{
			Local_enumState=DIO_NOK;
 654:	19 82       	std	Y+1, r1	; 0x01
 656:	01 c0       	rjmp	.+2      	; 0x65a <MDIO_vSetPinValue+0x20a>
		}
	}
	else
	{
		Local_enumState=DIO_NOK;
 658:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enumState;
 65a:	89 81       	ldd	r24, Y+1	; 0x01
}
 65c:	28 96       	adiw	r28, 0x08	; 8
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	f8 94       	cli
 662:	de bf       	out	0x3e, r29	; 62
 664:	0f be       	out	0x3f, r0	; 63
 666:	cd bf       	out	0x3d, r28	; 61
 668:	cf 91       	pop	r28
 66a:	df 91       	pop	r29
 66c:	08 95       	ret

0000066e <MDIO_GetPinValue>:
/*	function name:		void GET_PIN_VALUE( u8 PORT,u8 PIN_ID)
 * 	function inputs:	Port number, Pin number
 * 	function outputs:	value is is high or low
 */
/************************************************************************************************************/
u8 MDIO_GetPinValue( u8 copy_u8port,u8 copy_u8pin){
 66e:	df 93       	push	r29
 670:	cf 93       	push	r28
 672:	00 d0       	rcall	.+0      	; 0x674 <MDIO_GetPinValue+0x6>
 674:	00 d0       	rcall	.+0      	; 0x676 <MDIO_GetPinValue+0x8>
 676:	0f 92       	push	r0
 678:	cd b7       	in	r28, 0x3d	; 61
 67a:	de b7       	in	r29, 0x3e	; 62
 67c:	8a 83       	std	Y+2, r24	; 0x02
 67e:	6b 83       	std	Y+3, r22	; 0x03
	u8 value = 0;
 680:	19 82       	std	Y+1, r1	; 0x01

	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD) && (copy_u8pin >= PIN0)
 682:	8a 81       	ldd	r24, Y+2	; 0x02
 684:	84 30       	cpi	r24, 0x04	; 4
 686:	08 f0       	brcs	.+2      	; 0x68a <MDIO_GetPinValue+0x1c>
 688:	7b c0       	rjmp	.+246    	; 0x780 <MDIO_GetPinValue+0x112>
 68a:	8b 81       	ldd	r24, Y+3	; 0x03
 68c:	88 30       	cpi	r24, 0x08	; 8
 68e:	08 f0       	brcs	.+2      	; 0x692 <MDIO_GetPinValue+0x24>
 690:	77 c0       	rjmp	.+238    	; 0x780 <MDIO_GetPinValue+0x112>
			&& (copy_u8pin <= PIN7)) {

		switch (copy_u8port) {
 692:	8a 81       	ldd	r24, Y+2	; 0x02
 694:	28 2f       	mov	r18, r24
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	3d 83       	std	Y+5, r19	; 0x05
 69a:	2c 83       	std	Y+4, r18	; 0x04
 69c:	8c 81       	ldd	r24, Y+4	; 0x04
 69e:	9d 81       	ldd	r25, Y+5	; 0x05
 6a0:	81 30       	cpi	r24, 0x01	; 1
 6a2:	91 05       	cpc	r25, r1
 6a4:	61 f1       	breq	.+88     	; 0x6fe <MDIO_GetPinValue+0x90>
 6a6:	2c 81       	ldd	r18, Y+4	; 0x04
 6a8:	3d 81       	ldd	r19, Y+5	; 0x05
 6aa:	22 30       	cpi	r18, 0x02	; 2
 6ac:	31 05       	cpc	r19, r1
 6ae:	2c f4       	brge	.+10     	; 0x6ba <MDIO_GetPinValue+0x4c>
 6b0:	8c 81       	ldd	r24, Y+4	; 0x04
 6b2:	9d 81       	ldd	r25, Y+5	; 0x05
 6b4:	00 97       	sbiw	r24, 0x00	; 0
 6b6:	69 f0       	breq	.+26     	; 0x6d2 <MDIO_GetPinValue+0x64>
 6b8:	63 c0       	rjmp	.+198    	; 0x780 <MDIO_GetPinValue+0x112>
 6ba:	2c 81       	ldd	r18, Y+4	; 0x04
 6bc:	3d 81       	ldd	r19, Y+5	; 0x05
 6be:	22 30       	cpi	r18, 0x02	; 2
 6c0:	31 05       	cpc	r19, r1
 6c2:	99 f1       	breq	.+102    	; 0x72a <MDIO_GetPinValue+0xbc>
 6c4:	8c 81       	ldd	r24, Y+4	; 0x04
 6c6:	9d 81       	ldd	r25, Y+5	; 0x05
 6c8:	83 30       	cpi	r24, 0x03	; 3
 6ca:	91 05       	cpc	r25, r1
 6cc:	09 f4       	brne	.+2      	; 0x6d0 <MDIO_GetPinValue+0x62>
 6ce:	43 c0       	rjmp	.+134    	; 0x756 <MDIO_GetPinValue+0xe8>
 6d0:	57 c0       	rjmp	.+174    	; 0x780 <MDIO_GetPinValue+0x112>
		case PORTA:
			value = GET_BIT(PINA_reg, copy_u8pin);
 6d2:	a9 e3       	ldi	r26, 0x39	; 57
 6d4:	b0 e0       	ldi	r27, 0x00	; 0
 6d6:	e9 e3       	ldi	r30, 0x39	; 57
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
 6dc:	48 2f       	mov	r20, r24
 6de:	8b 81       	ldd	r24, Y+3	; 0x03
 6e0:	28 2f       	mov	r18, r24
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	02 2e       	mov	r0, r18
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <MDIO_GetPinValue+0x82>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	0a 94       	dec	r0
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <MDIO_GetPinValue+0x7e>
 6f4:	84 23       	and	r24, r20
 6f6:	8c 93       	st	X, r24
 6f8:	8c 91       	ld	r24, X
 6fa:	89 83       	std	Y+1, r24	; 0x01
 6fc:	41 c0       	rjmp	.+130    	; 0x780 <MDIO_GetPinValue+0x112>
			break;
		case PORTB:
			value = GET_BIT(PINB_reg, copy_u8pin);
 6fe:	a6 e3       	ldi	r26, 0x36	; 54
 700:	b0 e0       	ldi	r27, 0x00	; 0
 702:	e6 e3       	ldi	r30, 0x36	; 54
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	48 2f       	mov	r20, r24
 70a:	8b 81       	ldd	r24, Y+3	; 0x03
 70c:	28 2f       	mov	r18, r24
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	02 2e       	mov	r0, r18
 716:	02 c0       	rjmp	.+4      	; 0x71c <MDIO_GetPinValue+0xae>
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	0a 94       	dec	r0
 71e:	e2 f7       	brpl	.-8      	; 0x718 <MDIO_GetPinValue+0xaa>
 720:	84 23       	and	r24, r20
 722:	8c 93       	st	X, r24
 724:	8c 91       	ld	r24, X
 726:	89 83       	std	Y+1, r24	; 0x01
 728:	2b c0       	rjmp	.+86     	; 0x780 <MDIO_GetPinValue+0x112>
			break;
		case PORTC:
			value = GET_BIT(PINC_reg, copy_u8pin);
 72a:	a3 e3       	ldi	r26, 0x33	; 51
 72c:	b0 e0       	ldi	r27, 0x00	; 0
 72e:	e3 e3       	ldi	r30, 0x33	; 51
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	48 2f       	mov	r20, r24
 736:	8b 81       	ldd	r24, Y+3	; 0x03
 738:	28 2f       	mov	r18, r24
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	02 2e       	mov	r0, r18
 742:	02 c0       	rjmp	.+4      	; 0x748 <MDIO_GetPinValue+0xda>
 744:	88 0f       	add	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	0a 94       	dec	r0
 74a:	e2 f7       	brpl	.-8      	; 0x744 <MDIO_GetPinValue+0xd6>
 74c:	84 23       	and	r24, r20
 74e:	8c 93       	st	X, r24
 750:	8c 91       	ld	r24, X
 752:	89 83       	std	Y+1, r24	; 0x01
 754:	15 c0       	rjmp	.+42     	; 0x780 <MDIO_GetPinValue+0x112>
			break;
		case PORTD:
			value = GET_BIT(PIND_reg, copy_u8pin);
 756:	a0 e3       	ldi	r26, 0x30	; 48
 758:	b0 e0       	ldi	r27, 0x00	; 0
 75a:	e0 e3       	ldi	r30, 0x30	; 48
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	80 81       	ld	r24, Z
 760:	48 2f       	mov	r20, r24
 762:	8b 81       	ldd	r24, Y+3	; 0x03
 764:	28 2f       	mov	r18, r24
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	02 2e       	mov	r0, r18
 76e:	02 c0       	rjmp	.+4      	; 0x774 <MDIO_GetPinValue+0x106>
 770:	88 0f       	add	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	0a 94       	dec	r0
 776:	e2 f7       	brpl	.-8      	; 0x770 <MDIO_GetPinValue+0x102>
 778:	84 23       	and	r24, r20
 77a:	8c 93       	st	X, r24
 77c:	8c 91       	ld	r24, X
 77e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
 780:	89 81       	ldd	r24, Y+1	; 0x01

}
 782:	0f 90       	pop	r0
 784:	0f 90       	pop	r0
 786:	0f 90       	pop	r0
 788:	0f 90       	pop	r0
 78a:	0f 90       	pop	r0
 78c:	cf 91       	pop	r28
 78e:	df 91       	pop	r29
 790:	08 95       	ret

00000792 <MDIO_vTogglePinValue>:
 */
/************************************************************************************************************/


DIO_ErrorStatus MDIO_vTogglePinValue( u8 copy_u8port,u8 copy_u8pin)
 {
 792:	df 93       	push	r29
 794:	cf 93       	push	r28
 796:	00 d0       	rcall	.+0      	; 0x798 <MDIO_vTogglePinValue+0x6>
 798:	00 d0       	rcall	.+0      	; 0x79a <MDIO_vTogglePinValue+0x8>
 79a:	0f 92       	push	r0
 79c:	cd b7       	in	r28, 0x3d	; 61
 79e:	de b7       	in	r29, 0x3e	; 62
 7a0:	8a 83       	std	Y+2, r24	; 0x02
 7a2:	6b 83       	std	Y+3, r22	; 0x03
	/*create local var. from Error state*/
	DIO_ErrorStatus Local_enumState=DIO_Ok;
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	89 83       	std	Y+1, r24	; 0x01
	/*check the validation range of ports and pins */
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD) && (copy_u8pin >= PIN0)
 7a8:	8a 81       	ldd	r24, Y+2	; 0x02
 7aa:	84 30       	cpi	r24, 0x04	; 4
 7ac:	08 f0       	brcs	.+2      	; 0x7b0 <MDIO_vTogglePinValue+0x1e>
 7ae:	73 c0       	rjmp	.+230    	; 0x896 <__stack+0x37>
 7b0:	8b 81       	ldd	r24, Y+3	; 0x03
 7b2:	88 30       	cpi	r24, 0x08	; 8
 7b4:	08 f0       	brcs	.+2      	; 0x7b8 <MDIO_vTogglePinValue+0x26>
 7b6:	6f c0       	rjmp	.+222    	; 0x896 <__stack+0x37>
			&& (copy_u8pin <= PIN7)) {
		/*check PORT reg. value to toggle */
			switch (copy_u8port)
 7b8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ba:	28 2f       	mov	r18, r24
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	3d 83       	std	Y+5, r19	; 0x05
 7c0:	2c 83       	std	Y+4, r18	; 0x04
 7c2:	8c 81       	ldd	r24, Y+4	; 0x04
 7c4:	9d 81       	ldd	r25, Y+5	; 0x05
 7c6:	81 30       	cpi	r24, 0x01	; 1
 7c8:	91 05       	cpc	r25, r1
 7ca:	49 f1       	breq	.+82     	; 0x81e <MDIO_vTogglePinValue+0x8c>
 7cc:	2c 81       	ldd	r18, Y+4	; 0x04
 7ce:	3d 81       	ldd	r19, Y+5	; 0x05
 7d0:	22 30       	cpi	r18, 0x02	; 2
 7d2:	31 05       	cpc	r19, r1
 7d4:	2c f4       	brge	.+10     	; 0x7e0 <MDIO_vTogglePinValue+0x4e>
 7d6:	8c 81       	ldd	r24, Y+4	; 0x04
 7d8:	9d 81       	ldd	r25, Y+5	; 0x05
 7da:	00 97       	sbiw	r24, 0x00	; 0
 7dc:	61 f0       	breq	.+24     	; 0x7f6 <MDIO_vTogglePinValue+0x64>
 7de:	5c c0       	rjmp	.+184    	; 0x898 <__stack+0x39>
 7e0:	2c 81       	ldd	r18, Y+4	; 0x04
 7e2:	3d 81       	ldd	r19, Y+5	; 0x05
 7e4:	22 30       	cpi	r18, 0x02	; 2
 7e6:	31 05       	cpc	r19, r1
 7e8:	71 f1       	breq	.+92     	; 0x846 <MDIO_vTogglePinValue+0xb4>
 7ea:	8c 81       	ldd	r24, Y+4	; 0x04
 7ec:	9d 81       	ldd	r25, Y+5	; 0x05
 7ee:	83 30       	cpi	r24, 0x03	; 3
 7f0:	91 05       	cpc	r25, r1
 7f2:	e9 f1       	breq	.+122    	; 0x86e <__stack+0xf>
 7f4:	51 c0       	rjmp	.+162    	; 0x898 <__stack+0x39>
			{
			case PORTA:	TOG_BIT(PORTA_reg, copy_u8pin);	break;
 7f6:	ab e3       	ldi	r26, 0x3B	; 59
 7f8:	b0 e0       	ldi	r27, 0x00	; 0
 7fa:	eb e3       	ldi	r30, 0x3B	; 59
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	80 81       	ld	r24, Z
 800:	48 2f       	mov	r20, r24
 802:	8b 81       	ldd	r24, Y+3	; 0x03
 804:	28 2f       	mov	r18, r24
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	02 2e       	mov	r0, r18
 80e:	02 c0       	rjmp	.+4      	; 0x814 <MDIO_vTogglePinValue+0x82>
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	0a 94       	dec	r0
 816:	e2 f7       	brpl	.-8      	; 0x810 <MDIO_vTogglePinValue+0x7e>
 818:	84 27       	eor	r24, r20
 81a:	8c 93       	st	X, r24
 81c:	3d c0       	rjmp	.+122    	; 0x898 <__stack+0x39>
			case PORTB:	TOG_BIT(PORTB_reg, copy_u8pin);	break;
 81e:	a8 e3       	ldi	r26, 0x38	; 56
 820:	b0 e0       	ldi	r27, 0x00	; 0
 822:	e8 e3       	ldi	r30, 0x38	; 56
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	80 81       	ld	r24, Z
 828:	48 2f       	mov	r20, r24
 82a:	8b 81       	ldd	r24, Y+3	; 0x03
 82c:	28 2f       	mov	r18, r24
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	02 2e       	mov	r0, r18
 836:	02 c0       	rjmp	.+4      	; 0x83c <MDIO_vTogglePinValue+0xaa>
 838:	88 0f       	add	r24, r24
 83a:	99 1f       	adc	r25, r25
 83c:	0a 94       	dec	r0
 83e:	e2 f7       	brpl	.-8      	; 0x838 <MDIO_vTogglePinValue+0xa6>
 840:	84 27       	eor	r24, r20
 842:	8c 93       	st	X, r24
 844:	29 c0       	rjmp	.+82     	; 0x898 <__stack+0x39>
			case PORTC:	TOG_BIT(PORTC_reg, copy_u8pin);	break;
 846:	a5 e3       	ldi	r26, 0x35	; 53
 848:	b0 e0       	ldi	r27, 0x00	; 0
 84a:	e5 e3       	ldi	r30, 0x35	; 53
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	80 81       	ld	r24, Z
 850:	48 2f       	mov	r20, r24
 852:	8b 81       	ldd	r24, Y+3	; 0x03
 854:	28 2f       	mov	r18, r24
 856:	30 e0       	ldi	r19, 0x00	; 0
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	02 2e       	mov	r0, r18
 85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
 860:	88 0f       	add	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	0a 94       	dec	r0
 866:	e2 f7       	brpl	.-8      	; 0x860 <__stack+0x1>
 868:	84 27       	eor	r24, r20
 86a:	8c 93       	st	X, r24
 86c:	15 c0       	rjmp	.+42     	; 0x898 <__stack+0x39>
			case PORTD:	TOG_BIT(PORTD_reg, copy_u8pin);	break;
 86e:	a2 e3       	ldi	r26, 0x32	; 50
 870:	b0 e0       	ldi	r27, 0x00	; 0
 872:	e2 e3       	ldi	r30, 0x32	; 50
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	48 2f       	mov	r20, r24
 87a:	8b 81       	ldd	r24, Y+3	; 0x03
 87c:	28 2f       	mov	r18, r24
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	02 2e       	mov	r0, r18
 886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
 888:	88 0f       	add	r24, r24
 88a:	99 1f       	adc	r25, r25
 88c:	0a 94       	dec	r0
 88e:	e2 f7       	brpl	.-8      	; 0x888 <__stack+0x29>
 890:	84 27       	eor	r24, r20
 892:	8c 93       	st	X, r24
 894:	01 c0       	rjmp	.+2      	; 0x898 <__stack+0x39>
			}
		}
	else
	{
		Local_enumState=DIO_NOK;
 896:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enumState;
 898:	89 81       	ldd	r24, Y+1	; 0x01
}
 89a:	0f 90       	pop	r0
 89c:	0f 90       	pop	r0
 89e:	0f 90       	pop	r0
 8a0:	0f 90       	pop	r0
 8a2:	0f 90       	pop	r0
 8a4:	cf 91       	pop	r28
 8a6:	df 91       	pop	r29
 8a8:	08 95       	ret

000008aa <UART_vInit>:
/*             functions implementations                      */
/*------------------------------------------------------------*/


void UART_vInit(void)
{
 8aa:	df 93       	push	r29
 8ac:	cf 93       	push	r28
 8ae:	0f 92       	push	r0
 8b0:	cd b7       	in	r28, 0x3d	; 61
 8b2:	de b7       	in	r29, 0x3e	; 62
	/*instead of UCSRC itself as i can't set options directly to UCSRC	 */
	u8 UCSRC_register = 0;
 8b4:	19 82       	std	Y+1, r1	; 0x01

	/* set buad rate*/
	UBRRL = UBRR_value;    //9600 bps
 8b6:	e9 e2       	ldi	r30, 0x29	; 41
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	83 e3       	ldi	r24, 0x33	; 51
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	91 83       	std	Z+1, r25	; 0x01
 8c0:	80 83       	st	Z, r24
	/*selects between accessing the UCSRC or the UBRRH Register*/
#if REG_SELECT==UCSRC_reg_select
	SET_BIT(UCSRC_register,UCSRC_URSEL);
 8c2:	89 81       	ldd	r24, Y+1	; 0x01
 8c4:	80 68       	ori	r24, 0x80	; 128
 8c6:	89 83       	std	Y+1, r24	; 0x01
#elif PAYLOAD_SIZE==Bits_7
	CLR_BIT(UCSRB,UCSRB_UCSZ2);              	//UCSZ2
	CLR_BIT(UCSRC_register,UCSRC_UCSZ0);     	//UCSZ0
	SET_BIT(UCSRC_register,UCSRC_UCSZ0);     	//UCSZ1
#elif PAYLOAD_SIZE==Bits_8
	CLR_BIT(UCSRB,UCSRB_UCSZ2);              	//UCSZ2
 8c8:	aa e2       	ldi	r26, 0x2A	; 42
 8ca:	b0 e0       	ldi	r27, 0x00	; 0
 8cc:	ea e2       	ldi	r30, 0x2A	; 42
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	80 81       	ld	r24, Z
 8d2:	8b 7f       	andi	r24, 0xFB	; 251
 8d4:	8c 93       	st	X, r24
	SET_BIT(UCSRC_register,UCSRC_UCSZ0);     	//UCSZ0
 8d6:	89 81       	ldd	r24, Y+1	; 0x01
 8d8:	82 60       	ori	r24, 0x02	; 2
 8da:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_register,UCSRC_UCSZ0);     	//UCSZ1
 8dc:	89 81       	ldd	r24, Y+1	; 0x01
 8de:	82 60       	ori	r24, 0x02	; 2
 8e0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRB,UCSRB_TXB8);					// Transmit Data Bit 8
	SET_BIT(UCSRB,UCSRB_RXB8);					// Receive Data Bit  8
#endif

	/*enables the USART Receiver and transmitter. HW circuts --> in UCSRB register --RXEN,TXEN  */
	SET_BIT(UCSRB,UCSRB_RXEN);					//RXEN
 8e2:	aa e2       	ldi	r26, 0x2A	; 42
 8e4:	b0 e0       	ldi	r27, 0x00	; 0
 8e6:	ea e2       	ldi	r30, 0x2A	; 42
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	80 81       	ld	r24, Z
 8ec:	80 61       	ori	r24, 0x10	; 16
 8ee:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_TXEN); 					//TXEN
 8f0:	aa e2       	ldi	r26, 0x2A	; 42
 8f2:	b0 e0       	ldi	r27, 0x00	; 0
 8f4:	ea e2       	ldi	r30, 0x2A	; 42
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	80 81       	ld	r24, Z
 8fa:	88 60       	ori	r24, 0x08	; 8
 8fc:	8c 93       	st	X, r24

	/*number of stop bits */
#if STOP_BIT==Stop_bits_1
	CLR_BIT(UCSRC_register,UCSRC_USBS);
 8fe:	89 81       	ldd	r24, Y+1	; 0x01
 900:	87 7f       	andi	r24, 0xF7	; 247
 902:	89 83       	std	Y+1, r24	; 0x01
#elif STOP_BIT==Stop_bits_2
	SET_BIT(UCSRC_register,UCSRC_USBS);
#endif
	/* parity check control*/
#if PARITY_MODE==P_NO
	CLR_BIT(UCSRC_register, UCSRC_UPM0);
 904:	89 81       	ldd	r24, Y+1	; 0x01
 906:	8f 7e       	andi	r24, 0xEF	; 239
 908:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_register, UCSRC_UPM1);
 90a:	89 81       	ldd	r24, Y+1	; 0x01
 90c:	8f 7d       	andi	r24, 0xDF	; 223
 90e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_register, UCSRC_UPM1);
#endif

	/*mode of operation.*/
#if USART_Mode==UART_ASYNCH
	CLR_BIT(UCSRC_register, UCSRC_UMSEL);
 910:	89 81       	ldd	r24, Y+1	; 0x01
 912:	8f 7b       	andi	r24, 0xBF	; 191
 914:	89 83       	std	Y+1, r24	; 0x01
#endif


	/*clock polarity if it synch.*/
#if CLK_POLARITY==TRANSMITE_RISING_RECEIVE_FALLING
	CLR_BIT(UCSRC_register, UCSRC_UCPOL);
 916:	89 81       	ldd	r24, Y+1	; 0x01
 918:	8e 7f       	andi	r24, 0xFE	; 254
 91a:	89 83       	std	Y+1, r24	; 0x01
#elif clock_polarity==TRANSMITE_FALLING_RECEIVE_RISING
	SET_BIT(UCSRC_register,UCSRC_UCPOL);
#endif

	UCSRC = UCSRC_register;
 91c:	e0 e4       	ldi	r30, 0x40	; 64
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	89 81       	ldd	r24, Y+1	; 0x01
 922:	80 83       	st	Z, r24

}
 924:	0f 90       	pop	r0
 926:	cf 91       	pop	r28
 928:	df 91       	pop	r29
 92a:	08 95       	ret

0000092c <UART_vSend>:

void UART_vSend(u8 data_send){
 92c:	df 93       	push	r29
 92e:	cf 93       	push	r28
 930:	0f 92       	push	r0
 932:	cd b7       	in	r28, 0x3d	; 61
 934:	de b7       	in	r29, 0x3e	; 62
 936:	89 83       	std	Y+1, r24	; 0x01
/*wait the data to be shifted from Tx shift register ,(UDR reg is empty)*/
	while (!GET_BIT(UCSRA,UCSRA_UDRE));    //do nothing }
 938:	ab e2       	ldi	r26, 0x2B	; 43
 93a:	b0 e0       	ldi	r27, 0x00	; 0
 93c:	eb e2       	ldi	r30, 0x2B	; 43
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	80 72       	andi	r24, 0x20	; 32
 944:	8c 93       	st	X, r24
 946:	8c 91       	ld	r24, X
 948:	88 23       	and	r24, r24
 94a:	b1 f3       	breq	.-20     	; 0x938 <UART_vSend+0xc>
		UDR=data_send;
 94c:	ec e2       	ldi	r30, 0x2C	; 44
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	89 81       	ldd	r24, Y+1	; 0x01
 952:	80 83       	st	Z, r24
}
 954:	0f 90       	pop	r0
 956:	cf 91       	pop	r28
 958:	df 91       	pop	r29
 95a:	08 95       	ret

0000095c <UART_u8Receive>:

u8 UART_u8Receive(void){
 95c:	df 93       	push	r29
 95e:	cf 93       	push	r28
 960:	cd b7       	in	r28, 0x3d	; 61
 962:	de b7       	in	r29, 0x3e	; 62
	/*wait the data to be shifted from Tx shift register ,(UDR reg is empty)*/
	while (GET_BIT(UCSRA,UCSRA_RXC)==0);
 964:	ab e2       	ldi	r26, 0x2B	; 43
 966:	b0 e0       	ldi	r27, 0x00	; 0
 968:	eb e2       	ldi	r30, 0x2B	; 43
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	80 81       	ld	r24, Z
 96e:	80 78       	andi	r24, 0x80	; 128
 970:	8c 93       	st	X, r24
 972:	8c 91       	ld	r24, X
 974:	88 23       	and	r24, r24
 976:	b1 f3       	breq	.-20     	; 0x964 <UART_u8Receive+0x8>

	return UDR;
 978:	ec e2       	ldi	r30, 0x2C	; 44
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	80 81       	ld	r24, Z
}
 97e:	cf 91       	pop	r28
 980:	df 91       	pop	r29
 982:	08 95       	ret

00000984 <UART_u8GetRX_Data>:


u8 UART_u8GetRX_Data(void){
 984:	df 93       	push	r29
 986:	cf 93       	push	r28
 988:	cd b7       	in	r28, 0x3d	; 61
 98a:	de b7       	in	r29, 0x3e	; 62
	return UDR;
 98c:	ec e2       	ldi	r30, 0x2C	; 44
 98e:	f0 e0       	ldi	r31, 0x00	; 0
 990:	80 81       	ld	r24, Z
}
 992:	cf 91       	pop	r28
 994:	df 91       	pop	r29
 996:	08 95       	ret

00000998 <UART_vSendStr>:


void UART_vSendStr(char str[]) {
 998:	df 93       	push	r29
 99a:	cf 93       	push	r28
 99c:	00 d0       	rcall	.+0      	; 0x99e <UART_vSendStr+0x6>
 99e:	cd b7       	in	r28, 0x3d	; 61
 9a0:	de b7       	in	r29, 0x3e	; 62
 9a2:	9a 83       	std	Y+2, r25	; 0x02
 9a4:	89 83       	std	Y+1, r24	; 0x01
 9a6:	0a c0       	rjmp	.+20     	; 0x9bc <UART_vSendStr+0x24>

	while (*str != '\0') {
		UART_vSend(*str);
 9a8:	e9 81       	ldd	r30, Y+1	; 0x01
 9aa:	fa 81       	ldd	r31, Y+2	; 0x02
 9ac:	80 81       	ld	r24, Z
 9ae:	0e 94 96 04 	call	0x92c	; 0x92c <UART_vSend>
		str++;
 9b2:	89 81       	ldd	r24, Y+1	; 0x01
 9b4:	9a 81       	ldd	r25, Y+2	; 0x02
 9b6:	01 96       	adiw	r24, 0x01	; 1
 9b8:	9a 83       	std	Y+2, r25	; 0x02
 9ba:	89 83       	std	Y+1, r24	; 0x01
}


void UART_vSendStr(char str[]) {

	while (*str != '\0') {
 9bc:	e9 81       	ldd	r30, Y+1	; 0x01
 9be:	fa 81       	ldd	r31, Y+2	; 0x02
 9c0:	80 81       	ld	r24, Z
 9c2:	88 23       	and	r24, r24
 9c4:	89 f7       	brne	.-30     	; 0x9a8 <UART_vSendStr+0x10>
		UART_vSend(*str);
		str++;
	}
}
 9c6:	0f 90       	pop	r0
 9c8:	0f 90       	pop	r0
 9ca:	cf 91       	pop	r28
 9cc:	df 91       	pop	r29
 9ce:	08 95       	ret

000009d0 <UART_vRecciveStr>:

void UART_vRecciveStr(char *str , u16 size) {
 9d0:	0f 93       	push	r16
 9d2:	1f 93       	push	r17
 9d4:	df 93       	push	r29
 9d6:	cf 93       	push	r28
 9d8:	cd b7       	in	r28, 0x3d	; 61
 9da:	de b7       	in	r29, 0x3e	; 62
 9dc:	27 97       	sbiw	r28, 0x07	; 7
 9de:	0f b6       	in	r0, 0x3f	; 63
 9e0:	f8 94       	cli
 9e2:	de bf       	out	0x3e, r29	; 62
 9e4:	0f be       	out	0x3f, r0	; 63
 9e6:	cd bf       	out	0x3d, r28	; 61
 9e8:	9d 83       	std	Y+5, r25	; 0x05
 9ea:	8c 83       	std	Y+4, r24	; 0x04
 9ec:	7f 83       	std	Y+7, r23	; 0x07
 9ee:	6e 83       	std	Y+6, r22	; 0x06
	u8 flag=0;// flag to indicate that the user end the string
 9f0:	1b 82       	std	Y+3, r1	; 0x03
	for (u16 i=0;i<size-1;i++)
 9f2:	1a 82       	std	Y+2, r1	; 0x02
 9f4:	19 82       	std	Y+1, r1	; 0x01
 9f6:	25 c0       	rjmp	.+74     	; 0xa42 <UART_vRecciveStr+0x72>
	{
		if (str[i]=='\n')
 9f8:	2c 81       	ldd	r18, Y+4	; 0x04
 9fa:	3d 81       	ldd	r19, Y+5	; 0x05
 9fc:	89 81       	ldd	r24, Y+1	; 0x01
 9fe:	9a 81       	ldd	r25, Y+2	; 0x02
 a00:	f9 01       	movw	r30, r18
 a02:	e8 0f       	add	r30, r24
 a04:	f9 1f       	adc	r31, r25
 a06:	80 81       	ld	r24, Z
 a08:	8a 30       	cpi	r24, 0x0A	; 10
 a0a:	59 f4       	brne	.+22     	; 0xa22 <UART_vRecciveStr+0x52>
		{
			str[i]='\0';
 a0c:	2c 81       	ldd	r18, Y+4	; 0x04
 a0e:	3d 81       	ldd	r19, Y+5	; 0x05
 a10:	89 81       	ldd	r24, Y+1	; 0x01
 a12:	9a 81       	ldd	r25, Y+2	; 0x02
 a14:	f9 01       	movw	r30, r18
 a16:	e8 0f       	add	r30, r24
 a18:	f9 1f       	adc	r31, r25
 a1a:	10 82       	st	Z, r1
			flag=1;
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	8b 83       	std	Y+3, r24	; 0x03
 a20:	1a c0       	rjmp	.+52     	; 0xa56 <UART_vRecciveStr+0x86>
			break;
		}
		str[i]=UART_u8Receive();
 a22:	2c 81       	ldd	r18, Y+4	; 0x04
 a24:	3d 81       	ldd	r19, Y+5	; 0x05
 a26:	89 81       	ldd	r24, Y+1	; 0x01
 a28:	9a 81       	ldd	r25, Y+2	; 0x02
 a2a:	89 01       	movw	r16, r18
 a2c:	08 0f       	add	r16, r24
 a2e:	19 1f       	adc	r17, r25
 a30:	0e 94 ae 04 	call	0x95c	; 0x95c <UART_u8Receive>
 a34:	f8 01       	movw	r30, r16
 a36:	80 83       	st	Z, r24
	}
}

void UART_vRecciveStr(char *str , u16 size) {
	u8 flag=0;// flag to indicate that the user end the string
	for (u16 i=0;i<size-1;i++)
 a38:	89 81       	ldd	r24, Y+1	; 0x01
 a3a:	9a 81       	ldd	r25, Y+2	; 0x02
 a3c:	01 96       	adiw	r24, 0x01	; 1
 a3e:	9a 83       	std	Y+2, r25	; 0x02
 a40:	89 83       	std	Y+1, r24	; 0x01
 a42:	8e 81       	ldd	r24, Y+6	; 0x06
 a44:	9f 81       	ldd	r25, Y+7	; 0x07
 a46:	9c 01       	movw	r18, r24
 a48:	21 50       	subi	r18, 0x01	; 1
 a4a:	30 40       	sbci	r19, 0x00	; 0
 a4c:	89 81       	ldd	r24, Y+1	; 0x01
 a4e:	9a 81       	ldd	r25, Y+2	; 0x02
 a50:	82 17       	cp	r24, r18
 a52:	93 07       	cpc	r25, r19
 a54:	88 f2       	brcs	.-94     	; 0x9f8 <UART_vRecciveStr+0x28>
			flag=1;
			break;
		}
		str[i]=UART_u8Receive();
	}
	if (flag==0)
 a56:	8b 81       	ldd	r24, Y+3	; 0x03
 a58:	88 23       	and	r24, r24
 a5a:	59 f4       	brne	.+22     	; 0xa72 <UART_vRecciveStr+0xa2>
	{
		str[size-1]='\0';
 a5c:	8e 81       	ldd	r24, Y+6	; 0x06
 a5e:	9f 81       	ldd	r25, Y+7	; 0x07
 a60:	9c 01       	movw	r18, r24
 a62:	21 50       	subi	r18, 0x01	; 1
 a64:	30 40       	sbci	r19, 0x00	; 0
 a66:	8c 81       	ldd	r24, Y+4	; 0x04
 a68:	9d 81       	ldd	r25, Y+5	; 0x05
 a6a:	fc 01       	movw	r30, r24
 a6c:	e2 0f       	add	r30, r18
 a6e:	f3 1f       	adc	r31, r19
 a70:	10 82       	st	Z, r1
	}
}
 a72:	27 96       	adiw	r28, 0x07	; 7
 a74:	0f b6       	in	r0, 0x3f	; 63
 a76:	f8 94       	cli
 a78:	de bf       	out	0x3e, r29	; 62
 a7a:	0f be       	out	0x3f, r0	; 63
 a7c:	cd bf       	out	0x3d, r28	; 61
 a7e:	cf 91       	pop	r28
 a80:	df 91       	pop	r29
 a82:	1f 91       	pop	r17
 a84:	0f 91       	pop	r16
 a86:	08 95       	ret

00000a88 <UART_EnableInt>:

void UART_EnableInt(void) {
 a88:	df 93       	push	r29
 a8a:	cf 93       	push	r28
 a8c:	cd b7       	in	r28, 0x3d	; 61
 a8e:	de b7       	in	r29, 0x3e	; 62
	/*enable interrupts
	 * 1-RX complete
	 * 2-TX complete
	 * 3-UDR register empty
	 */
	SET_BIT(UCSRB,UCSRB_RXCIE);  		//PIE of RX
 a90:	aa e2       	ldi	r26, 0x2A	; 42
 a92:	b0 e0       	ldi	r27, 0x00	; 0
 a94:	ea e2       	ldi	r30, 0x2A	; 42
 a96:	f0 e0       	ldi	r31, 0x00	; 0
 a98:	80 81       	ld	r24, Z
 a9a:	80 68       	ori	r24, 0x80	; 128
 a9c:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_TXCIE);			//PIE of TX
 a9e:	aa e2       	ldi	r26, 0x2A	; 42
 aa0:	b0 e0       	ldi	r27, 0x00	; 0
 aa2:	ea e2       	ldi	r30, 0x2A	; 42
 aa4:	f0 e0       	ldi	r31, 0x00	; 0
 aa6:	80 81       	ld	r24, Z
 aa8:	80 64       	ori	r24, 0x40	; 64
 aaa:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_UDRIE);			//PIE of udr empty flag
 aac:	aa e2       	ldi	r26, 0x2A	; 42
 aae:	b0 e0       	ldi	r27, 0x00	; 0
 ab0:	ea e2       	ldi	r30, 0x2A	; 42
 ab2:	f0 e0       	ldi	r31, 0x00	; 0
 ab4:	80 81       	ld	r24, Z
 ab6:	80 62       	ori	r24, 0x20	; 32
 ab8:	8c 93       	st	X, r24

}
 aba:	cf 91       	pop	r28
 abc:	df 91       	pop	r29
 abe:	08 95       	ret

00000ac0 <UART_DisableInt>:

void UART_DisableInt(void) {
 ac0:	df 93       	push	r29
 ac2:	cf 93       	push	r28
 ac4:	cd b7       	in	r28, 0x3d	; 61
 ac6:	de b7       	in	r29, 0x3e	; 62
	/*disable interrupts
	 * 1-RX complete
	 * 2-TX complete
	 * 3-UDR register empty
	 */
	CLR_BIT(UCSRB,UCSRB_RXCIE);  		//PIE of RX
 ac8:	aa e2       	ldi	r26, 0x2A	; 42
 aca:	b0 e0       	ldi	r27, 0x00	; 0
 acc:	ea e2       	ldi	r30, 0x2A	; 42
 ace:	f0 e0       	ldi	r31, 0x00	; 0
 ad0:	80 81       	ld	r24, Z
 ad2:	8f 77       	andi	r24, 0x7F	; 127
 ad4:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSRB_TXCIE);			//PIE of TX
 ad6:	aa e2       	ldi	r26, 0x2A	; 42
 ad8:	b0 e0       	ldi	r27, 0x00	; 0
 ada:	ea e2       	ldi	r30, 0x2A	; 42
 adc:	f0 e0       	ldi	r31, 0x00	; 0
 ade:	80 81       	ld	r24, Z
 ae0:	8f 7b       	andi	r24, 0xBF	; 191
 ae2:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSRB_UDRIE);			//PIE of udr empty flag
 ae4:	aa e2       	ldi	r26, 0x2A	; 42
 ae6:	b0 e0       	ldi	r27, 0x00	; 0
 ae8:	ea e2       	ldi	r30, 0x2A	; 42
 aea:	f0 e0       	ldi	r31, 0x00	; 0
 aec:	80 81       	ld	r24, Z
 aee:	8f 7d       	andi	r24, 0xDF	; 223
 af0:	8c 93       	st	X, r24

}
 af2:	cf 91       	pop	r28
 af4:	df 91       	pop	r29
 af6:	08 95       	ret

00000af8 <UART_vSetBuadRate>:

void UART_vSetBuadRate(u16 buad) {
 af8:	df 93       	push	r29
 afa:	cf 93       	push	r28
 afc:	00 d0       	rcall	.+0      	; 0xafe <UART_vSetBuadRate+0x6>
 afe:	00 d0       	rcall	.+0      	; 0xb00 <UART_vSetBuadRate+0x8>
 b00:	cd b7       	in	r28, 0x3d	; 61
 b02:	de b7       	in	r29, 0x3e	; 62
 b04:	9c 83       	std	Y+4, r25	; 0x04
 b06:	8b 83       	std	Y+3, r24	; 0x03
	u16 Baud_value=( (FreQ/(16*buad))-1);
 b08:	8b 81       	ldd	r24, Y+3	; 0x03
 b0a:	9c 81       	ldd	r25, Y+4	; 0x04
 b0c:	82 95       	swap	r24
 b0e:	92 95       	swap	r25
 b10:	90 7f       	andi	r25, 0xF0	; 240
 b12:	98 27       	eor	r25, r24
 b14:	80 7f       	andi	r24, 0xF0	; 240
 b16:	98 27       	eor	r25, r24
 b18:	9c 01       	movw	r18, r24
 b1a:	40 e0       	ldi	r20, 0x00	; 0
 b1c:	50 e0       	ldi	r21, 0x00	; 0
 b1e:	80 e0       	ldi	r24, 0x00	; 0
 b20:	92 e1       	ldi	r25, 0x12	; 18
 b22:	aa e7       	ldi	r26, 0x7A	; 122
 b24:	b0 e0       	ldi	r27, 0x00	; 0
 b26:	bc 01       	movw	r22, r24
 b28:	cd 01       	movw	r24, r26
 b2a:	0e 94 8a 06 	call	0xd14	; 0xd14 <__divmodsi4>
 b2e:	da 01       	movw	r26, r20
 b30:	c9 01       	movw	r24, r18
 b32:	01 97       	sbiw	r24, 0x01	; 1
 b34:	9a 83       	std	Y+2, r25	; 0x02
 b36:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=(u8)Baud_value;
 b38:	e9 e2       	ldi	r30, 0x29	; 41
 b3a:	f0 e0       	ldi	r31, 0x00	; 0
 b3c:	89 81       	ldd	r24, Y+1	; 0x01
 b3e:	88 2f       	mov	r24, r24
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	91 83       	std	Z+1, r25	; 0x01
 b44:	80 83       	st	Z, r24
	UBRRH=(u8)Baud_value>>8;
 b46:	e0 e4       	ldi	r30, 0x40	; 64
 b48:	f0 e0       	ldi	r31, 0x00	; 0
 b4a:	89 81       	ldd	r24, Y+1	; 0x01
 b4c:	88 2f       	mov	r24, r24
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	89 2f       	mov	r24, r25
 b52:	99 0f       	add	r25, r25
 b54:	99 0b       	sbc	r25, r25
 b56:	80 83       	st	Z, r24
}
 b58:	0f 90       	pop	r0
 b5a:	0f 90       	pop	r0
 b5c:	0f 90       	pop	r0
 b5e:	0f 90       	pop	r0
 b60:	cf 91       	pop	r28
 b62:	df 91       	pop	r29
 b64:	08 95       	ret

00000b66 <UART_CallBack>:

void UART_CallBack(u8 source, void (*fptr)(void)) {
 b66:	df 93       	push	r29
 b68:	cf 93       	push	r28
 b6a:	00 d0       	rcall	.+0      	; 0xb6c <UART_CallBack+0x6>
 b6c:	00 d0       	rcall	.+0      	; 0xb6e <UART_CallBack+0x8>
 b6e:	0f 92       	push	r0
 b70:	cd b7       	in	r28, 0x3d	; 61
 b72:	de b7       	in	r29, 0x3e	; 62
 b74:	89 83       	std	Y+1, r24	; 0x01
 b76:	7b 83       	std	Y+3, r23	; 0x03
 b78:	6a 83       	std	Y+2, r22	; 0x02
	switch(source)
 b7a:	89 81       	ldd	r24, Y+1	; 0x01
 b7c:	28 2f       	mov	r18, r24
 b7e:	30 e0       	ldi	r19, 0x00	; 0
 b80:	3d 83       	std	Y+5, r19	; 0x05
 b82:	2c 83       	std	Y+4, r18	; 0x04
 b84:	8c 81       	ldd	r24, Y+4	; 0x04
 b86:	9d 81       	ldd	r25, Y+5	; 0x05
 b88:	81 30       	cpi	r24, 0x01	; 1
 b8a:	91 05       	cpc	r25, r1
 b8c:	31 f0       	breq	.+12     	; 0xb9a <UART_CallBack+0x34>
 b8e:	2c 81       	ldd	r18, Y+4	; 0x04
 b90:	3d 81       	ldd	r19, Y+5	; 0x05
 b92:	22 30       	cpi	r18, 0x02	; 2
 b94:	31 05       	cpc	r19, r1
 b96:	41 f0       	breq	.+16     	; 0xba8 <UART_CallBack+0x42>
 b98:	0d c0       	rjmp	.+26     	; 0xbb4 <UART_CallBack+0x4e>
	{

	case UART_TX:
	transmit_CallBack=fptr;
 b9a:	8a 81       	ldd	r24, Y+2	; 0x02
 b9c:	9b 81       	ldd	r25, Y+3	; 0x03
 b9e:	90 93 61 00 	sts	0x0061, r25
 ba2:	80 93 60 00 	sts	0x0060, r24
 ba6:	06 c0       	rjmp	.+12     	; 0xbb4 <UART_CallBack+0x4e>
		break;
	case UART_RX:
	receive_CallBack=fptr;
 ba8:	8a 81       	ldd	r24, Y+2	; 0x02
 baa:	9b 81       	ldd	r25, Y+3	; 0x03
 bac:	90 93 63 00 	sts	0x0063, r25
 bb0:	80 93 62 00 	sts	0x0062, r24
		break;
	}

}
 bb4:	0f 90       	pop	r0
 bb6:	0f 90       	pop	r0
 bb8:	0f 90       	pop	r0
 bba:	0f 90       	pop	r0
 bbc:	0f 90       	pop	r0
 bbe:	cf 91       	pop	r28
 bc0:	df 91       	pop	r29
 bc2:	08 95       	ret

00000bc4 <__vector_13>:
/**************************************************************************************************/


void __vector_13 (void) __attribute__((signal));
void __vector_13(void)
{
 bc4:	1f 92       	push	r1
 bc6:	0f 92       	push	r0
 bc8:	0f b6       	in	r0, 0x3f	; 63
 bca:	0f 92       	push	r0
 bcc:	11 24       	eor	r1, r1
 bce:	2f 93       	push	r18
 bd0:	3f 93       	push	r19
 bd2:	4f 93       	push	r20
 bd4:	5f 93       	push	r21
 bd6:	6f 93       	push	r22
 bd8:	7f 93       	push	r23
 bda:	8f 93       	push	r24
 bdc:	9f 93       	push	r25
 bde:	af 93       	push	r26
 be0:	bf 93       	push	r27
 be2:	ef 93       	push	r30
 be4:	ff 93       	push	r31
 be6:	df 93       	push	r29
 be8:	cf 93       	push	r28
 bea:	cd b7       	in	r28, 0x3d	; 61
 bec:	de b7       	in	r29, 0x3e	; 62
	if( receive_CallBack !=NULL)
 bee:	80 91 62 00 	lds	r24, 0x0062
 bf2:	90 91 63 00 	lds	r25, 0x0063
 bf6:	00 97       	sbiw	r24, 0x00	; 0
 bf8:	29 f0       	breq	.+10     	; 0xc04 <__vector_13+0x40>

	{receive_CallBack();
 bfa:	e0 91 62 00 	lds	r30, 0x0062
 bfe:	f0 91 63 00 	lds	r31, 0x0063
 c02:	09 95       	icall

	}

}
 c04:	cf 91       	pop	r28
 c06:	df 91       	pop	r29
 c08:	ff 91       	pop	r31
 c0a:	ef 91       	pop	r30
 c0c:	bf 91       	pop	r27
 c0e:	af 91       	pop	r26
 c10:	9f 91       	pop	r25
 c12:	8f 91       	pop	r24
 c14:	7f 91       	pop	r23
 c16:	6f 91       	pop	r22
 c18:	5f 91       	pop	r21
 c1a:	4f 91       	pop	r20
 c1c:	3f 91       	pop	r19
 c1e:	2f 91       	pop	r18
 c20:	0f 90       	pop	r0
 c22:	0f be       	out	0x3f, r0	; 63
 c24:	0f 90       	pop	r0
 c26:	1f 90       	pop	r1
 c28:	18 95       	reti

00000c2a <__vector_14>:

void __vector_14 (void) __attribute__((signal));

void __vector_14(void)
{
 c2a:	1f 92       	push	r1
 c2c:	0f 92       	push	r0
 c2e:	0f b6       	in	r0, 0x3f	; 63
 c30:	0f 92       	push	r0
 c32:	11 24       	eor	r1, r1
 c34:	2f 93       	push	r18
 c36:	3f 93       	push	r19
 c38:	4f 93       	push	r20
 c3a:	5f 93       	push	r21
 c3c:	6f 93       	push	r22
 c3e:	7f 93       	push	r23
 c40:	8f 93       	push	r24
 c42:	9f 93       	push	r25
 c44:	af 93       	push	r26
 c46:	bf 93       	push	r27
 c48:	ef 93       	push	r30
 c4a:	ff 93       	push	r31
 c4c:	df 93       	push	r29
 c4e:	cf 93       	push	r28
 c50:	cd b7       	in	r28, 0x3d	; 61
 c52:	de b7       	in	r29, 0x3e	; 62
	if (transmit_CallBack!=NULL)
 c54:	80 91 60 00 	lds	r24, 0x0060
 c58:	90 91 61 00 	lds	r25, 0x0061
 c5c:	00 97       	sbiw	r24, 0x00	; 0
 c5e:	29 f0       	breq	.+10     	; 0xc6a <__vector_14+0x40>
	{UDRE_CallBack();
 c60:	e0 91 64 00 	lds	r30, 0x0064
 c64:	f0 91 65 00 	lds	r31, 0x0065
 c68:	09 95       	icall

	}

}
 c6a:	cf 91       	pop	r28
 c6c:	df 91       	pop	r29
 c6e:	ff 91       	pop	r31
 c70:	ef 91       	pop	r30
 c72:	bf 91       	pop	r27
 c74:	af 91       	pop	r26
 c76:	9f 91       	pop	r25
 c78:	8f 91       	pop	r24
 c7a:	7f 91       	pop	r23
 c7c:	6f 91       	pop	r22
 c7e:	5f 91       	pop	r21
 c80:	4f 91       	pop	r20
 c82:	3f 91       	pop	r19
 c84:	2f 91       	pop	r18
 c86:	0f 90       	pop	r0
 c88:	0f be       	out	0x3f, r0	; 63
 c8a:	0f 90       	pop	r0
 c8c:	1f 90       	pop	r1
 c8e:	18 95       	reti

00000c90 <__vector_15>:

void __vector_15 (void) __attribute__((signal));

void __vector_15(void)
{
 c90:	1f 92       	push	r1
 c92:	0f 92       	push	r0
 c94:	0f b6       	in	r0, 0x3f	; 63
 c96:	0f 92       	push	r0
 c98:	11 24       	eor	r1, r1
 c9a:	2f 93       	push	r18
 c9c:	3f 93       	push	r19
 c9e:	4f 93       	push	r20
 ca0:	5f 93       	push	r21
 ca2:	6f 93       	push	r22
 ca4:	7f 93       	push	r23
 ca6:	8f 93       	push	r24
 ca8:	9f 93       	push	r25
 caa:	af 93       	push	r26
 cac:	bf 93       	push	r27
 cae:	ef 93       	push	r30
 cb0:	ff 93       	push	r31
 cb2:	df 93       	push	r29
 cb4:	cf 93       	push	r28
 cb6:	cd b7       	in	r28, 0x3d	; 61
 cb8:	de b7       	in	r29, 0x3e	; 62
	if (transmit_CallBack!=NULL)
 cba:	80 91 60 00 	lds	r24, 0x0060
 cbe:	90 91 61 00 	lds	r25, 0x0061
 cc2:	00 97       	sbiw	r24, 0x00	; 0
 cc4:	29 f0       	breq	.+10     	; 0xcd0 <__vector_15+0x40>
	{transmit_CallBack();
 cc6:	e0 91 60 00 	lds	r30, 0x0060
 cca:	f0 91 61 00 	lds	r31, 0x0061
 cce:	09 95       	icall

	}

}
 cd0:	cf 91       	pop	r28
 cd2:	df 91       	pop	r29
 cd4:	ff 91       	pop	r31
 cd6:	ef 91       	pop	r30
 cd8:	bf 91       	pop	r27
 cda:	af 91       	pop	r26
 cdc:	9f 91       	pop	r25
 cde:	8f 91       	pop	r24
 ce0:	7f 91       	pop	r23
 ce2:	6f 91       	pop	r22
 ce4:	5f 91       	pop	r21
 ce6:	4f 91       	pop	r20
 ce8:	3f 91       	pop	r19
 cea:	2f 91       	pop	r18
 cec:	0f 90       	pop	r0
 cee:	0f be       	out	0x3f, r0	; 63
 cf0:	0f 90       	pop	r0
 cf2:	1f 90       	pop	r1
 cf4:	18 95       	reti

00000cf6 <main>:


#if test_UART
int main()

{
 cf6:	df 93       	push	r29
 cf8:	cf 93       	push	r28
 cfa:	0f 92       	push	r0
 cfc:	cd b7       	in	r28, 0x3d	; 61
 cfe:	de b7       	in	r29, 0x3e	; 62
	u8 receive =0;
 d00:	19 82       	std	Y+1, r1	; 0x01

	UART_vInit();
 d02:	0e 94 55 04 	call	0x8aa	; 0x8aa <UART_vInit>

	while (1) {
	receive=UART_u8Receive();
 d06:	0e 94 ae 04 	call	0x95c	; 0x95c <UART_u8Receive>
 d0a:	89 83       	std	Y+1, r24	; 0x01
	UART_vSend(receive);
 d0c:	89 81       	ldd	r24, Y+1	; 0x01
 d0e:	0e 94 96 04 	call	0x92c	; 0x92c <UART_vSend>
 d12:	f9 cf       	rjmp	.-14     	; 0xd06 <main+0x10>

00000d14 <__divmodsi4>:
 d14:	97 fb       	bst	r25, 7
 d16:	09 2e       	mov	r0, r25
 d18:	05 26       	eor	r0, r21
 d1a:	0e d0       	rcall	.+28     	; 0xd38 <__divmodsi4_neg1>
 d1c:	57 fd       	sbrc	r21, 7
 d1e:	04 d0       	rcall	.+8      	; 0xd28 <__divmodsi4_neg2>
 d20:	14 d0       	rcall	.+40     	; 0xd4a <__udivmodsi4>
 d22:	0a d0       	rcall	.+20     	; 0xd38 <__divmodsi4_neg1>
 d24:	00 1c       	adc	r0, r0
 d26:	38 f4       	brcc	.+14     	; 0xd36 <__divmodsi4_exit>

00000d28 <__divmodsi4_neg2>:
 d28:	50 95       	com	r21
 d2a:	40 95       	com	r20
 d2c:	30 95       	com	r19
 d2e:	21 95       	neg	r18
 d30:	3f 4f       	sbci	r19, 0xFF	; 255
 d32:	4f 4f       	sbci	r20, 0xFF	; 255
 d34:	5f 4f       	sbci	r21, 0xFF	; 255

00000d36 <__divmodsi4_exit>:
 d36:	08 95       	ret

00000d38 <__divmodsi4_neg1>:
 d38:	f6 f7       	brtc	.-4      	; 0xd36 <__divmodsi4_exit>
 d3a:	90 95       	com	r25
 d3c:	80 95       	com	r24
 d3e:	70 95       	com	r23
 d40:	61 95       	neg	r22
 d42:	7f 4f       	sbci	r23, 0xFF	; 255
 d44:	8f 4f       	sbci	r24, 0xFF	; 255
 d46:	9f 4f       	sbci	r25, 0xFF	; 255
 d48:	08 95       	ret

00000d4a <__udivmodsi4>:
 d4a:	a1 e2       	ldi	r26, 0x21	; 33
 d4c:	1a 2e       	mov	r1, r26
 d4e:	aa 1b       	sub	r26, r26
 d50:	bb 1b       	sub	r27, r27
 d52:	fd 01       	movw	r30, r26
 d54:	0d c0       	rjmp	.+26     	; 0xd70 <__udivmodsi4_ep>

00000d56 <__udivmodsi4_loop>:
 d56:	aa 1f       	adc	r26, r26
 d58:	bb 1f       	adc	r27, r27
 d5a:	ee 1f       	adc	r30, r30
 d5c:	ff 1f       	adc	r31, r31
 d5e:	a2 17       	cp	r26, r18
 d60:	b3 07       	cpc	r27, r19
 d62:	e4 07       	cpc	r30, r20
 d64:	f5 07       	cpc	r31, r21
 d66:	20 f0       	brcs	.+8      	; 0xd70 <__udivmodsi4_ep>
 d68:	a2 1b       	sub	r26, r18
 d6a:	b3 0b       	sbc	r27, r19
 d6c:	e4 0b       	sbc	r30, r20
 d6e:	f5 0b       	sbc	r31, r21

00000d70 <__udivmodsi4_ep>:
 d70:	66 1f       	adc	r22, r22
 d72:	77 1f       	adc	r23, r23
 d74:	88 1f       	adc	r24, r24
 d76:	99 1f       	adc	r25, r25
 d78:	1a 94       	dec	r1
 d7a:	69 f7       	brne	.-38     	; 0xd56 <__udivmodsi4_loop>
 d7c:	60 95       	com	r22
 d7e:	70 95       	com	r23
 d80:	80 95       	com	r24
 d82:	90 95       	com	r25
 d84:	9b 01       	movw	r18, r22
 d86:	ac 01       	movw	r20, r24
 d88:	bd 01       	movw	r22, r26
 d8a:	cf 01       	movw	r24, r30
 d8c:	08 95       	ret

00000d8e <_exit>:
 d8e:	f8 94       	cli

00000d90 <__stop_program>:
 d90:	ff cf       	rjmp	.-2      	; 0xd90 <__stop_program>
