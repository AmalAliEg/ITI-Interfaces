
timer_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000248  2**0
                  ALLOC
  2 .stab         00000468  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000455  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  74:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <AVR_GIEInit>:

#include "MTIMER_interface.h"


void AVR_GIEInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	switch (GIE_MODE)
	{
	case enable:
		SET_BIT(SREG, 7);
  84:	af e5       	ldi	r26, 0x5F	; 95
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	ef e5       	ldi	r30, 0x5F	; 95
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	8c 93       	st	X, r24
		break;
	case disable:
		CLR_BIT(SREG, 7);
		break;
	}
}
  92:	cf 91       	pop	r28
  94:	df 91       	pop	r29
  96:	08 95       	ret

00000098 <MTIMER_vTimerInit>:

void MTIMER_vTimerInit()
{
  98:	df 93       	push	r29
  9a:	cf 93       	push	r28
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
#elif Timer_mode==T0PhasePWM_M
#elif Timer_mode==T0CTC_M
#elif Timer_mode==T0FastPWM_M
#endif
	/*mask the TCCR reg*/
	TCCR0&=0xF8;        //0b11111000
  a0:	a3 e5       	ldi	r26, 0x53	; 83
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e3 e5       	ldi	r30, 0x53	; 83
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	88 7f       	andi	r24, 0xF8	; 248
  ac:	8c 93       	st	X, r24
	/*set prescaller */
	TCCR0|=Timer0_prescaller;
  ae:	a3 e5       	ldi	r26, 0x53	; 83
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e3 e5       	ldi	r30, 0x53	; 83
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	83 60       	ori	r24, 0x03	; 3
  ba:	8c 93       	st	X, r24


}
  bc:	cf 91       	pop	r28
  be:	df 91       	pop	r29
  c0:	08 95       	ret

000000c2 <MTIMER_vSetPreLoad>:

u16 MTIMER_vSetPreLoad(u16 copy_u16Delay/*1000ms*/){
  c2:	df 93       	push	r29
  c4:	cf 93       	push	r28
  c6:	00 d0       	rcall	.+0      	; 0xc8 <MTIMER_vSetPreLoad+0x6>
  c8:	00 d0       	rcall	.+0      	; 0xca <MTIMER_vSetPreLoad+0x8>
  ca:	0f 92       	push	r0
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	9b 83       	std	Y+3, r25	; 0x03
  d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 TickTime=0;
  d4:	19 82       	std	Y+1, r1	; 0x01
#elif Timer0_prescaller==PR_65
#elif Timer0_prescaller==PR_256
#elif Timer0_prescaller==PR_1024
#endif

	TickTime=
  d6:	a9 e5       	ldi	r26, 0x59	; 89
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	e9 e5       	ldi	r30, 0x59	; 89
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	8c 93       	st	X, r24
  e4:	8c 91       	ld	r24, X
  e6:	89 83       	std	Y+1, r24	; 0x01

	/*set preload value*/
	/*enable PIE*/
	SET_BIT(TIMSK,TIMSK_TOIE0);

}
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	cf 91       	pop	r28
  f4:	df 91       	pop	r29
  f6:	08 95       	ret

000000f8 <MTIMER_vStartTimer>:

void MTIMER_vStartTimer(u16 copy_u16TimerId){
  f8:	df 93       	push	r29
  fa:	cf 93       	push	r28
  fc:	00 d0       	rcall	.+0      	; 0xfe <MTIMER_vStartTimer+0x6>
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	9a 83       	std	Y+2, r25	; 0x02
 104:	89 83       	std	Y+1, r24	; 0x01
	TCNT0|=PR_64;
 106:	a2 e5       	ldi	r26, 0x52	; 82
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	e2 e5       	ldi	r30, 0x52	; 82
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	83 60       	ori	r24, 0x03	; 3
 112:	8c 93       	st	X, r24
}
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	cf 91       	pop	r28
 11a:	df 91       	pop	r29
 11c:	08 95       	ret

0000011e <MTIMER_SetCallback>:



static void (*MTM_OF0_CALLBACK)(void);  //timer0 overflow

void MTIMER_SetCallback(void(*fptr)(void)){
 11e:	df 93       	push	r29
 120:	cf 93       	push	r28
 122:	00 d0       	rcall	.+0      	; 0x124 <MTIMER_SetCallback+0x6>
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	9a 83       	std	Y+2, r25	; 0x02
 12a:	89 83       	std	Y+1, r24	; 0x01
	if (fptr!=NULL)
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	9a 81       	ldd	r25, Y+2	; 0x02
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	31 f0       	breq	.+12     	; 0x140 <MTIMER_SetCallback+0x22>
		MTM_OF0_CALLBACK=fptr;
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	9a 81       	ldd	r25, Y+2	; 0x02
 138:	90 93 61 00 	sts	0x0061, r25
 13c:	80 93 60 00 	sts	0x0060, r24

}
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	cf 91       	pop	r28
 146:	df 91       	pop	r29
 148:	08 95       	ret

0000014a <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
 16c:	df 93       	push	r29
 16e:	cf 93       	push	r28
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
	if (MTM_OF0_CALLBACK != NULL)
 174:	80 91 60 00 	lds	r24, 0x0060
 178:	90 91 61 00 	lds	r25, 0x0061
 17c:	00 97       	sbiw	r24, 0x00	; 0
 17e:	29 f0       	breq	.+10     	; 0x18a <__vector_11+0x40>
		MTM_OF0_CALLBACK();
 180:	e0 91 60 00 	lds	r30, 0x0060
 184:	f0 91 61 00 	lds	r31, 0x0061
 188:	09 95       	icall
	// clear ADC interrupt flag
		SET_BIT(TIFR,TIFR_TOV0);
 18a:	a8 e5       	ldi	r26, 0x58	; 88
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	e8 e5       	ldi	r30, 0x58	; 88
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	81 60       	ori	r24, 0x01	; 1
 196:	8c 93       	st	X, r24
}
 198:	cf 91       	pop	r28
 19a:	df 91       	pop	r29
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	bf 91       	pop	r27
 1a2:	af 91       	pop	r26
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	7f 91       	pop	r23
 1aa:	6f 91       	pop	r22
 1ac:	5f 91       	pop	r21
 1ae:	4f 91       	pop	r20
 1b0:	3f 91       	pop	r19
 1b2:	2f 91       	pop	r18
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <main>:
 *  Created on: Dec 18, 2023
 *      Author: Aml
 */

int main()
{
 1be:	df 93       	push	r29
 1c0:	cf 93       	push	r28
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0

}
 1ca:	cf 91       	pop	r28
 1cc:	df 91       	pop	r29
 1ce:	08 95       	ret

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
