
DC_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000960  00000000  00000000  00000848  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000085f  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 93 03 	call	0x726	; 0x726 <main>
  64:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <MDIO_vSetPortDirection>:
/*	function name:		MDIO_vSetPortDirection( u8 copy_u8port,u8 copy_u8PortDirection)
 * 	function inputs:	Port number , value to be input  or output
 * 	function outputs:	void
 */
/************************************************************************************************************/
void MDIO_vSetPortDirection( u8 copy_u8port,u8 copy_u8PortDirection){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <MDIO_vSetPortDirection+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <MDIO_vSetPortDirection+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	89 83       	std	Y+1, r24	; 0x01
  7a:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD))
  7c:	89 81       	ldd	r24, Y+1	; 0x01
  7e:	84 30       	cpi	r24, 0x04	; 4
  80:	90 f5       	brcc	.+100    	; 0xe6 <MDIO_vSetPortDirection+0x7a>
		{
	switch (copy_u8port)
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	28 2f       	mov	r18, r24
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	3c 83       	std	Y+4, r19	; 0x04
  8a:	2b 83       	std	Y+3, r18	; 0x03
  8c:	8b 81       	ldd	r24, Y+3	; 0x03
  8e:	9c 81       	ldd	r25, Y+4	; 0x04
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	91 05       	cpc	r25, r1
  94:	d1 f0       	breq	.+52     	; 0xca <MDIO_vSetPortDirection+0x5e>
  96:	2b 81       	ldd	r18, Y+3	; 0x03
  98:	3c 81       	ldd	r19, Y+4	; 0x04
  9a:	22 30       	cpi	r18, 0x02	; 2
  9c:	31 05       	cpc	r19, r1
  9e:	2c f4       	brge	.+10     	; 0xaa <MDIO_vSetPortDirection+0x3e>
  a0:	8b 81       	ldd	r24, Y+3	; 0x03
  a2:	9c 81       	ldd	r25, Y+4	; 0x04
  a4:	00 97       	sbiw	r24, 0x00	; 0
  a6:	61 f0       	breq	.+24     	; 0xc0 <MDIO_vSetPortDirection+0x54>
  a8:	1e c0       	rjmp	.+60     	; 0xe6 <MDIO_vSetPortDirection+0x7a>
  aa:	2b 81       	ldd	r18, Y+3	; 0x03
  ac:	3c 81       	ldd	r19, Y+4	; 0x04
  ae:	22 30       	cpi	r18, 0x02	; 2
  b0:	31 05       	cpc	r19, r1
  b2:	81 f0       	breq	.+32     	; 0xd4 <MDIO_vSetPortDirection+0x68>
  b4:	8b 81       	ldd	r24, Y+3	; 0x03
  b6:	9c 81       	ldd	r25, Y+4	; 0x04
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	91 05       	cpc	r25, r1
  bc:	81 f0       	breq	.+32     	; 0xde <MDIO_vSetPortDirection+0x72>
  be:	13 c0       	rjmp	.+38     	; 0xe6 <MDIO_vSetPortDirection+0x7a>
	{
	case PORTA:	DDRA_reg=copy_u8PortDirection;	break;
  c0:	ea e3       	ldi	r30, 0x3A	; 58
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	8a 81       	ldd	r24, Y+2	; 0x02
  c6:	80 83       	st	Z, r24
  c8:	0e c0       	rjmp	.+28     	; 0xe6 <MDIO_vSetPortDirection+0x7a>
	case PORTB:	DDRB_reg=copy_u8PortDirection;	break;
  ca:	e7 e3       	ldi	r30, 0x37	; 55
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	8a 81       	ldd	r24, Y+2	; 0x02
  d0:	80 83       	st	Z, r24
  d2:	09 c0       	rjmp	.+18     	; 0xe6 <MDIO_vSetPortDirection+0x7a>
	case PORTC:	DDRC_reg=copy_u8PortDirection;	break;
  d4:	e4 e3       	ldi	r30, 0x34	; 52
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	8a 81       	ldd	r24, Y+2	; 0x02
  da:	80 83       	st	Z, r24
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <MDIO_vSetPortDirection+0x7a>
	case PORTD:	DDRD_reg=copy_u8PortDirection;	break;
  de:	e1 e3       	ldi	r30, 0x31	; 49
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	8a 81       	ldd	r24, Y+2	; 0x02
  e4:	80 83       	st	Z, r24
	}
}
}
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	0f 90       	pop	r0
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	08 95       	ret

000000f4 <MDIO_vSetPortValue>:
/*	function name:		void MDIO_vSetPortValue( u8 copy_u8port,u8 copy_u8PortValue)
 * 	function inputs:	Port number , value to be high or low
 * 	function outputs:	void
 */
/************************************************************************************************************/
void MDIO_vSetPortValue( u8 copy_u8port,u8 copy_u8PortValue){
  f4:	df 93       	push	r29
  f6:	cf 93       	push	r28
  f8:	00 d0       	rcall	.+0      	; 0xfa <MDIO_vSetPortValue+0x6>
  fa:	00 d0       	rcall	.+0      	; 0xfc <MDIO_vSetPortValue+0x8>
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	89 83       	std	Y+1, r24	; 0x01
 102:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD))
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	90 f5       	brcc	.+100    	; 0x16e <MDIO_vSetPortValue+0x7a>
			{
	switch (copy_u8port) {
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	28 2f       	mov	r18, r24
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	3c 83       	std	Y+4, r19	; 0x04
 112:	2b 83       	std	Y+3, r18	; 0x03
 114:	8b 81       	ldd	r24, Y+3	; 0x03
 116:	9c 81       	ldd	r25, Y+4	; 0x04
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	91 05       	cpc	r25, r1
 11c:	d1 f0       	breq	.+52     	; 0x152 <MDIO_vSetPortValue+0x5e>
 11e:	2b 81       	ldd	r18, Y+3	; 0x03
 120:	3c 81       	ldd	r19, Y+4	; 0x04
 122:	22 30       	cpi	r18, 0x02	; 2
 124:	31 05       	cpc	r19, r1
 126:	2c f4       	brge	.+10     	; 0x132 <MDIO_vSetPortValue+0x3e>
 128:	8b 81       	ldd	r24, Y+3	; 0x03
 12a:	9c 81       	ldd	r25, Y+4	; 0x04
 12c:	00 97       	sbiw	r24, 0x00	; 0
 12e:	61 f0       	breq	.+24     	; 0x148 <MDIO_vSetPortValue+0x54>
 130:	1e c0       	rjmp	.+60     	; 0x16e <MDIO_vSetPortValue+0x7a>
 132:	2b 81       	ldd	r18, Y+3	; 0x03
 134:	3c 81       	ldd	r19, Y+4	; 0x04
 136:	22 30       	cpi	r18, 0x02	; 2
 138:	31 05       	cpc	r19, r1
 13a:	81 f0       	breq	.+32     	; 0x15c <MDIO_vSetPortValue+0x68>
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	9c 81       	ldd	r25, Y+4	; 0x04
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	91 05       	cpc	r25, r1
 144:	81 f0       	breq	.+32     	; 0x166 <MDIO_vSetPortValue+0x72>
 146:	13 c0       	rjmp	.+38     	; 0x16e <MDIO_vSetPortValue+0x7a>
	case PORTA:	PORTA_reg = copy_u8PortValue;	break;
 148:	eb e3       	ldi	r30, 0x3B	; 59
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	80 83       	st	Z, r24
 150:	0e c0       	rjmp	.+28     	; 0x16e <MDIO_vSetPortValue+0x7a>
	case PORTB:	PORTB_reg = copy_u8PortValue;	break;
 152:	e8 e3       	ldi	r30, 0x38	; 56
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	8a 81       	ldd	r24, Y+2	; 0x02
 158:	80 83       	st	Z, r24
 15a:	09 c0       	rjmp	.+18     	; 0x16e <MDIO_vSetPortValue+0x7a>
	case PORTC:	PORTC_reg = copy_u8PortValue;	break;
 15c:	e5 e3       	ldi	r30, 0x35	; 53
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	80 83       	st	Z, r24
 164:	04 c0       	rjmp	.+8      	; 0x16e <MDIO_vSetPortValue+0x7a>
	case PORTD:	PORTD_reg = copy_u8PortValue;	break;
 166:	e2 e3       	ldi	r30, 0x32	; 50
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	8a 81       	ldd	r24, Y+2	; 0x02
 16c:	80 83       	st	Z, r24
	}
}
}
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	cf 91       	pop	r28
 178:	df 91       	pop	r29
 17a:	08 95       	ret

0000017c <MDIO_GetPortValue>:
/*	function name:		u8 MDIO_GetPortValue( u8 copy_u8port)
 * 	function inputs:	Port number
 * 	function outputs:	value is is high or low
 */
/************************************************************************************************************/
u8 MDIO_GetPortValue( u8 copy_u8port){
 17c:	df 93       	push	r29
 17e:	cf 93       	push	r28
 180:	00 d0       	rcall	.+0      	; 0x182 <MDIO_GetPortValue+0x6>
 182:	00 d0       	rcall	.+0      	; 0x184 <MDIO_GetPortValue+0x8>
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	8a 83       	std	Y+2, r24	; 0x02
	u8 value;

	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD))
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	84 30       	cpi	r24, 0x04	; 4
 18e:	90 f5       	brcc	.+100    	; 0x1f4 <MDIO_GetPortValue+0x78>
			{
	switch (copy_u8port) {
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	3c 83       	std	Y+4, r19	; 0x04
 198:	2b 83       	std	Y+3, r18	; 0x03
 19a:	8b 81       	ldd	r24, Y+3	; 0x03
 19c:	9c 81       	ldd	r25, Y+4	; 0x04
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	91 05       	cpc	r25, r1
 1a2:	d1 f0       	breq	.+52     	; 0x1d8 <MDIO_GetPortValue+0x5c>
 1a4:	2b 81       	ldd	r18, Y+3	; 0x03
 1a6:	3c 81       	ldd	r19, Y+4	; 0x04
 1a8:	22 30       	cpi	r18, 0x02	; 2
 1aa:	31 05       	cpc	r19, r1
 1ac:	2c f4       	brge	.+10     	; 0x1b8 <MDIO_GetPortValue+0x3c>
 1ae:	8b 81       	ldd	r24, Y+3	; 0x03
 1b0:	9c 81       	ldd	r25, Y+4	; 0x04
 1b2:	00 97       	sbiw	r24, 0x00	; 0
 1b4:	61 f0       	breq	.+24     	; 0x1ce <MDIO_GetPortValue+0x52>
 1b6:	1e c0       	rjmp	.+60     	; 0x1f4 <MDIO_GetPortValue+0x78>
 1b8:	2b 81       	ldd	r18, Y+3	; 0x03
 1ba:	3c 81       	ldd	r19, Y+4	; 0x04
 1bc:	22 30       	cpi	r18, 0x02	; 2
 1be:	31 05       	cpc	r19, r1
 1c0:	81 f0       	breq	.+32     	; 0x1e2 <MDIO_GetPortValue+0x66>
 1c2:	8b 81       	ldd	r24, Y+3	; 0x03
 1c4:	9c 81       	ldd	r25, Y+4	; 0x04
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	91 05       	cpc	r25, r1
 1ca:	81 f0       	breq	.+32     	; 0x1ec <MDIO_GetPortValue+0x70>
 1cc:	13 c0       	rjmp	.+38     	; 0x1f4 <MDIO_GetPortValue+0x78>
	case PORTA:	value = PINA_reg;	break;
 1ce:	e9 e3       	ldi	r30, 0x39	; 57
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	89 83       	std	Y+1, r24	; 0x01
 1d6:	0e c0       	rjmp	.+28     	; 0x1f4 <MDIO_GetPortValue+0x78>
	case PORTB:	value=PINB_reg;		break;
 1d8:	e6 e3       	ldi	r30, 0x36	; 54
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	89 83       	std	Y+1, r24	; 0x01
 1e0:	09 c0       	rjmp	.+18     	; 0x1f4 <MDIO_GetPortValue+0x78>
	case PORTC:	value=PINC_reg;		break;
 1e2:	e3 e3       	ldi	r30, 0x33	; 51
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	89 83       	std	Y+1, r24	; 0x01
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <MDIO_GetPortValue+0x78>
	case PORTD:	value=PIND_reg;		break;
 1ec:	e0 e3       	ldi	r30, 0x30	; 48
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	89 83       	std	Y+1, r24	; 0x01
	}
			}
	return value;
 1f4:	89 81       	ldd	r24, Y+1	; 0x01

}
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	cf 91       	pop	r28
 200:	df 91       	pop	r29
 202:	08 95       	ret

00000204 <MDIO_vSetPinDirection>:
/*	function name:		void MDIO_vSetPinDirection( u8 copy_u8port,u8 copy_u8pin, u8 copy_u8PinDirection)
 * 	function inputs:	Port number , pin number ,value to be input  or output
 * 	function outputs:	void
 */
/************************************************************************************************************/
void MDIO_vSetPinDirection( u8 copy_u8port,u8 copy_u8pin, u8 copy_u8PinDirection){
 204:	df 93       	push	r29
 206:	cf 93       	push	r28
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	27 97       	sbiw	r28, 0x07	; 7
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	de bf       	out	0x3e, r29	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	cd bf       	out	0x3d, r28	; 61
 218:	89 83       	std	Y+1, r24	; 0x01
 21a:	6a 83       	std	Y+2, r22	; 0x02
 21c:	4b 83       	std	Y+3, r20	; 0x03
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD) && (copy_u8pin >= PIN0)&& (copy_u8pin <= PIN7)) {
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	84 30       	cpi	r24, 0x04	; 4
 222:	08 f0       	brcs	.+2      	; 0x226 <MDIO_vSetPinDirection+0x22>
 224:	ee c0       	rjmp	.+476    	; 0x402 <MDIO_vSetPinDirection+0x1fe>
 226:	8a 81       	ldd	r24, Y+2	; 0x02
 228:	88 30       	cpi	r24, 0x08	; 8
 22a:	08 f0       	brcs	.+2      	; 0x22e <MDIO_vSetPinDirection+0x2a>
 22c:	ea c0       	rjmp	.+468    	; 0x402 <MDIO_vSetPinDirection+0x1fe>
	if (copy_u8PinDirection == DIO_OUTPUT) {
 22e:	8b 81       	ldd	r24, Y+3	; 0x03
 230:	8f 3f       	cpi	r24, 0xFF	; 255
 232:	09 f0       	breq	.+2      	; 0x236 <MDIO_vSetPinDirection+0x32>
 234:	6f c0       	rjmp	.+222    	; 0x314 <MDIO_vSetPinDirection+0x110>
		switch (copy_u8port) {
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	28 2f       	mov	r18, r24
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	3f 83       	std	Y+7, r19	; 0x07
 23e:	2e 83       	std	Y+6, r18	; 0x06
 240:	8e 81       	ldd	r24, Y+6	; 0x06
 242:	9f 81       	ldd	r25, Y+7	; 0x07
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	91 05       	cpc	r25, r1
 248:	49 f1       	breq	.+82     	; 0x29c <MDIO_vSetPinDirection+0x98>
 24a:	2e 81       	ldd	r18, Y+6	; 0x06
 24c:	3f 81       	ldd	r19, Y+7	; 0x07
 24e:	22 30       	cpi	r18, 0x02	; 2
 250:	31 05       	cpc	r19, r1
 252:	2c f4       	brge	.+10     	; 0x25e <MDIO_vSetPinDirection+0x5a>
 254:	8e 81       	ldd	r24, Y+6	; 0x06
 256:	9f 81       	ldd	r25, Y+7	; 0x07
 258:	00 97       	sbiw	r24, 0x00	; 0
 25a:	61 f0       	breq	.+24     	; 0x274 <MDIO_vSetPinDirection+0x70>
 25c:	d2 c0       	rjmp	.+420    	; 0x402 <MDIO_vSetPinDirection+0x1fe>
 25e:	2e 81       	ldd	r18, Y+6	; 0x06
 260:	3f 81       	ldd	r19, Y+7	; 0x07
 262:	22 30       	cpi	r18, 0x02	; 2
 264:	31 05       	cpc	r19, r1
 266:	71 f1       	breq	.+92     	; 0x2c4 <MDIO_vSetPinDirection+0xc0>
 268:	8e 81       	ldd	r24, Y+6	; 0x06
 26a:	9f 81       	ldd	r25, Y+7	; 0x07
 26c:	83 30       	cpi	r24, 0x03	; 3
 26e:	91 05       	cpc	r25, r1
 270:	e9 f1       	breq	.+122    	; 0x2ec <MDIO_vSetPinDirection+0xe8>
 272:	c7 c0       	rjmp	.+398    	; 0x402 <MDIO_vSetPinDirection+0x1fe>
		case PORTA:	SET_BIT(DDRA_reg, copy_u8pin);	break;
 274:	aa e3       	ldi	r26, 0x3A	; 58
 276:	b0 e0       	ldi	r27, 0x00	; 0
 278:	ea e3       	ldi	r30, 0x3A	; 58
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	48 2f       	mov	r20, r24
 280:	8a 81       	ldd	r24, Y+2	; 0x02
 282:	28 2f       	mov	r18, r24
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 2e       	mov	r0, r18
 28c:	02 c0       	rjmp	.+4      	; 0x292 <MDIO_vSetPinDirection+0x8e>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	0a 94       	dec	r0
 294:	e2 f7       	brpl	.-8      	; 0x28e <MDIO_vSetPinDirection+0x8a>
 296:	84 2b       	or	r24, r20
 298:	8c 93       	st	X, r24
 29a:	b3 c0       	rjmp	.+358    	; 0x402 <MDIO_vSetPinDirection+0x1fe>
		case PORTB:	SET_BIT(DDRB_reg, copy_u8pin);	break;
 29c:	a7 e3       	ldi	r26, 0x37	; 55
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	e7 e3       	ldi	r30, 0x37	; 55
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	48 2f       	mov	r20, r24
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	28 2f       	mov	r18, r24
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 2e       	mov	r0, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <MDIO_vSetPinDirection+0xb6>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <MDIO_vSetPinDirection+0xb2>
 2be:	84 2b       	or	r24, r20
 2c0:	8c 93       	st	X, r24
 2c2:	9f c0       	rjmp	.+318    	; 0x402 <MDIO_vSetPinDirection+0x1fe>
		case PORTC:	SET_BIT(DDRC_reg, copy_u8pin);	break;
 2c4:	a4 e3       	ldi	r26, 0x34	; 52
 2c6:	b0 e0       	ldi	r27, 0x00	; 0
 2c8:	e4 e3       	ldi	r30, 0x34	; 52
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	48 2f       	mov	r20, r24
 2d0:	8a 81       	ldd	r24, Y+2	; 0x02
 2d2:	28 2f       	mov	r18, r24
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 2e       	mov	r0, r18
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <MDIO_vSetPinDirection+0xde>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	0a 94       	dec	r0
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <MDIO_vSetPinDirection+0xda>
 2e6:	84 2b       	or	r24, r20
 2e8:	8c 93       	st	X, r24
 2ea:	8b c0       	rjmp	.+278    	; 0x402 <MDIO_vSetPinDirection+0x1fe>
		case PORTD:	SET_BIT(DDRD_reg, copy_u8pin);	break;
 2ec:	a1 e3       	ldi	r26, 0x31	; 49
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	e1 e3       	ldi	r30, 0x31	; 49
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	48 2f       	mov	r20, r24
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	28 2f       	mov	r18, r24
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 2e       	mov	r0, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <MDIO_vSetPinDirection+0x106>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <MDIO_vSetPinDirection+0x102>
 30e:	84 2b       	or	r24, r20
 310:	8c 93       	st	X, r24
 312:	77 c0       	rjmp	.+238    	; 0x402 <MDIO_vSetPinDirection+0x1fe>
		}
	}
	else if (copy_u8PinDirection == DIO_INPUT) {
 314:	8b 81       	ldd	r24, Y+3	; 0x03
 316:	88 23       	and	r24, r24
 318:	09 f0       	breq	.+2      	; 0x31c <MDIO_vSetPinDirection+0x118>
 31a:	73 c0       	rjmp	.+230    	; 0x402 <MDIO_vSetPinDirection+0x1fe>
		switch (copy_u8port) {
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	28 2f       	mov	r18, r24
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	3d 83       	std	Y+5, r19	; 0x05
 324:	2c 83       	std	Y+4, r18	; 0x04
 326:	8c 81       	ldd	r24, Y+4	; 0x04
 328:	9d 81       	ldd	r25, Y+5	; 0x05
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	91 05       	cpc	r25, r1
 32e:	59 f1       	breq	.+86     	; 0x386 <MDIO_vSetPinDirection+0x182>
 330:	2c 81       	ldd	r18, Y+4	; 0x04
 332:	3d 81       	ldd	r19, Y+5	; 0x05
 334:	22 30       	cpi	r18, 0x02	; 2
 336:	31 05       	cpc	r19, r1
 338:	2c f4       	brge	.+10     	; 0x344 <MDIO_vSetPinDirection+0x140>
 33a:	8c 81       	ldd	r24, Y+4	; 0x04
 33c:	9d 81       	ldd	r25, Y+5	; 0x05
 33e:	00 97       	sbiw	r24, 0x00	; 0
 340:	69 f0       	breq	.+26     	; 0x35c <MDIO_vSetPinDirection+0x158>
 342:	5f c0       	rjmp	.+190    	; 0x402 <MDIO_vSetPinDirection+0x1fe>
 344:	2c 81       	ldd	r18, Y+4	; 0x04
 346:	3d 81       	ldd	r19, Y+5	; 0x05
 348:	22 30       	cpi	r18, 0x02	; 2
 34a:	31 05       	cpc	r19, r1
 34c:	89 f1       	breq	.+98     	; 0x3b0 <MDIO_vSetPinDirection+0x1ac>
 34e:	8c 81       	ldd	r24, Y+4	; 0x04
 350:	9d 81       	ldd	r25, Y+5	; 0x05
 352:	83 30       	cpi	r24, 0x03	; 3
 354:	91 05       	cpc	r25, r1
 356:	09 f4       	brne	.+2      	; 0x35a <MDIO_vSetPinDirection+0x156>
 358:	40 c0       	rjmp	.+128    	; 0x3da <MDIO_vSetPinDirection+0x1d6>
 35a:	53 c0       	rjmp	.+166    	; 0x402 <MDIO_vSetPinDirection+0x1fe>
		case PORTA:	CLR_BIT(DDRA_reg, copy_u8pin);	break;
 35c:	aa e3       	ldi	r26, 0x3A	; 58
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	ea e3       	ldi	r30, 0x3A	; 58
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	48 2f       	mov	r20, r24
 368:	8a 81       	ldd	r24, Y+2	; 0x02
 36a:	28 2f       	mov	r18, r24
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 2e       	mov	r0, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <MDIO_vSetPinDirection+0x176>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <MDIO_vSetPinDirection+0x172>
 37e:	80 95       	com	r24
 380:	84 23       	and	r24, r20
 382:	8c 93       	st	X, r24
 384:	3e c0       	rjmp	.+124    	; 0x402 <MDIO_vSetPinDirection+0x1fe>
		case PORTB:	CLR_BIT(DDRB_reg, copy_u8pin);	break;
 386:	a7 e3       	ldi	r26, 0x37	; 55
 388:	b0 e0       	ldi	r27, 0x00	; 0
 38a:	e7 e3       	ldi	r30, 0x37	; 55
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	48 2f       	mov	r20, r24
 392:	8a 81       	ldd	r24, Y+2	; 0x02
 394:	28 2f       	mov	r18, r24
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 2e       	mov	r0, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <MDIO_vSetPinDirection+0x1a0>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	0a 94       	dec	r0
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <MDIO_vSetPinDirection+0x19c>
 3a8:	80 95       	com	r24
 3aa:	84 23       	and	r24, r20
 3ac:	8c 93       	st	X, r24
 3ae:	29 c0       	rjmp	.+82     	; 0x402 <MDIO_vSetPinDirection+0x1fe>
		case PORTC:	CLR_BIT(DDRC_reg, copy_u8pin);	break;
 3b0:	a4 e3       	ldi	r26, 0x34	; 52
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	e4 e3       	ldi	r30, 0x34	; 52
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	48 2f       	mov	r20, r24
 3bc:	8a 81       	ldd	r24, Y+2	; 0x02
 3be:	28 2f       	mov	r18, r24
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 2e       	mov	r0, r18
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <MDIO_vSetPinDirection+0x1ca>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	0a 94       	dec	r0
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <MDIO_vSetPinDirection+0x1c6>
 3d2:	80 95       	com	r24
 3d4:	84 23       	and	r24, r20
 3d6:	8c 93       	st	X, r24
 3d8:	14 c0       	rjmp	.+40     	; 0x402 <MDIO_vSetPinDirection+0x1fe>
		case PORTD:	CLR_BIT(DDRD_reg, copy_u8pin);	break;
 3da:	a1 e3       	ldi	r26, 0x31	; 49
 3dc:	b0 e0       	ldi	r27, 0x00	; 0
 3de:	e1 e3       	ldi	r30, 0x31	; 49
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	48 2f       	mov	r20, r24
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	28 2f       	mov	r18, r24
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 2e       	mov	r0, r18
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <MDIO_vSetPinDirection+0x1f4>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	0a 94       	dec	r0
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <MDIO_vSetPinDirection+0x1f0>
 3fc:	80 95       	com	r24
 3fe:	84 23       	and	r24, r20
 400:	8c 93       	st	X, r24
		}
	}
}
}
 402:	27 96       	adiw	r28, 0x07	; 7
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	cf 91       	pop	r28
 410:	df 91       	pop	r29
 412:	08 95       	ret

00000414 <MDIO_vSetPinValue>:
 * 	function inputs:	Port number , pin number, value to be high or low
 * 	function outputs:	void
 */
/************************************************************************************************************/
void MDIO_vSetPinValue( u8 copy_u8port,u8 copy_u8pin, u8 copy_u8PinValue)
{
 414:	df 93       	push	r29
 416:	cf 93       	push	r28
 418:	cd b7       	in	r28, 0x3d	; 61
 41a:	de b7       	in	r29, 0x3e	; 62
 41c:	27 97       	sbiw	r28, 0x07	; 7
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	f8 94       	cli
 422:	de bf       	out	0x3e, r29	; 62
 424:	0f be       	out	0x3f, r0	; 63
 426:	cd bf       	out	0x3d, r28	; 61
 428:	89 83       	std	Y+1, r24	; 0x01
 42a:	6a 83       	std	Y+2, r22	; 0x02
 42c:	4b 83       	std	Y+3, r20	; 0x03
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD) && (copy_u8pin >= PIN0)&& (copy_u8pin <= PIN7)) {
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	84 30       	cpi	r24, 0x04	; 4
 432:	08 f0       	brcs	.+2      	; 0x436 <MDIO_vSetPinValue+0x22>
 434:	ee c0       	rjmp	.+476    	; 0x612 <MDIO_vSetPinValue+0x1fe>
 436:	8a 81       	ldd	r24, Y+2	; 0x02
 438:	88 30       	cpi	r24, 0x08	; 8
 43a:	08 f0       	brcs	.+2      	; 0x43e <MDIO_vSetPinValue+0x2a>
 43c:	ea c0       	rjmp	.+468    	; 0x612 <MDIO_vSetPinValue+0x1fe>

	if (copy_u8PinValue == DIO_HIGH) {
 43e:	8b 81       	ldd	r24, Y+3	; 0x03
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	09 f0       	breq	.+2      	; 0x446 <MDIO_vSetPinValue+0x32>
 444:	6f c0       	rjmp	.+222    	; 0x524 <MDIO_vSetPinValue+0x110>
		switch (copy_u8port) {
 446:	89 81       	ldd	r24, Y+1	; 0x01
 448:	28 2f       	mov	r18, r24
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	3f 83       	std	Y+7, r19	; 0x07
 44e:	2e 83       	std	Y+6, r18	; 0x06
 450:	8e 81       	ldd	r24, Y+6	; 0x06
 452:	9f 81       	ldd	r25, Y+7	; 0x07
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	91 05       	cpc	r25, r1
 458:	49 f1       	breq	.+82     	; 0x4ac <MDIO_vSetPinValue+0x98>
 45a:	2e 81       	ldd	r18, Y+6	; 0x06
 45c:	3f 81       	ldd	r19, Y+7	; 0x07
 45e:	22 30       	cpi	r18, 0x02	; 2
 460:	31 05       	cpc	r19, r1
 462:	2c f4       	brge	.+10     	; 0x46e <MDIO_vSetPinValue+0x5a>
 464:	8e 81       	ldd	r24, Y+6	; 0x06
 466:	9f 81       	ldd	r25, Y+7	; 0x07
 468:	00 97       	sbiw	r24, 0x00	; 0
 46a:	61 f0       	breq	.+24     	; 0x484 <MDIO_vSetPinValue+0x70>
 46c:	d2 c0       	rjmp	.+420    	; 0x612 <MDIO_vSetPinValue+0x1fe>
 46e:	2e 81       	ldd	r18, Y+6	; 0x06
 470:	3f 81       	ldd	r19, Y+7	; 0x07
 472:	22 30       	cpi	r18, 0x02	; 2
 474:	31 05       	cpc	r19, r1
 476:	71 f1       	breq	.+92     	; 0x4d4 <MDIO_vSetPinValue+0xc0>
 478:	8e 81       	ldd	r24, Y+6	; 0x06
 47a:	9f 81       	ldd	r25, Y+7	; 0x07
 47c:	83 30       	cpi	r24, 0x03	; 3
 47e:	91 05       	cpc	r25, r1
 480:	e9 f1       	breq	.+122    	; 0x4fc <MDIO_vSetPinValue+0xe8>
 482:	c7 c0       	rjmp	.+398    	; 0x612 <MDIO_vSetPinValue+0x1fe>
		case PORTA:	SET_BIT(PORTA_reg, copy_u8pin);		break;
 484:	ab e3       	ldi	r26, 0x3B	; 59
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	eb e3       	ldi	r30, 0x3B	; 59
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	48 2f       	mov	r20, r24
 490:	8a 81       	ldd	r24, Y+2	; 0x02
 492:	28 2f       	mov	r18, r24
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 2e       	mov	r0, r18
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <MDIO_vSetPinValue+0x8e>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	0a 94       	dec	r0
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <MDIO_vSetPinValue+0x8a>
 4a6:	84 2b       	or	r24, r20
 4a8:	8c 93       	st	X, r24
 4aa:	b3 c0       	rjmp	.+358    	; 0x612 <MDIO_vSetPinValue+0x1fe>
		case PORTB:	SET_BIT(PORTB_reg, copy_u8pin);		break;
 4ac:	a8 e3       	ldi	r26, 0x38	; 56
 4ae:	b0 e0       	ldi	r27, 0x00	; 0
 4b0:	e8 e3       	ldi	r30, 0x38	; 56
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	48 2f       	mov	r20, r24
 4b8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ba:	28 2f       	mov	r18, r24
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	02 2e       	mov	r0, r18
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <MDIO_vSetPinValue+0xb6>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	0a 94       	dec	r0
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <MDIO_vSetPinValue+0xb2>
 4ce:	84 2b       	or	r24, r20
 4d0:	8c 93       	st	X, r24
 4d2:	9f c0       	rjmp	.+318    	; 0x612 <MDIO_vSetPinValue+0x1fe>
		case PORTC:	SET_BIT(PORTC_reg, copy_u8pin);		break;
 4d4:	a5 e3       	ldi	r26, 0x35	; 53
 4d6:	b0 e0       	ldi	r27, 0x00	; 0
 4d8:	e5 e3       	ldi	r30, 0x35	; 53
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	48 2f       	mov	r20, r24
 4e0:	8a 81       	ldd	r24, Y+2	; 0x02
 4e2:	28 2f       	mov	r18, r24
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 2e       	mov	r0, r18
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <MDIO_vSetPinValue+0xde>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	0a 94       	dec	r0
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <MDIO_vSetPinValue+0xda>
 4f6:	84 2b       	or	r24, r20
 4f8:	8c 93       	st	X, r24
 4fa:	8b c0       	rjmp	.+278    	; 0x612 <MDIO_vSetPinValue+0x1fe>
		case PORTD:	SET_BIT(PORTD_reg, copy_u8pin);		break;
 4fc:	a2 e3       	ldi	r26, 0x32	; 50
 4fe:	b0 e0       	ldi	r27, 0x00	; 0
 500:	e2 e3       	ldi	r30, 0x32	; 50
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	48 2f       	mov	r20, r24
 508:	8a 81       	ldd	r24, Y+2	; 0x02
 50a:	28 2f       	mov	r18, r24
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 2e       	mov	r0, r18
 514:	02 c0       	rjmp	.+4      	; 0x51a <MDIO_vSetPinValue+0x106>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	0a 94       	dec	r0
 51c:	e2 f7       	brpl	.-8      	; 0x516 <MDIO_vSetPinValue+0x102>
 51e:	84 2b       	or	r24, r20
 520:	8c 93       	st	X, r24
 522:	77 c0       	rjmp	.+238    	; 0x612 <MDIO_vSetPinValue+0x1fe>
		}
	}
	else if (copy_u8PinValue == DIO_LOW) {
 524:	8b 81       	ldd	r24, Y+3	; 0x03
 526:	88 23       	and	r24, r24
 528:	09 f0       	breq	.+2      	; 0x52c <MDIO_vSetPinValue+0x118>
 52a:	73 c0       	rjmp	.+230    	; 0x612 <MDIO_vSetPinValue+0x1fe>
		switch (copy_u8port) {
 52c:	89 81       	ldd	r24, Y+1	; 0x01
 52e:	28 2f       	mov	r18, r24
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	3d 83       	std	Y+5, r19	; 0x05
 534:	2c 83       	std	Y+4, r18	; 0x04
 536:	8c 81       	ldd	r24, Y+4	; 0x04
 538:	9d 81       	ldd	r25, Y+5	; 0x05
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	91 05       	cpc	r25, r1
 53e:	59 f1       	breq	.+86     	; 0x596 <MDIO_vSetPinValue+0x182>
 540:	2c 81       	ldd	r18, Y+4	; 0x04
 542:	3d 81       	ldd	r19, Y+5	; 0x05
 544:	22 30       	cpi	r18, 0x02	; 2
 546:	31 05       	cpc	r19, r1
 548:	2c f4       	brge	.+10     	; 0x554 <MDIO_vSetPinValue+0x140>
 54a:	8c 81       	ldd	r24, Y+4	; 0x04
 54c:	9d 81       	ldd	r25, Y+5	; 0x05
 54e:	00 97       	sbiw	r24, 0x00	; 0
 550:	69 f0       	breq	.+26     	; 0x56c <MDIO_vSetPinValue+0x158>
 552:	5f c0       	rjmp	.+190    	; 0x612 <MDIO_vSetPinValue+0x1fe>
 554:	2c 81       	ldd	r18, Y+4	; 0x04
 556:	3d 81       	ldd	r19, Y+5	; 0x05
 558:	22 30       	cpi	r18, 0x02	; 2
 55a:	31 05       	cpc	r19, r1
 55c:	89 f1       	breq	.+98     	; 0x5c0 <MDIO_vSetPinValue+0x1ac>
 55e:	8c 81       	ldd	r24, Y+4	; 0x04
 560:	9d 81       	ldd	r25, Y+5	; 0x05
 562:	83 30       	cpi	r24, 0x03	; 3
 564:	91 05       	cpc	r25, r1
 566:	09 f4       	brne	.+2      	; 0x56a <MDIO_vSetPinValue+0x156>
 568:	40 c0       	rjmp	.+128    	; 0x5ea <MDIO_vSetPinValue+0x1d6>
 56a:	53 c0       	rjmp	.+166    	; 0x612 <MDIO_vSetPinValue+0x1fe>
		case PORTA:	CLR_BIT(PORTA_reg, copy_u8pin);		break;
 56c:	ab e3       	ldi	r26, 0x3B	; 59
 56e:	b0 e0       	ldi	r27, 0x00	; 0
 570:	eb e3       	ldi	r30, 0x3B	; 59
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	48 2f       	mov	r20, r24
 578:	8a 81       	ldd	r24, Y+2	; 0x02
 57a:	28 2f       	mov	r18, r24
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 2e       	mov	r0, r18
 584:	02 c0       	rjmp	.+4      	; 0x58a <MDIO_vSetPinValue+0x176>
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	0a 94       	dec	r0
 58c:	e2 f7       	brpl	.-8      	; 0x586 <MDIO_vSetPinValue+0x172>
 58e:	80 95       	com	r24
 590:	84 23       	and	r24, r20
 592:	8c 93       	st	X, r24
 594:	3e c0       	rjmp	.+124    	; 0x612 <MDIO_vSetPinValue+0x1fe>
		case PORTB:	CLR_BIT(PORTB_reg, copy_u8pin);		break;
 596:	a8 e3       	ldi	r26, 0x38	; 56
 598:	b0 e0       	ldi	r27, 0x00	; 0
 59a:	e8 e3       	ldi	r30, 0x38	; 56
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	48 2f       	mov	r20, r24
 5a2:	8a 81       	ldd	r24, Y+2	; 0x02
 5a4:	28 2f       	mov	r18, r24
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 2e       	mov	r0, r18
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <MDIO_vSetPinValue+0x1a0>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	0a 94       	dec	r0
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <MDIO_vSetPinValue+0x19c>
 5b8:	80 95       	com	r24
 5ba:	84 23       	and	r24, r20
 5bc:	8c 93       	st	X, r24
 5be:	29 c0       	rjmp	.+82     	; 0x612 <MDIO_vSetPinValue+0x1fe>
		case PORTC:	CLR_BIT(PORTC_reg, copy_u8pin);		break;
 5c0:	a5 e3       	ldi	r26, 0x35	; 53
 5c2:	b0 e0       	ldi	r27, 0x00	; 0
 5c4:	e5 e3       	ldi	r30, 0x35	; 53
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	80 81       	ld	r24, Z
 5ca:	48 2f       	mov	r20, r24
 5cc:	8a 81       	ldd	r24, Y+2	; 0x02
 5ce:	28 2f       	mov	r18, r24
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	02 2e       	mov	r0, r18
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <MDIO_vSetPinValue+0x1ca>
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	0a 94       	dec	r0
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <MDIO_vSetPinValue+0x1c6>
 5e2:	80 95       	com	r24
 5e4:	84 23       	and	r24, r20
 5e6:	8c 93       	st	X, r24
 5e8:	14 c0       	rjmp	.+40     	; 0x612 <MDIO_vSetPinValue+0x1fe>
		case PORTD:	CLR_BIT(PORTD_reg, copy_u8pin);		break;
 5ea:	a2 e3       	ldi	r26, 0x32	; 50
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	e2 e3       	ldi	r30, 0x32	; 50
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	80 81       	ld	r24, Z
 5f4:	48 2f       	mov	r20, r24
 5f6:	8a 81       	ldd	r24, Y+2	; 0x02
 5f8:	28 2f       	mov	r18, r24
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 2e       	mov	r0, r18
 602:	02 c0       	rjmp	.+4      	; 0x608 <MDIO_vSetPinValue+0x1f4>
 604:	88 0f       	add	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	0a 94       	dec	r0
 60a:	e2 f7       	brpl	.-8      	; 0x604 <MDIO_vSetPinValue+0x1f0>
 60c:	80 95       	com	r24
 60e:	84 23       	and	r24, r20
 610:	8c 93       	st	X, r24
		}
	}
}
}
 612:	27 96       	adiw	r28, 0x07	; 7
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	f8 94       	cli
 618:	de bf       	out	0x3e, r29	; 62
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	cd bf       	out	0x3d, r28	; 61
 61e:	cf 91       	pop	r28
 620:	df 91       	pop	r29
 622:	08 95       	ret

00000624 <MDIO_GetPinValue>:
/*	function name:		void GET_PIN_VALUE( u8 PORT,u8 PIN_ID)
 * 	function inputs:	Port number, Pin number
 * 	function outputs:	value is is high or low
 */
/************************************************************************************************************/
u8 MDIO_GetPinValue( u8 copy_u8port,u8 copy_u8pin){
 624:	df 93       	push	r29
 626:	cf 93       	push	r28
 628:	00 d0       	rcall	.+0      	; 0x62a <MDIO_GetPinValue+0x6>
 62a:	00 d0       	rcall	.+0      	; 0x62c <MDIO_GetPinValue+0x8>
 62c:	0f 92       	push	r0
 62e:	cd b7       	in	r28, 0x3d	; 61
 630:	de b7       	in	r29, 0x3e	; 62
 632:	8a 83       	std	Y+2, r24	; 0x02
 634:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	if ((copy_u8port >= PORTA) && (copy_u8port <= PORTD) && (copy_u8pin >= PIN0)&& (copy_u8pin <= PIN7)) {
 636:	8a 81       	ldd	r24, Y+2	; 0x02
 638:	84 30       	cpi	r24, 0x04	; 4
 63a:	08 f0       	brcs	.+2      	; 0x63e <MDIO_GetPinValue+0x1a>
 63c:	6b c0       	rjmp	.+214    	; 0x714 <MDIO_GetPinValue+0xf0>
 63e:	8b 81       	ldd	r24, Y+3	; 0x03
 640:	88 30       	cpi	r24, 0x08	; 8
 642:	08 f0       	brcs	.+2      	; 0x646 <MDIO_GetPinValue+0x22>
 644:	67 c0       	rjmp	.+206    	; 0x714 <MDIO_GetPinValue+0xf0>

	switch (copy_u8port) {
 646:	8a 81       	ldd	r24, Y+2	; 0x02
 648:	28 2f       	mov	r18, r24
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	3d 83       	std	Y+5, r19	; 0x05
 64e:	2c 83       	std	Y+4, r18	; 0x04
 650:	4c 81       	ldd	r20, Y+4	; 0x04
 652:	5d 81       	ldd	r21, Y+5	; 0x05
 654:	41 30       	cpi	r20, 0x01	; 1
 656:	51 05       	cpc	r21, r1
 658:	41 f1       	breq	.+80     	; 0x6aa <MDIO_GetPinValue+0x86>
 65a:	8c 81       	ldd	r24, Y+4	; 0x04
 65c:	9d 81       	ldd	r25, Y+5	; 0x05
 65e:	82 30       	cpi	r24, 0x02	; 2
 660:	91 05       	cpc	r25, r1
 662:	34 f4       	brge	.+12     	; 0x670 <MDIO_GetPinValue+0x4c>
 664:	2c 81       	ldd	r18, Y+4	; 0x04
 666:	3d 81       	ldd	r19, Y+5	; 0x05
 668:	21 15       	cp	r18, r1
 66a:	31 05       	cpc	r19, r1
 66c:	61 f0       	breq	.+24     	; 0x686 <MDIO_GetPinValue+0x62>
 66e:	52 c0       	rjmp	.+164    	; 0x714 <MDIO_GetPinValue+0xf0>
 670:	4c 81       	ldd	r20, Y+4	; 0x04
 672:	5d 81       	ldd	r21, Y+5	; 0x05
 674:	42 30       	cpi	r20, 0x02	; 2
 676:	51 05       	cpc	r21, r1
 678:	51 f1       	breq	.+84     	; 0x6ce <MDIO_GetPinValue+0xaa>
 67a:	8c 81       	ldd	r24, Y+4	; 0x04
 67c:	9d 81       	ldd	r25, Y+5	; 0x05
 67e:	83 30       	cpi	r24, 0x03	; 3
 680:	91 05       	cpc	r25, r1
 682:	b9 f1       	breq	.+110    	; 0x6f2 <MDIO_GetPinValue+0xce>
 684:	47 c0       	rjmp	.+142    	; 0x714 <MDIO_GetPinValue+0xf0>
	case PORTA:	value = GET_BIT(PINA_reg,copy_u8pin);	break;
 686:	e9 e3       	ldi	r30, 0x39	; 57
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	80 81       	ld	r24, Z
 68c:	28 2f       	mov	r18, r24
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	8b 81       	ldd	r24, Y+3	; 0x03
 692:	88 2f       	mov	r24, r24
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	a9 01       	movw	r20, r18
 698:	02 c0       	rjmp	.+4      	; 0x69e <MDIO_GetPinValue+0x7a>
 69a:	55 95       	asr	r21
 69c:	47 95       	ror	r20
 69e:	8a 95       	dec	r24
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <MDIO_GetPinValue+0x76>
 6a2:	ca 01       	movw	r24, r20
 6a4:	81 70       	andi	r24, 0x01	; 1
 6a6:	89 83       	std	Y+1, r24	; 0x01
 6a8:	35 c0       	rjmp	.+106    	; 0x714 <MDIO_GetPinValue+0xf0>
	case PORTB:	value = GET_BIT(PINB_reg,copy_u8pin);	break;
 6aa:	e6 e3       	ldi	r30, 0x36	; 54
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	80 81       	ld	r24, Z
 6b0:	28 2f       	mov	r18, r24
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	8b 81       	ldd	r24, Y+3	; 0x03
 6b6:	88 2f       	mov	r24, r24
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	a9 01       	movw	r20, r18
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <MDIO_GetPinValue+0x9e>
 6be:	55 95       	asr	r21
 6c0:	47 95       	ror	r20
 6c2:	8a 95       	dec	r24
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <MDIO_GetPinValue+0x9a>
 6c6:	ca 01       	movw	r24, r20
 6c8:	81 70       	andi	r24, 0x01	; 1
 6ca:	89 83       	std	Y+1, r24	; 0x01
 6cc:	23 c0       	rjmp	.+70     	; 0x714 <MDIO_GetPinValue+0xf0>
	case PORTC:	value = GET_BIT(PINC_reg,copy_u8pin);	break;
 6ce:	e3 e3       	ldi	r30, 0x33	; 51
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	28 2f       	mov	r18, r24
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	8b 81       	ldd	r24, Y+3	; 0x03
 6da:	88 2f       	mov	r24, r24
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	a9 01       	movw	r20, r18
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <MDIO_GetPinValue+0xc2>
 6e2:	55 95       	asr	r21
 6e4:	47 95       	ror	r20
 6e6:	8a 95       	dec	r24
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <MDIO_GetPinValue+0xbe>
 6ea:	ca 01       	movw	r24, r20
 6ec:	81 70       	andi	r24, 0x01	; 1
 6ee:	89 83       	std	Y+1, r24	; 0x01
 6f0:	11 c0       	rjmp	.+34     	; 0x714 <MDIO_GetPinValue+0xf0>
	case PORTD:	value = GET_BIT(PIND_reg,copy_u8pin);	break;
 6f2:	e0 e3       	ldi	r30, 0x30	; 48
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	28 2f       	mov	r18, r24
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	8b 81       	ldd	r24, Y+3	; 0x03
 6fe:	88 2f       	mov	r24, r24
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	a9 01       	movw	r20, r18
 704:	02 c0       	rjmp	.+4      	; 0x70a <MDIO_GetPinValue+0xe6>
 706:	55 95       	asr	r21
 708:	47 95       	ror	r20
 70a:	8a 95       	dec	r24
 70c:	e2 f7       	brpl	.-8      	; 0x706 <MDIO_GetPinValue+0xe2>
 70e:	ca 01       	movw	r24, r20
 710:	81 70       	andi	r24, 0x01	; 1
 712:	89 83       	std	Y+1, r24	; 0x01
	}
	}
	return value;
 714:	89 81       	ldd	r24, Y+1	; 0x01

}
 716:	0f 90       	pop	r0
 718:	0f 90       	pop	r0
 71a:	0f 90       	pop	r0
 71c:	0f 90       	pop	r0
 71e:	0f 90       	pop	r0
 720:	cf 91       	pop	r28
 722:	df 91       	pop	r29
 724:	08 95       	ret

00000726 <main>:

#define a 0
#define b 1

int main ()
{
 726:	df 93       	push	r29
 728:	cf 93       	push	r28
 72a:	00 d0       	rcall	.+0      	; 0x72c <main+0x6>
 72c:	cd b7       	in	r28, 0x3d	; 61
 72e:	de b7       	in	r29, 0x3e	; 62
#endif

#if b

		/*for motor*/
	MDIO_vSetPinDirection(PORTD,PIN0,DIO_OUTPUT);
 730:	83 e0       	ldi	r24, 0x03	; 3
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	4f ef       	ldi	r20, 0xFF	; 255
 736:	0e 94 02 01 	call	0x204	; 0x204 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(PORTD,PIN1,DIO_OUTPUT);
 73a:	83 e0       	ldi	r24, 0x03	; 3
 73c:	61 e0       	ldi	r22, 0x01	; 1
 73e:	4f ef       	ldi	r20, 0xFF	; 255
 740:	0e 94 02 01 	call	0x204	; 0x204 <MDIO_vSetPinDirection>

		/*for switch*/
	MDIO_vSetPinDirection(PORTC,PIN0,DIO_INPUT);
 744:	82 e0       	ldi	r24, 0x02	; 2
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	40 e0       	ldi	r20, 0x00	; 0
 74a:	0e 94 02 01 	call	0x204	; 0x204 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(PORTC,PIN1,DIO_INPUT);
 74e:	82 e0       	ldi	r24, 0x02	; 2
 750:	61 e0       	ldi	r22, 0x01	; 1
 752:	40 e0       	ldi	r20, 0x00	; 0
 754:	0e 94 02 01 	call	0x204	; 0x204 <MDIO_vSetPinDirection>
		/*for pull-up*/
	MDIO_vSetPinValue(PORTC,PIN0,DIO_HIGH);
 758:	82 e0       	ldi	r24, 0x02	; 2
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	41 e0       	ldi	r20, 0x01	; 1
 75e:	0e 94 0a 02 	call	0x414	; 0x414 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(PORTC,PIN1,DIO_HIGH);
 762:	82 e0       	ldi	r24, 0x02	; 2
 764:	61 e0       	ldi	r22, 0x01	; 1
 766:	41 e0       	ldi	r20, 0x01	; 1
 768:	0e 94 0a 02 	call	0x414	; 0x414 <MDIO_vSetPinValue>
	u8 Anti_Clw;

	while (1)
	{

		ClW =MDIO_GetPinValue(PORTC,PIN0);
 76c:	82 e0       	ldi	r24, 0x02	; 2
 76e:	60 e0       	ldi	r22, 0x00	; 0
 770:	0e 94 12 03 	call	0x624	; 0x624 <MDIO_GetPinValue>
 774:	8a 83       	std	Y+2, r24	; 0x02
		if (0==ClW)
 776:	8a 81       	ldd	r24, Y+2	; 0x02
 778:	88 23       	and	r24, r24
 77a:	59 f4       	brne	.+22     	; 0x792 <main+0x6c>
		{
			MDIO_vSetPinValue(PORTD,PIN0,DIO_HIGH);
 77c:	83 e0       	ldi	r24, 0x03	; 3
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	41 e0       	ldi	r20, 0x01	; 1
 782:	0e 94 0a 02 	call	0x414	; 0x414 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORTD,PIN1,DIO_LOW);
 786:	83 e0       	ldi	r24, 0x03	; 3
 788:	61 e0       	ldi	r22, 0x01	; 1
 78a:	40 e0       	ldi	r20, 0x00	; 0
 78c:	0e 94 0a 02 	call	0x414	; 0x414 <MDIO_vSetPinValue>
 790:	0d c0       	rjmp	.+26     	; 0x7ac <main+0x86>

		}
		else if (1==ClW)
 792:	8a 81       	ldd	r24, Y+2	; 0x02
 794:	81 30       	cpi	r24, 0x01	; 1
 796:	51 f4       	brne	.+20     	; 0x7ac <main+0x86>
		{
			MDIO_vSetPinValue(PORTD,PIN0,DIO_LOW);
 798:	83 e0       	ldi	r24, 0x03	; 3
 79a:	60 e0       	ldi	r22, 0x00	; 0
 79c:	40 e0       	ldi	r20, 0x00	; 0
 79e:	0e 94 0a 02 	call	0x414	; 0x414 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORTD,PIN1,DIO_LOW);
 7a2:	83 e0       	ldi	r24, 0x03	; 3
 7a4:	61 e0       	ldi	r22, 0x01	; 1
 7a6:	40 e0       	ldi	r20, 0x00	; 0
 7a8:	0e 94 0a 02 	call	0x414	; 0x414 <MDIO_vSetPinValue>
		}
		else {}

		Anti_Clw=MDIO_GetPinValue(PORTC,PIN1);
 7ac:	82 e0       	ldi	r24, 0x02	; 2
 7ae:	61 e0       	ldi	r22, 0x01	; 1
 7b0:	0e 94 12 03 	call	0x624	; 0x624 <MDIO_GetPinValue>
 7b4:	89 83       	std	Y+1, r24	; 0x01
		if (0==Anti_Clw)
 7b6:	89 81       	ldd	r24, Y+1	; 0x01
 7b8:	88 23       	and	r24, r24
 7ba:	59 f4       	brne	.+22     	; 0x7d2 <main+0xac>
		{
			MDIO_vSetPinValue(PORTD,PIN0,DIO_LOW);
 7bc:	83 e0       	ldi	r24, 0x03	; 3
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	40 e0       	ldi	r20, 0x00	; 0
 7c2:	0e 94 0a 02 	call	0x414	; 0x414 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORTD,PIN1,DIO_HIGH);
 7c6:	83 e0       	ldi	r24, 0x03	; 3
 7c8:	61 e0       	ldi	r22, 0x01	; 1
 7ca:	41 e0       	ldi	r20, 0x01	; 1
 7cc:	0e 94 0a 02 	call	0x414	; 0x414 <MDIO_vSetPinValue>
 7d0:	cd cf       	rjmp	.-102    	; 0x76c <main+0x46>
		}
		else if (1==Anti_Clw)
 7d2:	89 81       	ldd	r24, Y+1	; 0x01
 7d4:	81 30       	cpi	r24, 0x01	; 1
 7d6:	51 f6       	brne	.-108    	; 0x76c <main+0x46>
		{
			MDIO_vSetPinValue(PORTD,PIN0,DIO_LOW);
 7d8:	83 e0       	ldi	r24, 0x03	; 3
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	40 e0       	ldi	r20, 0x00	; 0
 7de:	0e 94 0a 02 	call	0x414	; 0x414 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORTD,PIN1,DIO_LOW);
 7e2:	83 e0       	ldi	r24, 0x03	; 3
 7e4:	61 e0       	ldi	r22, 0x01	; 1
 7e6:	40 e0       	ldi	r20, 0x00	; 0
 7e8:	0e 94 0a 02 	call	0x414	; 0x414 <MDIO_vSetPinValue>
 7ec:	bf cf       	rjmp	.-130    	; 0x76c <main+0x46>

000007ee <_exit>:
 7ee:	f8 94       	cli

000007f0 <__stop_program>:
 7f0:	ff cf       	rjmp	.-2      	; 0x7f0 <__stop_program>
